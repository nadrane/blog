#!/usr/bin/env node
// babel-preset-env doesn't find this import if you
// use require() with backtick strings so use the es6 syntax
"use strict";

require("core-js/modules/es6.array.from");

require("core-js/modules/es6.array.sort");

require("core-js/modules/es6.array.species");

require("core-js/modules/es6.function.has-instance");

require("core-js/modules/es6.map");

require("core-js/modules/es7.object.define-getter");

require("core-js/modules/es7.object.define-setter");

require("core-js/modules/es7.object.entries");

require("core-js/modules/es7.object.get-own-property-descriptors");

require("core-js/modules/es7.object.lookup-getter");

require("core-js/modules/es7.object.lookup-setter");

require("core-js/modules/es7.object.values");

require("core-js/modules/es6.promise");

require("core-js/modules/es7.promise.finally");

require("core-js/modules/es6.set");

require("core-js/modules/es6.symbol");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es7.string.pad-start");

require("core-js/modules/es7.string.pad-end");

require("core-js/modules/es6.typed.array-buffer");

require("core-js/modules/es6.typed.int8-array");

require("core-js/modules/es6.typed.uint8-array");

require("core-js/modules/es6.typed.uint8-clamped-array");

require("core-js/modules/es6.typed.int16-array");

require("core-js/modules/es6.typed.uint16-array");

require("core-js/modules/es6.typed.int32-array");

require("core-js/modules/es6.typed.uint32-array");

require("core-js/modules/es6.typed.float32-array");

require("core-js/modules/es6.typed.float64-array");

require("core-js/modules/es6.weak-map");

require("core-js/modules/es6.weak-set");

require("core-js/modules/es7.array.flat-map");

const createCli = require(`./create-cli`);

const report = require(`./reporter`);

global.Promise = require(`bluebird`);
const version = process.version;
const verDigit = Number(version.match(/\d+/)[0]);

const pkg = require(`../package.json`);

const updateNotifier = require(`update-notifier`); // Check if update is available


updateNotifier({
  pkg
}).notify();

if (verDigit < 4) {
  report.panic(`Gatsby 1.0+ requires node.js v4 or higher (you have ${version}). \n` + `Upgrade node to the latest stable release.`);
}

Promise.onPossiblyUnhandledRejection(error => {
  report.error(error);
  throw error;
});
process.on(`unhandledRejection`, error => {
  // This will exit the process in newer Node anyway so lets be consistent
  // across versions and crash
  report.panic(`UNHANDLED REJECTION`, error);
});
process.on(`uncaughtException`, error => {
  report.panic(`UNHANDLED EXCEPTION`, error);
});
createCli(process.argv);