"use strict";

exports.__esModule = true;
exports.connectionDefinitions = connectionDefinitions;
exports.connectionArgs = void 0;

var _graphql = require("graphql");

/**
 * Returns a GraphQLFieldConfigArgumentMap appropriate to include on a field
 * whose return type is a connection type with backward pagination.
 */
const connectionArgs = {
  skip: {
    type: _graphql.GraphQLInt
  },
  limit: {
    type: _graphql.GraphQLInt
  }
};
exports.connectionArgs = connectionArgs;

/**
 * The common page info type used by all connections.
 */
const pageInfoType = new _graphql.GraphQLObjectType({
  name: `PageInfo`,
  description: `Information about pagination in a connection.`,
  fields: () => {
    return {
      hasNextPage: {
        type: new _graphql.GraphQLNonNull(_graphql.GraphQLBoolean),
        description: `When paginating, are there more items?`
      }
    };
  }
});

function resolveMaybeThunk(thingOrThunk) {
  return typeof thingOrThunk === `function` ? thingOrThunk() : thingOrThunk;
}
/**
 * Returns a GraphQLObjectType for a connection with the given name,
 * and whose nodes are of the specified type.
 */


function connectionDefinitions(config) {
  const nodeType = config.nodeType;
  const name = config.name || nodeType.name;
  const edgeFields = config.edgeFields || {};
  const connectionFields = config.connectionFields || {};
  const resolveNode = config.resolveNode;
  const edgeType = new _graphql.GraphQLObjectType({
    name: `${name}Edge`,
    description: `An edge in a connection.`,
    fields: () => {
      return Object.assign({
        node: {
          type: nodeType,
          resolve: resolveNode,
          description: `The item at the end of the edge`
        },
        next: {
          type: nodeType,
          resolve: resolveNode,
          description: `The next edge in the connection`
        },
        previous: {
          type: nodeType,
          resolve: resolveNode,
          description: `The previous edge in the connection`
        }
      }, resolveMaybeThunk(edgeFields));
    }
  });
  const connectionType = new _graphql.GraphQLObjectType({
    name: `${name}Connection`,
    description: `A connection to a list of items.`,
    fields: () => {
      return Object.assign({
        pageInfo: {
          type: new _graphql.GraphQLNonNull(pageInfoType),
          description: `Information to aid in pagination.`
        },
        edges: {
          type: new _graphql.GraphQLList(edgeType),
          description: `A list of edges.`
        }
      }, resolveMaybeThunk(connectionFields));
    }
  });
  return {
    edgeType,
    connectionType
  };
}