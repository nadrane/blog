{"version":3,"sources":["../../../src/bootstrap/load-plugins/load.js"],"names":["_","require","slash","fs","path","crypto","glob","store","existsSync","sync","createFileContentHash","root","globPattern","hash","createHash","files","nodir","forEach","filepath","update","readFileSync","digest","resolvePlugin","pluginName","resolvedPath","resolve","packageJSON","JSON","parse","name","id","version","Error","dirname","err","module","exports","config","plugins","processPlugin","plugin","isString","info","pluginOptions","subplugins","options","p","push","merge","internalPlugins","relPath","absPath","join","__dirname","process","cwd","program","getState","directory","pathCheck"],"mappings":";;AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAE,OAAF,CAArB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAE,IAAF,CAAlB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAE,MAAF,CAApB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAE,QAAF,CAAtB;;AACA,MAAMK,IAAI,GAAGL,OAAO,CAAE,MAAF,CAApB;;iBACkBA,OAAO,CAAE,aAAF,C;MAAjBM,K,YAAAA,K;;AACR,MAAMC,UAAU,GAAGP,OAAO,CAAE,kBAAF,CAAP,CAA4BQ,IAA/C;;AAEA,SAASC,qBAAT,CAA+BC,IAA/B,EAAqCC,WAArC,EAAkD;AAChD,QAAMC,IAAI,GAAGR,MAAM,CAACS,UAAP,CAAmB,KAAnB,CAAb;AACA,QAAMC,KAAK,GAAGT,IAAI,CAACG,IAAL,CAAW,GAAEE,IAAK,IAAGC,WAAY,EAAjC,EAAoC;AAAEI,IAAAA,KAAK,EAAE;AAAT,GAApC,CAAd;AAEAD,EAAAA,KAAK,CAACE,OAAN,CAAcC,QAAQ,IAAI;AACxBL,IAAAA,IAAI,CAACM,MAAL,CAAYhB,EAAE,CAACiB,YAAH,CAAgBF,QAAhB,CAAZ;AACD,GAFD;AAIA,SAAOL,IAAI,CAACQ,MAAL,CAAa,KAAb,CAAP;AACD;AAED;;;;;;;AAOA;;;;;;;;;;AAQA,SAASC,aAAT,CAAuBC,UAAvB,EAAmC;AACjC;AACA,MAAI,CAACf,UAAU,CAACe,UAAD,CAAf,EAA6B;AAC3B;AACA,UAAMC,YAAY,GAAGtB,KAAK,CAACE,IAAI,CAACqB,OAAL,CAAc,aAAYF,UAAW,EAArC,CAAD,CAA1B;;AAEA,QAAIf,UAAU,CAACgB,YAAD,CAAd,EAA8B;AAC5B,UAAIhB,UAAU,CAAE,GAAEgB,YAAa,eAAjB,CAAd,EAAgD;AAC9C,cAAME,WAAW,GAAGC,IAAI,CAACC,KAAL,CAClBzB,EAAE,CAACiB,YAAH,CAAiB,GAAEI,YAAa,eAAhC,EAAiD,OAAjD,CADkB,CAApB;AAIA,eAAO;AACLC,UAAAA,OAAO,EAAED,YADJ;AAELK,UAAAA,IAAI,EAAEH,WAAW,CAACG,IAAZ,IAAoBN,UAFrB;AAGLO,UAAAA,EAAE,EAAG,UAASJ,WAAW,CAACG,IAAZ,IAAoBN,UAAW,EAHxC;AAILQ,UAAAA,OAAO,EACLL,WAAW,CAACK,OAAZ,IAAuBrB,qBAAqB,CAACc,YAAD,EAAgB,IAAhB;AALzC,SAAP;AAOD,OAZD,MAYO;AACL;AACA,cAAM,IAAIQ,KAAJ,CAAW,UAAST,UAAW,+BAA/B,CAAN;AACD;AACF;AACF;AAED;;;;;;AAIA,MAAI;AACF,UAAMC,YAAY,GAAGtB,KAAK,CAACE,IAAI,CAAC6B,OAAL,CAAahC,OAAO,CAACwB,OAAR,CAAgBF,UAAhB,CAAb,CAAD,CAA1B;AAEA,UAAMG,WAAW,GAAGC,IAAI,CAACC,KAAL,CAClBzB,EAAE,CAACiB,YAAH,CAAiB,GAAEI,YAAa,eAAhC,EAAiD,OAAjD,CADkB,CAApB;AAIA,WAAO;AACLC,MAAAA,OAAO,EAAED,YADJ;AAELM,MAAAA,EAAE,EAAG,UAASJ,WAAW,CAACG,IAAK,EAF1B;AAGLA,MAAAA,IAAI,EAAEH,WAAW,CAACG,IAHb;AAILE,MAAAA,OAAO,EAAEL,WAAW,CAACK;AAJhB,KAAP;AAMD,GAbD,CAaE,OAAOG,GAAP,EAAY;AACZ,UAAM,IAAIF,KAAJ,CACH,0BAAyBT,UAAW,6CADjC,CAAN;AAGD;AACF;;AAEDY,MAAM,CAACC,OAAP,GAAiB,CAACC,MAAM,GAAG,EAAV,KAAiB;AAChC;AACA,QAAMC,OAAO,GAAG,EAAhB,CAFgC,CAIhC;AACA;AACA;;AACA,QAAMC,aAAa,GAAGC,MAAM,IAAI;AAC9B,QAAIxC,CAAC,CAACyC,QAAF,CAAWD,MAAX,CAAJ,EAAwB;AACtB,YAAME,IAAI,GAAGpB,aAAa,CAACkB,MAAD,CAA1B;AAEA,+BACKE,IADL;AAEEC,QAAAA,aAAa,EAAE;AACbL,UAAAA,OAAO,EAAE;AADI;AAFjB;AAMD,KATD,MASO;AACL;AACA,YAAMM,UAAU,GAAG,EAAnB;;AACA,UAAIJ,MAAM,CAACK,OAAP,IAAkBL,MAAM,CAACK,OAAP,CAAeP,OAArC,EAA8C;AAC5CE,QAAAA,MAAM,CAACK,OAAP,CAAeP,OAAf,CAAuBrB,OAAvB,CAA+B6B,CAAC,IAAI;AAClCF,UAAAA,UAAU,CAACG,IAAX,CAAgBR,aAAa,CAACO,CAAD,CAA7B;AACD,SAFD;AAIAN,QAAAA,MAAM,CAACK,OAAP,CAAeP,OAAf,GAAyBM,UAAzB;AACD,OATI,CAWL;AACA;;;AACA,UAAIJ,MAAM,CAACf,OAAP,KAAoB,YAAxB,EAAqC;AACnC,eAAO;AACLI,UAAAA,IAAI,EAAG,MADF;AAELc,UAAAA,aAAa,EAAE;AACbL,YAAAA,OAAO,EAAE;AADI;AAFV,SAAP;AAMD;;AAED,YAAMI,IAAI,GAAGpB,aAAa,CAACkB,MAAM,CAACf,OAAR,CAA1B;AAEA,+BACKiB,IADL;AAEEC,QAAAA,aAAa,EAAE3C,CAAC,CAACgD,KAAF,CAAQ;AAAEV,UAAAA,OAAO,EAAE;AAAX,SAAR,EAAyBE,MAAM,CAACK,OAAhC;AAFjB;AAID;AACF,GAvCD,CAPgC,CAgDhC;;;AACA,QAAMI,eAAe,GAAG,CACrB,qCADqB,EAErB,0CAFqB,EAGrB,6CAHqB,EAIrB,iCAJqB,EAKrB,qCALqB,CAAxB;AAOAA,EAAAA,eAAe,CAAChC,OAAhB,CAAwBiC,OAAO,IAAI;AACjC,UAAMC,OAAO,GAAG/C,IAAI,CAACgD,IAAL,CAAUC,SAAV,EAAqBH,OAArB,CAAhB;AACAZ,IAAAA,OAAO,CAACS,IAAR,CAAaR,aAAa,CAACY,OAAD,CAA1B;AACD,GAHD,EAxDgC,CA6DhC;;AACA,MAAId,MAAM,CAACC,OAAX,EAAoB;AAClBD,IAAAA,MAAM,CAACC,OAAP,CAAerB,OAAf,CAAuBuB,MAAM,IAAI;AAC/BF,MAAAA,OAAO,CAACS,IAAR,CAAaR,aAAa,CAACC,MAAD,CAA1B;AACD,KAFD;AAGD,GAlE+B,CAoEhC;;;AACAF,EAAAA,OAAO,CAACS,IAAR,CAAa;AACXtB,IAAAA,OAAO,EAAEvB,KAAK,CAACoD,OAAO,CAACC,GAAR,EAAD,CADH;AAEXzB,IAAAA,EAAE,EAAG,4BAFM;AAGXD,IAAAA,IAAI,EAAG,qBAHI;AAIXE,IAAAA,OAAO,EAAErB,qBAAqB,CAAC4C,OAAO,CAACC,GAAR,EAAD,EAAiB,UAAjB,CAJnB;AAKXZ,IAAAA,aAAa,EAAE;AACbL,MAAAA,OAAO,EAAE;AADI;AALJ,GAAb;AAUA,QAAMkB,OAAO,GAAGjD,KAAK,CAACkD,QAAN,GAAiBD,OAAjC;AACAlB,EAAAA,OAAO,CAACS,IAAR,CACER,aAAa,CAAC;AACZd,IAAAA,OAAO,EAAG,4BADE;AAEZoB,IAAAA,OAAO,EAAE;AACPzC,MAAAA,IAAI,EAAEF,KAAK,CAACE,IAAI,CAACgD,IAAL,CAAUI,OAAO,CAACE,SAAlB,EAA8B,WAA9B,CAAD,CADJ;AAEPC,MAAAA,SAAS,EAAE;AAFJ;AAFG,GAAD,CADf;AAUA,SAAOrB,OAAP;AACD,CA3FD","sourcesContent":["const _ = require(`lodash`)\nconst slash = require(`slash`)\nconst fs = require(`fs`)\nconst path = require(`path`)\nconst crypto = require(`crypto`)\nconst glob = require(`glob`)\nconst { store } = require(`../../redux`)\nconst existsSync = require(`fs-exists-cached`).sync\n\nfunction createFileContentHash(root, globPattern) {\n  const hash = crypto.createHash(`md5`)\n  const files = glob.sync(`${root}/${globPattern}`, { nodir: true })\n\n  files.forEach(filepath => {\n    hash.update(fs.readFileSync(filepath))\n  })\n\n  return hash.digest(`hex`)\n}\n\n/**\n * @typedef {Object} PluginInfo\n * @property {string} resolve The absolute path to the plugin\n * @property {string} name The plugin name\n * @property {string} version The plugin version (can be content hash)\n */\n\n/**\n * resolvePlugin\n * @param {string} pluginName\n * This can be a name of a local plugin, the name of a plugin located in\n * node_modules, or a Gatsby internal plugin. In the last case the pluginName\n * will be an absolute path.\n * @return {PluginInfo}\n */\nfunction resolvePlugin(pluginName) {\n  // Only find plugins when we're not given an absolute path\n  if (!existsSync(pluginName)) {\n    // Find the plugin in the local plugins folder\n    const resolvedPath = slash(path.resolve(`./plugins/${pluginName}`))\n\n    if (existsSync(resolvedPath)) {\n      if (existsSync(`${resolvedPath}/package.json`)) {\n        const packageJSON = JSON.parse(\n          fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n        )\n\n        return {\n          resolve: resolvedPath,\n          name: packageJSON.name || pluginName,\n          id: `Plugin ${packageJSON.name || pluginName}`,\n          version:\n            packageJSON.version || createFileContentHash(resolvedPath, `**`),\n        }\n      } else {\n        // Make package.json a requirement for local plugins too\n        throw new Error(`Plugin ${pluginName} requires a package.json file`)\n      }\n    }\n  }\n\n  /**\n   * Here we have an absolute path to an internal plugin, or a name of a module\n   * which should be located in node_modules.\n   */\n  try {\n    const resolvedPath = slash(path.dirname(require.resolve(pluginName)))\n\n    const packageJSON = JSON.parse(\n      fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n    )\n\n    return {\n      resolve: resolvedPath,\n      id: `Plugin ${packageJSON.name}`,\n      name: packageJSON.name,\n      version: packageJSON.version,\n    }\n  } catch (err) {\n    throw new Error(\n      `Unable to find plugin \"${pluginName}\". Perhaps you need to install its package?`\n    )\n  }\n}\n\nmodule.exports = (config = {}) => {\n  // Instantiate plugins.\n  const plugins = []\n\n  // Create fake little site with a plugin for testing this\n  // w/ snapshots. Move plugin processing to its own module.\n  // Also test adding to redux store.\n  const processPlugin = plugin => {\n    if (_.isString(plugin)) {\n      const info = resolvePlugin(plugin)\n\n      return {\n        ...info,\n        pluginOptions: {\n          plugins: [],\n        },\n      }\n    } else {\n      // Plugins can have plugins.\n      const subplugins = []\n      if (plugin.options && plugin.options.plugins) {\n        plugin.options.plugins.forEach(p => {\n          subplugins.push(processPlugin(p))\n        })\n\n        plugin.options.plugins = subplugins\n      }\n\n      // Add some default values for tests as we don't actually\n      // want to try to load anything during tests.\n      if (plugin.resolve === `___TEST___`) {\n        return {\n          name: `TEST`,\n          pluginOptions: {\n            plugins: [],\n          },\n        }\n      }\n\n      const info = resolvePlugin(plugin.resolve)\n\n      return {\n        ...info,\n        pluginOptions: _.merge({ plugins: [] }, plugin.options),\n      }\n    }\n  }\n\n  // Add internal plugins\n  const internalPlugins = [\n    `../../internal-plugins/dev-404-page`,\n    `../../internal-plugins/load-babel-config`,\n    `../../internal-plugins/internal-data-bridge`,\n    `../../internal-plugins/prod-404`,\n    `../../internal-plugins/query-runner`,\n  ]\n  internalPlugins.forEach(relPath => {\n    const absPath = path.join(__dirname, relPath)\n    plugins.push(processPlugin(absPath))\n  })\n\n  // Add plugins from the site config.\n  if (config.plugins) {\n    config.plugins.forEach(plugin => {\n      plugins.push(processPlugin(plugin))\n    })\n  }\n\n  // Add the site's default \"plugin\" i.e. gatsby-x files in root of site.\n  plugins.push({\n    resolve: slash(process.cwd()),\n    id: `Plugin default-site-plugin`,\n    name: `default-site-plugin`,\n    version: createFileContentHash(process.cwd(), `gatsby-*`),\n    pluginOptions: {\n      plugins: [],\n    },\n  })\n\n  const program = store.getState().program\n  plugins.push(\n    processPlugin({\n      resolve: `gatsby-plugin-page-creator`,\n      options: {\n        path: slash(path.join(program.directory, `src/pages`)),\n        pathCheck: false,\n      },\n    })\n  )\n\n  return plugins\n}\n"],"file":"load.js"}