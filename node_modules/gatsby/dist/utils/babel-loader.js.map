{"version":3,"sources":["../../src/utils/babel-loader.js"],"names":["babelLoader","require","prepareOptions","getCustomOptions","mergeConfigItemOptions","module","exports","custom","babel","toReturn","customOptions","options","loader","cacheDirectory","sourceType","config","partialConfig","reduxPresets","reduxPlugins","requiredPresets","requiredPlugins","fallbackPresets","hasFilesystemConfig","plugins","presets","forEach","preset","items","itemToMerge","type","plugin"],"mappings":";;AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAE,cAAF,CAA3B;;iBAMIA,OAAO,CAAE,wBAAF,C;MAHTC,c,YAAAA,c;MACAC,gB,YAAAA,gB;MACAC,sB,YAAAA,sB;AAGF;;;;;;;;;;;;;;;;;AAeAC,MAAM,CAACC,OAAP,GAAiBN,WAAW,CAACO,MAAZ,CAAmBC,KAAK,IAAI;AAC3C,QAAMC,QAAQ,GAAG;AACf;AACAC,IAAAA,aAAa,CAACC,OAAD,EAAU;AACrB,aAAO;AACLC,QAAAA,MAAM;AACJC,UAAAA,cAAc,EAAE,IADZ;AAEJC,UAAAA,UAAU,EAAG;AAFT,WAGDX,gBAAgB,EAHf,EAIDQ,OAJC;AADD,OAAP;AAQD,KAXc;;AAaf;AACAI,IAAAA,MAAM,CAACC,aAAD,EAAgB;AAAA,UACdL,OADc,GACFK,aADE,CACdL,OADc;;AAAA,8BAQhBT,cAAc,CAACM,KAAD,CARE;AAAA,YAGlBS,YAHkB;AAAA,YAIlBC,YAJkB;AAAA,YAKlBC,eALkB;AAAA,YAMlBC,eANkB;AAAA,YAOlBC,eAPkB,uBAUpB;AACA;;;AACA,UAAI,CAACL,aAAa,CAACM,mBAAd,EAAL,EAA0C;AACxCX,QAAAA,OAAO,qBACFA,OADE;AAELY,UAAAA,OAAO,EAAEH,eAFJ;AAGLI,UAAAA,OAAO,EAAE,CAAC,GAAGH,eAAJ,EAAqB,GAAGF,eAAxB;AAHJ,UAAP;AAKD,OAND,MAMO;AACL;AACAR,QAAAA,OAAO,qBACFA,OADE;AAELY,UAAAA,OAAO,EAAE,CAAC,GAAGZ,OAAO,CAACY,OAAZ,EAAqB,GAAGH,eAAxB,CAFJ;AAGLI,UAAAA,OAAO,EAAE,CAAC,GAAGb,OAAO,CAACa,OAAZ,EAAqB,GAAGL,eAAxB;AAHJ,UAAP;AAKD,OAzBmB,CA2BpB;;;AACAF,MAAAA,YAAY,CAACQ,OAAb,CAAqBC,MAAM,IAAI;AAC7Bf,QAAAA,OAAO,CAACa,OAAR,GAAkBpB,sBAAsB,CAAC;AACvCuB,UAAAA,KAAK,EAAEhB,OAAO,CAACa,OADwB;AAEvCI,UAAAA,WAAW,EAAEF,MAF0B;AAGvCG,UAAAA,IAAI,EAAG,QAHgC;AAIvCrB,UAAAA;AAJuC,SAAD,CAAxC;AAMD,OAPD;AASAU,MAAAA,YAAY,CAACO,OAAb,CAAqBK,MAAM,IAAI;AAC7BnB,QAAAA,OAAO,CAACY,OAAR,GAAkBnB,sBAAsB,CAAC;AACvCuB,UAAAA,KAAK,EAAEhB,OAAO,CAACY,OADwB;AAEvCK,UAAAA,WAAW,EAAEE,MAF0B;AAGvCD,UAAAA,IAAI,EAAG,QAHgC;AAIvCrB,UAAAA;AAJuC,SAAD,CAAxC;AAMD,OAPD;AASA,aAAOG,OAAP;AACD;;AA7Dc,GAAjB;AAgEA,SAAOF,QAAP;AACD,CAlEgB,CAAjB","sourcesContent":["const babelLoader = require(`babel-loader`)\n\nconst {\n  prepareOptions,\n  getCustomOptions,\n  mergeConfigItemOptions,\n} = require(`./babel-loader-helpers`)\n\n/**\n * Gatsby's custom loader for webpack & babel\n *\n * Gatsby allows sites to either use our Babel setup (the default)\n * or to add a .babelrc to take control.\n *\n * Our default setup is defined in the fallbackPlugins/fallbackPresets arrays\n * below.\n *\n * After using either the fallback or user supplied setup, we add on a handful\n * of required plugins and finally merge in any presets/plugins supplied\n * by Gatsby plugins.\n *\n * You can find documentation for the custom loader here: https://babeljs.io/docs/en/next/babel-core.html#loadpartialconfig\n */\nmodule.exports = babelLoader.custom(babel => {\n  const toReturn = {\n    // Passed the loader options.\n    customOptions(options) {\n      return {\n        loader: {\n          cacheDirectory: true,\n          sourceType: `unambiguous`,\n          ...getCustomOptions(),\n          ...options,\n        },\n      }\n    },\n\n    // Passed Babel's 'PartialConfig' object.\n    config(partialConfig) {\n      let { options } = partialConfig\n      const [\n        reduxPresets,\n        reduxPlugins,\n        requiredPresets,\n        requiredPlugins,\n        fallbackPresets,\n      ] = prepareOptions(babel)\n\n      // If there is no filesystem babel config present, add our fallback\n      // presets/plugins.\n      if (!partialConfig.hasFilesystemConfig()) {\n        options = {\n          ...options,\n          plugins: requiredPlugins,\n          presets: [...fallbackPresets, ...requiredPresets],\n        }\n      } else {\n        // With a babelrc present, only add our required plugins/presets\n        options = {\n          ...options,\n          plugins: [...options.plugins, ...requiredPlugins],\n          presets: [...options.presets, ...requiredPresets],\n        }\n      }\n\n      // Merge in presets/plugins added from gatsby plugins.\n      reduxPresets.forEach(preset => {\n        options.presets = mergeConfigItemOptions({\n          items: options.presets,\n          itemToMerge: preset,\n          type: `preset`,\n          babel,\n        })\n      })\n\n      reduxPlugins.forEach(plugin => {\n        options.plugins = mergeConfigItemOptions({\n          items: options.plugins,\n          itemToMerge: plugin,\n          type: `plugin`,\n          babel,\n        })\n      })\n\n      return options\n    },\n  }\n\n  return toReturn\n})\n"],"file":"babel-loader.js"}