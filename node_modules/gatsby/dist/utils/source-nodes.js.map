{"version":3,"sources":["../../src/utils/source-nodes.js"],"names":["_","require","report","apiRunner","store","getNode","getNodes","boundActionCreators","deleteNode","discoverPluginsWithoutNodes","storeState","nodeCreationPlugins","without","union","apiToPlugins","sourceNodes","nodeOwners","uniq","Array","from","reduce","acc","node","push","internal","owner","difference","module","exports","parentSpan","traceId","waitForCascadingActions","state","getState","pluginsWithNoNodes","map","name","warn","touchedNodes","Object","keys","nodesTouched","staleNodes","filter","rootNode","whileCount","parent","undefined","console","log","includes","id","length","forEach"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nconst apiRunner = require(`./api-runner-node`)\nconst { store } = require(`../redux`)\nconst { getNode, getNodes } = require(`../db/nodes`)\nconst { boundActionCreators } = require(`../redux/actions`)\nconst { deleteNode } = boundActionCreators\n\n/**\n * Finds the name of all plugins which implement Gatsby APIs that\n * may create nodes, but which have not actually created any nodes.\n */\nfunction discoverPluginsWithoutNodes(storeState) {\n  // Discover which plugins implement APIs which may create nodes\n  const nodeCreationPlugins = _.without(\n    _.union(storeState.apiToPlugins.sourceNodes),\n    `default-site-plugin`\n  )\n  // Find out which plugins own already created nodes\n  const nodeOwners = _.uniq(\n    Array.from(getNodes()).reduce((acc, node) => {\n      acc.push(node.internal.owner)\n      return acc\n    }, [])\n  )\n  return _.difference(nodeCreationPlugins, nodeOwners)\n}\n\nmodule.exports = async ({ parentSpan } = {}) => {\n  await apiRunner(`sourceNodes`, {\n    traceId: `initial-sourceNodes`,\n    waitForCascadingActions: true,\n    parentSpan: parentSpan,\n  })\n\n  const state = store.getState()\n\n  // Warn about plugins that should have created nodes but didn't.\n  const pluginsWithNoNodes = discoverPluginsWithoutNodes(state)\n  pluginsWithNoNodes.map(name =>\n    report.warn(\n      `The ${name} plugin has generated no Gatsby nodes. Do you need it?`\n    )\n  )\n\n  // Garbage collect stale data nodes\n  const touchedNodes = Object.keys(state.nodesTouched)\n  const staleNodes = Array.from(getNodes()).filter(node => {\n    // Find the root node.\n    let rootNode = node\n    let whileCount = 0\n    while (\n      rootNode.parent &&\n      getNode(rootNode.parent) !== undefined &&\n      whileCount < 101\n    ) {\n      rootNode = getNode(rootNode.parent)\n      whileCount += 1\n      if (whileCount > 100) {\n        console.log(\n          `It looks like you have a node that's set its parent as itself`,\n          rootNode\n        )\n      }\n    }\n\n    return !_.includes(touchedNodes, rootNode.id)\n  })\n\n  if (staleNodes.length > 0) {\n    staleNodes.forEach(node => deleteNode({ node }))\n  }\n}\n"],"file":"source-nodes.js"}