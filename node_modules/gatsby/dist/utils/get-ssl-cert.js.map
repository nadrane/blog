{"version":3,"sources":["../../src/utils/get-ssl-cert.js"],"names":["getDevelopmentCertificate","require","default","report","fs","path","module","exports","name","certFile","keyFile","directory","panic","keyPath","join","certPath","key","readFileSync","cert","info","installCertutil","err"],"mappings":";;;;;;AAAA,MAAMA,yBAAyB,GAAGC,OAAO,CAAE,aAAF,CAAP,CAAuBC,OAAzD;;AACA,MAAMC,MAAM,GAAGF,OAAO,CAAE,yBAAF,CAAtB;;AACA,MAAMG,EAAE,GAAGH,OAAO,CAAE,IAAF,CAAlB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAE,MAAF,CAApB;;AAEAK,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA,6CAAiB,WAAO;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,OAAlB;AAA2BC,IAAAA;AAA3B,GAAP,EAAkD;AACjE;AACA;AACA,QAAIF,QAAQ,GAAG,CAACC,OAAJ,GAAcA,OAA1B,EAAmC;AACjCP,MAAAA,MAAM,CAACS,KAAP,CACG,2EADH;AAGD;;AAED,QAAIH,QAAQ,IAAIC,OAAhB,EAAyB;AACvB,YAAMG,OAAO,GAAGR,IAAI,CAACS,IAAL,CAAUH,SAAV,EAAqBD,OAArB,CAAhB;AACA,YAAMK,QAAQ,GAAGV,IAAI,CAACS,IAAL,CAAUH,SAAV,EAAqBF,QAArB,CAAjB;AAEA,mBAAa;AACXI,QAAAA,OADW;AAEXE,QAAAA,QAFW;AAGXC,QAAAA,GAAG,EAAEZ,EAAE,CAACa,YAAH,CAAgBJ,OAAhB,CAHM;AAIXK,QAAAA,IAAI,EAAEd,EAAE,CAACa,YAAH,CAAgBF,QAAhB;AAJK,OAAb;AAMD;;AAEDZ,IAAAA,MAAM,CAACgB,IAAP,CAAa,2DAAb;;AACA,QAAI;AACF,mBAAanB,yBAAyB,CAACQ,IAAD,EAAO;AAC3CY,QAAAA,eAAe,EAAE;AAD0B,OAAP,CAAtC;AAGD,KAJD,CAIE,OAAOC,GAAP,EAAY;AACZlB,MAAAA,MAAM,CAACS,KAAP,CAAc,0CAAd,EAAyDS,GAAzD;AACD;;AAED,WAAO,KAAP;AACD,GA/BD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const getDevelopmentCertificate = require(`devcert-san`).default\nconst report = require(`gatsby-cli/lib/reporter`)\nconst fs = require(`fs`)\nconst path = require(`path`)\n\nmodule.exports = async ({ name, certFile, keyFile, directory }) => {\n  // check that cert file and key file are both true or both false, if they are both\n  // false, it defaults to the automatic ssl\n  if (certFile ? !keyFile : keyFile) {\n    report.panic(\n      `for custom ssl --https, --cert-file, and --key-file must be used together`\n    )\n  }\n\n  if (certFile && keyFile) {\n    const keyPath = path.join(directory, keyFile)\n    const certPath = path.join(directory, certFile)\n\n    return await {\n      keyPath,\n      certPath,\n      key: fs.readFileSync(keyPath),\n      cert: fs.readFileSync(certPath),\n    }\n  }\n\n  report.info(`setting up automatic SSL certificate (may require sudo)\\n`)\n  try {\n    return await getDevelopmentCertificate(name, {\n      installCertutil: true,\n    })\n  } catch (err) {\n    report.panic(`\\nFailed to generate dev SSL certificate`, err)\n  }\n\n  return false\n}\n"],"file":"get-ssl-cert.js"}