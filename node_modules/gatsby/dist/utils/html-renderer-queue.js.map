{"version":3,"sources":["../../src/utils/html-renderer-queue.js"],"names":["Promise","require","convertHrtime","Worker","default","numWorkers","chunk","workerPool","resolve","forkOptions","silent","module","exports","htmlComponentRendererPath","pages","activity","reject","envVars","Object","entries","NODE_ENV","process","env","gatsby_executing_command","gatsby_log_level","start","hrtime","segments","finished","map","pageSegment","renderHTML","paths","then","length","setStatus","seconds","toFixed","catch"],"mappings":";;AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAE,UAAF,CAAvB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAE,gBAAF,CAA7B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAE,aAAF,CAAP,CAAuBG,OAAtC;;AACA,MAAMC,UAAU,GAAGJ,OAAO,CAAE,oBAAF,CAAP,IAAiC,CAApD;;iBACkBA,OAAO,CAAE,QAAF,C;MAAjBK,K,YAAAA,K;;AAER,MAAMC,UAAU,GAAG,IAAIJ,MAAJ,CAAWF,OAAO,CAACO,OAAR,CAAiB,UAAjB,CAAX,EAAwC;AACzDH,EAAAA,UADyD;AAEzDI,EAAAA,WAAW,EAAE;AACXC,IAAAA,MAAM,EAAE;AADG;AAF4C,CAAxC,CAAnB;;AAOAC,MAAM,CAACC,OAAP,GAAiB,CAACC,yBAAD,EAA4BC,KAA5B,EAAmCC,QAAnC,KACf,IAAIf,OAAJ,CAAY,CAACQ,OAAD,EAAUQ,MAAV,KAAqB;AAC/B;AACA;AACA,QAAMC,OAAO,GAAGC,MAAM,CAACC,OAAP,CAAe;AAC7BC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYF,QADO;AAE7BG,IAAAA,wBAAwB,EAAEF,OAAO,CAACC,GAAR,CAAYC,wBAFT;AAG7BC,IAAAA,gBAAgB,EAAEH,OAAO,CAACC,GAAR,CAAYE;AAHD,GAAf,CAAhB;AAMA,QAAMC,KAAK,GAAGJ,OAAO,CAACK,MAAR,EAAd;AACA,QAAMC,QAAQ,GAAGrB,KAAK,CAACQ,KAAD,EAAQ,EAAR,CAAtB;AACA,MAAIc,QAAQ,GAAG,CAAf;AAEA5B,EAAAA,OAAO,CAAC6B,GAAR,CACEF,QADF,EAEEG,WAAW,IACT,IAAI9B,OAAJ,CAAY,CAACQ,OAAD,EAAUQ,MAAV,KAAqB;AAC/BT,IAAAA,UAAU,CACPwB,UADH,CACc;AACVlB,MAAAA,yBADU;AAEVmB,MAAAA,KAAK,EAAEF,WAFG;AAGVb,MAAAA;AAHU,KADd,EAMGgB,IANH,CAMQ,MAAM;AACVL,MAAAA,QAAQ,IAAIE,WAAW,CAACI,MAAxB;;AACA,UAAInB,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACoB,SAAT,CACG,GAAEP,QAAS,IAAGd,KAAK,CAACoB,MAAO,IAAG,CAC7BN,QAAQ,GAAG1B,aAAa,CAACmB,OAAO,CAACK,MAAR,CAAeD,KAAf,CAAD,CAAb,CAAqCW,OADnB,EAE7BC,OAF6B,CAErB,CAFqB,CAElB,eAHf;AAKD;;AACD7B,MAAAA,OAAO;AACR,KAhBH,EAiBG8B,KAjBH,CAiBStB,MAjBT;AAkBD,GAnBD,CAHJ,EAwBGiB,IAxBH,CAwBQzB,OAxBR,EAyBG8B,KAzBH,CAyBStB,MAzBT;AA0BD,CAvCD,CADF","sourcesContent":["const Promise = require(`bluebird`)\nconst convertHrtime = require(`convert-hrtime`)\nconst Worker = require(`jest-worker`).default\nconst numWorkers = require(`physical-cpu-count`) || 1\nconst { chunk } = require(`lodash`)\n\nconst workerPool = new Worker(require.resolve(`./worker`), {\n  numWorkers,\n  forkOptions: {\n    silent: false,\n  },\n})\n\nmodule.exports = (htmlComponentRendererPath, pages, activity) =>\n  new Promise((resolve, reject) => {\n    // We need to only pass env vars that are set programatically in gatsby-cli\n    // to child process. Other vars will be picked up from environment.\n    const envVars = Object.entries({\n      NODE_ENV: process.env.NODE_ENV,\n      gatsby_executing_command: process.env.gatsby_executing_command,\n      gatsby_log_level: process.env.gatsby_log_level,\n    })\n\n    const start = process.hrtime()\n    const segments = chunk(pages, 50)\n    let finished = 0\n\n    Promise.map(\n      segments,\n      pageSegment =>\n        new Promise((resolve, reject) => {\n          workerPool\n            .renderHTML({\n              htmlComponentRendererPath,\n              paths: pageSegment,\n              envVars,\n            })\n            .then(() => {\n              finished += pageSegment.length\n              if (activity) {\n                activity.setStatus(\n                  `${finished}/${pages.length} ${(\n                    finished / convertHrtime(process.hrtime(start)).seconds\n                  ).toFixed(2)} pages/second`\n                )\n              }\n              resolve()\n            })\n            .catch(reject)\n        })\n    )\n      .then(resolve)\n      .catch(reject)\n  })\n"],"file":"html-renderer-queue.js"}