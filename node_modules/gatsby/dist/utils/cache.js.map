{"version":3,"sources":["../../src/utils/cache.js"],"names":["fs","require","manager","fsStore","path","MAX_CACHE_SIZE","TTL","Number","MAX_SAFE_INTEGER","Cache","constructor","name","store","directory","join","process","cwd","init","ensureDirSync","caches","max","options","ttl","map","cache","caching","multiCaching","get","key","Promise","resolve","_","res","set","value","args","module","exports"],"mappings":";;AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAE,UAAF,CAAlB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAE,eAAF,CAAvB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAE,uBAAF,CAAvB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAE,MAAF,CAApB;;AAEA,MAAMI,cAAc,GAAG,GAAvB;AACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,gBAAnB;;AAEA,MAAMC,KAAN,CAAY;AACVC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,IAAI,GAAI,IAAV;AAAeC,IAAAA,KAAK,GAAGT;AAAvB,MAAmC,EAApC,EAAwC;AACjD,SAAKQ,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACD;;AAED,MAAIC,SAAJ,GAAgB;AACd,WAAOT,IAAI,CAACU,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAA0B,iBAAgB,KAAKL,IAAK,EAApD,CAAP;AACD;;AAEDM,EAAAA,IAAI,GAAG;AACLjB,IAAAA,EAAE,CAACkB,aAAH,CAAiB,KAAKL,SAAtB;AAEA,UAAMM,MAAM,GAAG,CACb;AACEP,MAAAA,KAAK,EAAG,QADV;AAEEQ,MAAAA,GAAG,EAAEf;AAFP,KADa,EAKb;AACEO,MAAAA,KAAK,EAAE,KAAKA,KADd;AAEES,MAAAA,OAAO,EAAE;AACPjB,QAAAA,IAAI,EAAE,KAAKS,SADJ;AAEPS,QAAAA,GAAG,EAAEhB;AAFE;AAFX,KALa,EAYbiB,GAZa,CAYTC,KAAK,IAAItB,OAAO,CAACuB,OAAR,CAAgBD,KAAhB,CAZA,CAAf;AAcA,SAAKA,KAAL,GAAatB,OAAO,CAACwB,YAAR,CAAqBP,MAArB,CAAb;AAEA,WAAO,IAAP;AACD;;AAEDQ,EAAAA,GAAG,CAACC,GAAD,EAAM;AACP,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5B,WAAKN,KAAL,CAAWG,GAAX,CAAeC,GAAf,EAAoB,CAACG,CAAD,EAAIC,GAAJ,KAAYF,OAAO,CAACE,GAAD,CAAvC;AACD,KAFM,CAAP;AAGD;;AAEDC,EAAAA,GAAG,CAACL,GAAD,EAAMM,KAAN,EAAaC,IAAI,GAAG,EAApB,EAAwB;AACzB,WAAO,IAAIN,OAAJ,CAAYC,OAAO,IAAI;AAC5B,WAAKN,KAAL,CAAWS,GAAX,CAAeL,GAAf,EAAoBM,KAApB,EAA2BC,IAA3B,EAAiC,CAACJ,CAAD,EAAIC,GAAJ,KAAYF,OAAO,CAACE,GAAD,CAApD;AACD,KAFM,CAAP;AAGD;;AA1CS;;AA6CZI,MAAM,CAACC,OAAP,GAAiB5B,KAAjB","sourcesContent":["const fs = require(`fs-extra`)\nconst manager = require(`cache-manager`)\nconst fsStore = require(`cache-manager-fs-hash`)\nconst path = require(`path`)\n\nconst MAX_CACHE_SIZE = 250\nconst TTL = Number.MAX_SAFE_INTEGER\n\nclass Cache {\n  constructor({ name = `db`, store = fsStore } = {}) {\n    this.name = name\n    this.store = store\n  }\n\n  get directory() {\n    return path.join(process.cwd(), `.cache/caches/${this.name}`)\n  }\n\n  init() {\n    fs.ensureDirSync(this.directory)\n\n    const caches = [\n      {\n        store: `memory`,\n        max: MAX_CACHE_SIZE,\n      },\n      {\n        store: this.store,\n        options: {\n          path: this.directory,\n          ttl: TTL,\n        },\n      },\n    ].map(cache => manager.caching(cache))\n\n    this.cache = manager.multiCaching(caches)\n\n    return this\n  }\n\n  get(key) {\n    return new Promise(resolve => {\n      this.cache.get(key, (_, res) => resolve(res))\n    })\n  }\n\n  set(key, value, args = {}) {\n    return new Promise(resolve => {\n      this.cache.set(key, value, args, (_, res) => resolve(res))\n    })\n  }\n}\n\nmodule.exports = Cache\n"],"file":"cache.js"}