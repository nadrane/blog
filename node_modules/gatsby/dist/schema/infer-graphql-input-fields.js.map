{"version":3,"sources":["../../src/schema/infer-graphql-input-fields.js"],"names":["require","GraphQLInputObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLList","oneLine","_","invariant","typeOf","createTypeName","createKey","getExampleValues","extractFieldNames","isEmptyObjectOrArray","INVALID_VALUE","findLinkedNode","getNodesByType","is32BitInteger","typeFields","type","eq","ne","in","nin","regex","glob","gt","gte","lt","lte","inferGraphQLInputFields","value","nodes","prefix","headValue","headType","inType","inferredField","JSON","stringify","Object","keys","fields","elemMatch","name","inferInputObjectStructureFromNodes","exampleValue","inferredFields","isEmpty","EXCLUDE_KEYS","parent","children","recursiveOmitBy","fn","isObject","isPlainObject","omitBy","isArray","clone","each","v","k","linkedNodeCache","typeName","isRoot","internal","key","includes","nodeToFind","linkedNode","relatedNodes","_v","_k","split","field","upperFirst","sort"],"mappings":"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","sourcesContent":["// @flow\nconst {\n  GraphQLInputObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n} = require(`graphql`)\nconst { oneLine } = require(`common-tags`)\nconst _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst typeOf = require(`type-of`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\nconst {\n  getExampleValues,\n  extractFieldNames,\n  isEmptyObjectOrArray,\n  INVALID_VALUE,\n} = require(`./data-tree-utils`)\n\nconst { findLinkedNode } = require(`./infer-graphql-type`)\nconst { getNodesByType } = require(`../db/nodes`)\nconst is32BitInteger = require(`../utils/is-32-bit-integer`)\n\nimport type {\n  GraphQLInputFieldConfig,\n  GraphQLInputFieldConfigMap,\n} from \"graphql/type/definition\"\n\nfunction typeFields(type): GraphQLInputFieldConfigMap {\n  switch (type) {\n    case `boolean`:\n      return {\n        eq: { type: GraphQLBoolean },\n        ne: { type: GraphQLBoolean },\n        in: { type: new GraphQLList(GraphQLBoolean) },\n        nin: { type: new GraphQLList(GraphQLBoolean) },\n      }\n    case `string`:\n      return {\n        eq: { type: GraphQLString },\n        ne: { type: GraphQLString },\n        regex: { type: GraphQLString },\n        glob: { type: GraphQLString },\n        in: { type: new GraphQLList(GraphQLString) },\n        nin: { type: new GraphQLList(GraphQLString) },\n      }\n    case `int`:\n      return {\n        eq: { type: GraphQLInt },\n        ne: { type: GraphQLInt },\n        gt: { type: GraphQLInt },\n        gte: { type: GraphQLInt },\n        lt: { type: GraphQLInt },\n        lte: { type: GraphQLInt },\n        in: { type: new GraphQLList(GraphQLInt) },\n        nin: { type: new GraphQLList(GraphQLInt) },\n      }\n    case `float`:\n      return {\n        eq: { type: GraphQLFloat },\n        ne: { type: GraphQLFloat },\n        gt: { type: GraphQLFloat },\n        gte: { type: GraphQLFloat },\n        lt: { type: GraphQLFloat },\n        lte: { type: GraphQLFloat },\n        in: { type: new GraphQLList(GraphQLFloat) },\n        nin: { type: new GraphQLList(GraphQLFloat) },\n      }\n  }\n  return {}\n}\n\nfunction inferGraphQLInputFields({\n  value,\n  nodes,\n  prefix,\n}): ?GraphQLInputFieldConfig {\n  if (value == null || isEmptyObjectOrArray(value)) return null\n\n  switch (typeOf(value)) {\n    case `array`: {\n      const headValue = value[0]\n      let headType = typeOf(headValue)\n\n      if (headType === `number`)\n        headType = is32BitInteger(headValue) ? `int` : `float`\n\n      // Determine type for in operator.\n      let inType\n      switch (headType) {\n        case `int`:\n          inType = GraphQLInt\n          break\n        case `float`:\n          inType = GraphQLFloat\n          break\n        case `date`:\n        case `string`:\n          inType = GraphQLString\n          break\n        case `boolean`:\n          inType = GraphQLBoolean\n          break\n        case `array`:\n        case `object`: {\n          let inferredField = inferGraphQLInputFields({\n            value: headValue,\n            prefix,\n            nodes,\n          })\n          invariant(\n            inferredField,\n            `Could not infer graphQL type for value: ${JSON.stringify(\n              Object.keys(headValue)\n            )}`\n          )\n          inType = inferredField.type\n          break\n        }\n        default:\n          invariant(\n            false,\n            oneLine`\n              Could not infer an appropriate GraphQL input type\n              for value: ${headValue} of type ${headType} along path: ${prefix}\n            `\n          )\n      }\n\n      let fields\n      if (headType === `object`) {\n        fields = {\n          elemMatch: {\n            type: inType,\n          },\n        }\n      } else {\n        fields = {\n          ...typeFields(headType),\n          in: { type: new GraphQLList(inType) },\n        }\n      }\n\n      return {\n        type: new GraphQLInputObjectType({\n          name: createTypeName(`${prefix}QueryList`),\n          fields,\n        }),\n      }\n    }\n    case `boolean`: {\n      return {\n        type: new GraphQLInputObjectType({\n          name: createTypeName(`${prefix}QueryBoolean`),\n          fields: typeFields(`boolean`),\n        }),\n      }\n    }\n    case `date`:\n    case `string`: {\n      return {\n        type: new GraphQLInputObjectType({\n          name: createTypeName(`${prefix}QueryString`),\n          fields: typeFields(`string`),\n        }),\n      }\n    }\n    case `object`: {\n      const fields = inferInputObjectStructureFromNodes({\n        nodes,\n        prefix,\n        exampleValue: value,\n      }).inferredFields\n      if (!_.isEmpty(fields)) {\n        return {\n          type: new GraphQLInputObjectType({\n            name: createTypeName(`${prefix}InputObject`),\n            fields,\n          }),\n        }\n      } else {\n        return null\n      }\n    }\n    case `number`: {\n      if (is32BitInteger(value)) {\n        return {\n          type: new GraphQLInputObjectType({\n            name: createTypeName(`${prefix}QueryInteger`),\n            fields: typeFields(`int`),\n          }),\n        }\n      } else {\n        return {\n          type: new GraphQLInputObjectType({\n            name: createTypeName(`${prefix}QueryFloat`),\n            fields: typeFields(`float`),\n          }),\n        }\n      }\n    }\n    default:\n      return null\n  }\n}\n\nconst EXCLUDE_KEYS = {\n  parent: 1,\n  children: 1,\n}\n\ntype InferInputOptions = {\n  nodes: Object[],\n  typeName?: string,\n  prefix?: string,\n  exampleValue?: Object,\n}\n\nconst recursiveOmitBy = (value, fn) => {\n  if (_.isObject(value)) {\n    if (_.isPlainObject(value)) {\n      value = _.omitBy(value, fn)\n    } else if (_.isArray(value)) {\n      // don't mutate original value\n      value = _.clone(value)\n    }\n    _.each(value, (v, k) => {\n      value[k] = recursiveOmitBy(v, fn)\n    })\n    if (_.isEmpty(value)) {\n      // don't return empty objects - gatsby doesn't support these\n      return null\n    }\n  }\n  return value\n}\n\nconst linkedNodeCache = {}\n\nexport function inferInputObjectStructureFromNodes({\n  nodes,\n  typeName = ``,\n  prefix = ``,\n  exampleValue = null,\n}: InferInputOptions): Object {\n  const inferredFields = {}\n  const isRoot = !prefix\n\n  prefix = isRoot ? typeName : prefix\n  if (exampleValue === null) {\n    // typeName includes \"Connection\" string, which is not what we want,\n    // so extract type from first node\n    exampleValue = getExampleValues({\n      nodes,\n      typeName:\n        nodes && nodes[0] && nodes[0].internal && nodes[0].internal.type,\n    })\n  }\n\n  _.each(exampleValue, (v, k) => {\n    let value = v\n    let key = k\n    // Remove fields for traversing through nodes as we want to control\n    // setting traversing up not try to automatically infer them.\n    if (value === INVALID_VALUE || (isRoot && EXCLUDE_KEYS[key])) return\n\n    if (_.includes(key, `___NODE`)) {\n      // TODO: Union the objects in array\n      const isArray = _.isArray(value)\n      const nodeToFind = isArray ? value[0] : value\n      const linkedNode = findLinkedNode(nodeToFind)\n\n      // Fall back if the linked node can't be found. Prevents crashing, and is\n      // picked up in infer-graphql-type.js with an error that gives context to\n      // the user about which node is missing\n      if (!linkedNode) {\n        return\n      }\n\n      // Get from cache if found, else store into it\n      if (linkedNodeCache[linkedNode.internal.type]) {\n        value = linkedNodeCache[linkedNode.internal.type]\n      } else {\n        const relatedNodes = getNodesByType(linkedNode.internal.type)\n        value = getExampleValues({\n          nodes: relatedNodes,\n          typeName: linkedNode.internal.type,\n        })\n        value = recursiveOmitBy(value, (_v, _k) => _.includes(_k, `___NODE`))\n        linkedNodeCache[linkedNode.internal.type] = value\n      }\n\n      if (isArray) {\n        value = [value]\n      }\n\n      ;[key] = key.split(`___`)\n    }\n\n    let field = inferGraphQLInputFields({\n      nodes,\n      value,\n      prefix: `${prefix}${_.upperFirst(key)}`,\n    })\n\n    if (field === null) return\n    inferredFields[createKey(key)] = field\n  })\n\n  // Add sorting (but only to the top level).\n  let sort = []\n  if (typeName) {\n    sort = extractFieldNames(nodes)\n  }\n\n  return { inferredFields, sort }\n}\n"],"file":"infer-graphql-input-fields.js"}