{"version":3,"sources":["../../../src/schema/types/type-file.js"],"names":["require","GraphQLList","_","mime","isRelative","isRelativeUrl","normalize","systemPath","getNodesByType","findRootNodeAncestor","pageDependencyResolver","joinPath","type","listType","setFileNodeRootType","fileNodeRootType","createType","pointsToFile","nodes","key","value","looksLikeFile","isString","getType","node","find","n","get","visit","current","selector","fn","i","keys","Object","length","undefined","concat","proceed","isNormalInteger","str","test","isMatch","v","k","parent","normalizedSelector","map","s","filter","fullSelector","join","rootNode","internal","pathToOtherNode","dir","otherFileExists","some","absolutePath","shouldInfer","isEmpty","isArray","freeze","resolve","args","context","fieldName","fieldValue","findLinkedFileNode","relativePath","fileLinkPath","parentFileNode","linkedFileNode","getListType"],"mappings":"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","sourcesContent":["const { GraphQLList } = require(`graphql`)\nconst _ = require(`lodash`)\nconst mime = require(`mime`)\nconst isRelative = require(`is-relative`)\nconst isRelativeUrl = require(`is-relative-url`)\nconst normalize = require(`normalize-path`)\nconst systemPath = require(`path`)\n\nconst { getNodesByType } = require(`../../db/nodes`)\nconst { findRootNodeAncestor } = require(`../../db/node-tracking`)\nconst pageDependencyResolver = require(`../page-dependency-resolver`)\nconst { joinPath } = require(`../../utils/path`)\n\nlet type, listType\n\nexport function setFileNodeRootType(fileNodeRootType) {\n  if (fileNodeRootType) {\n    type = createType(fileNodeRootType, false)\n    listType = createType(fileNodeRootType, true)\n  } else {\n    type = null\n    listType = null\n  }\n}\n\nfunction pointsToFile(nodes, key, value) {\n  const looksLikeFile =\n    _.isString(value) &&\n    mime.getType(value) !== null &&\n    // domains ending with .com\n    mime.getType(value) !== `application/x-msdownload` &&\n    isRelative(value) &&\n    isRelativeUrl(value)\n\n  if (!looksLikeFile) {\n    return false\n  }\n\n  // Find the node used for this example.\n  let node = nodes.find(n => _.get(n, key) === value)\n\n  if (!node) {\n    // Try another search as our \"key\" isn't always correct e.g.\n    // it doesn't support arrays so the right key could be \"a.b[0].c\" but\n    // this function will get \"a.b.c\".\n    //\n    // We loop through every value of nodes until we find\n    // a match.\n    const visit = (current, selector = [], fn) => {\n      for (let i = 0, keys = Object.keys(current); i < keys.length; i++) {\n        const key = keys[i]\n        const value = current[key]\n\n        if (value === undefined || value === null) continue\n\n        if (typeof value === `object` || typeof value === `function`) {\n          visit(current[key], selector.concat([key]), fn)\n          continue\n        }\n\n        let proceed = fn(current[key], key, selector, current)\n\n        if (proceed === false) {\n          break\n        }\n      }\n    }\n\n    const isNormalInteger = str => /^\\+?(0|[1-9]\\d*)$/.test(str)\n\n    node = nodes.find(n => {\n      let isMatch = false\n      visit(n, [], (v, k, selector, parent) => {\n        if (v === value) {\n          // Remove integers as they're for arrays, which our passed\n          // in object path doesn't have.\n          const normalizedSelector = selector\n            .map(s => (isNormalInteger(s) ? `` : s))\n            .filter(s => s !== ``)\n          const fullSelector = `${normalizedSelector.join(`.`)}.${k}`\n          if (fullSelector === key) {\n            isMatch = true\n            return false\n          }\n        }\n\n        // Not a match so we continue\n        return true\n      })\n\n      return isMatch\n    })\n\n    // Still no node.\n    if (!node) {\n      return false\n    }\n  }\n\n  const rootNode = findRootNodeAncestor(node)\n\n  // Only nodes transformed (ultimately) from a File\n  // can link to another File.\n  if (rootNode.internal.type !== `File`) {\n    return false\n  }\n\n  const pathToOtherNode = normalize(joinPath(rootNode.dir, value))\n  const otherFileExists = getNodesByType(`File`).some(\n    n => n.absolutePath === pathToOtherNode\n  )\n  return otherFileExists\n}\n\nexport function shouldInfer(nodes, selector, value) {\n  return (\n    nodes[0].internal.type !== `File` &&\n    ((_.isString(value) &&\n      !_.isEmpty(value) &&\n      pointsToFile(nodes, selector, value)) ||\n      (_.isArray(value) &&\n        _.isString(value[0]) &&\n        !_.isEmpty(value[0]) &&\n        pointsToFile(nodes, `${selector}[0]`, value[0])))\n  )\n}\n\nfunction createType(fileNodeRootType, isArray) {\n  if (!fileNodeRootType) return null\n\n  return Object.freeze({\n    type: isArray ? new GraphQLList(fileNodeRootType) : fileNodeRootType,\n    resolve: pageDependencyResolver((node, args, context, { fieldName }) => {\n      let fieldValue = node[fieldName]\n\n      if (!fieldValue) {\n        return null\n      }\n\n      const findLinkedFileNode = relativePath => {\n        // Use the parent File node to create the absolute path to\n        // the linked file.\n        const fileLinkPath = normalize(\n          systemPath.resolve(parentFileNode.dir, relativePath)\n        )\n\n        // Use that path to find the linked File node.\n        const linkedFileNode = _.find(\n          getNodesByType(`File`),\n          n => n.absolutePath === fileLinkPath\n        )\n        return linkedFileNode\n      }\n\n      // Find the File node for this node (we assume the node is something\n      // like markdown which would be a child node of a File node).\n      const parentFileNode = findRootNodeAncestor(node)\n\n      // Find the linked File node(s)\n      if (isArray) {\n        return fieldValue.map(findLinkedFileNode)\n      } else {\n        return findLinkedFileNode(fieldValue)\n      }\n    }),\n  })\n}\n\nexport function getType() {\n  return type\n}\n\nexport function getListType() {\n  return listType\n}\n"],"file":"type-file.js"}