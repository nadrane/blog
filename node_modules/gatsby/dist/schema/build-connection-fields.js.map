{"version":3,"sources":["../../src/schema/build-connection-fields.js"],"names":["_","require","GraphQLInt","GraphQLList","GraphQLString","GraphQLEnumType","connectionArgs","connectionDefinitions","connectionFromArray","buildFieldEnumValues","module","exports","type","enumValues","nodes","typeName","name","camelCase","nodeType","nodeObjectType","connectionFields","field","fieldValue","totalCount","groupConnection","connectionType","distinct","args","values","resolve","connection","fieldName","includes","replace","fields","edges","map","edge","get","node","sortBy","filter","uniq","flatten","identity","group","connectionNodes","groups","isArray","find","reduce","vals","n","has","concat","forEach","val","groupBy","groupConnections","sortedFieldValues","keys","each","groupNodes","groupConn","length","push"],"mappings":"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","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst {\n  GraphQLInt,\n  GraphQLList,\n  GraphQLString,\n  GraphQLEnumType,\n} = require(`graphql`)\nconst {\n  connectionArgs,\n  connectionDefinitions,\n  connectionFromArray,\n} = require(`graphql-skip-limit`)\n\nconst { buildFieldEnumValues } = require(`./data-tree-utils`)\n\nmodule.exports = type => {\n  const enumValues = buildFieldEnumValues({\n    nodes: type.nodes,\n    typeName: type.name,\n  })\n  const { connectionType: groupConnection } = connectionDefinitions({\n    name: _.camelCase(`${type.name} groupConnection`),\n    nodeType: type.nodeObjectType,\n    connectionFields: () => {\n      return {\n        field: { type: GraphQLString },\n        fieldValue: { type: GraphQLString },\n        totalCount: { type: GraphQLInt },\n      }\n    },\n  })\n\n  return {\n    totalCount: {\n      type: GraphQLInt,\n    },\n    distinct: {\n      type: new GraphQLList(GraphQLString),\n      args: {\n        field: {\n          type: new GraphQLEnumType({\n            name: _.camelCase(`${type.name} distinct enum`),\n            values: enumValues,\n          }),\n        },\n      },\n      resolve(connection, args) {\n        let fieldName = args.field\n        if (_.includes(args.field, `___`)) {\n          fieldName = args.field.replace(/___/g, `.`)\n        }\n        const fields = connection.edges.map(edge => _.get(edge.node, fieldName))\n        return _.sortBy(_.filter(_.uniq(_.flatten(fields)), _.identity))\n      },\n    },\n    group: {\n      type: new GraphQLList(groupConnection),\n      args: {\n        ...connectionArgs,\n        field: {\n          type: new GraphQLEnumType({\n            name: _.camelCase(`${type.name} group enum`),\n            values: enumValues,\n          }),\n        },\n      },\n      resolve(connection, args) {\n        const fieldName = args.field.replace(/___/g, `.`)\n        const connectionNodes = connection.edges.map(edge => edge.node)\n\n        let groups = {}\n        // Do a custom grouping for arrays (w/ a group per array value)\n        // Find the first node with this field and check if it's an array.\n        if (_.isArray(_.get(_.find(connectionNodes, fieldName), fieldName))) {\n          const values = _.uniq(\n            _.reduce(\n              connectionNodes,\n              (vals, n) => {\n                if (_.has(n, fieldName)) {\n                  return vals.concat(_.get(n, fieldName))\n                } else {\n                  return vals\n                }\n              },\n              []\n            )\n          )\n          values.forEach(val => {\n            groups[val] = _.filter(connectionNodes, n =>\n              _.includes(_.get(n, fieldName), val)\n            )\n          })\n        } else {\n          groups = _.groupBy(connectionNodes, fieldName)\n        }\n        const groupConnections = []\n\n        // Do default sort by fieldValue\n        const sortedFieldValues = _.sortBy(_.keys(groups))\n        _.each(sortedFieldValues, fieldValue => {\n          const groupNodes = groups[fieldValue]\n          const groupConn = connectionFromArray(groupNodes, args)\n          groupConn.totalCount = groupNodes.length\n          groupConn.field = fieldName\n          groupConn.fieldValue = fieldValue\n          groupConnections.push(groupConn)\n        })\n\n        return groupConnections\n      },\n    },\n  }\n}\n"],"file":"build-connection-fields.js"}