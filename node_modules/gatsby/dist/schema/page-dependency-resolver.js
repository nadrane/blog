"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

const _ = require(`lodash`);

const createPageDependency = require(`../redux/actions/add-page-dependency`);
/**
 * A Graphql resolver middleware that runs `resolver` and creates a
 * page dependency with the returned node.
 *
 * @param resolver A graphql resolver. A function that take arguments
 * (node, args, context, info) and return a node
 * @returns A new graphql resolver
 */


function pageDependencyResolver(resolver) {
  return (
    /*#__PURE__*/
    function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (node, args, context = {}, info = {}) {
        const path = context.path;
        const result = yield resolver(node, args, context, info); // Call createPageDependency on each result

        if (path) {
          const asArray = _.isArray(result) ? result : [result];

          for (var _iterator = asArray, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref2 = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref2 = _i.value;
            }

            const node = _ref2;

            if (node) {
              // using module.exports here so it can be mocked
              createPageDependency({
                path,
                nodeId: node.id
              });
            }
          }
        } // Finally return the found node


        return result;
      });

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }()
  );
}

module.exports = pageDependencyResolver;
//# sourceMappingURL=page-dependency-resolver.js.map