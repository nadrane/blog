{"version":3,"sources":["../../src/schema/build-node-connections.js"],"names":["_","require","connectionArgs","connectionDefinitions","GraphQLInputObjectType","inferInputObjectStructureFromNodes","inferInputObjectStructureFromFields","createSortField","buildConnectionFields","getNodes","module","exports","types","connections","each","type","name","nodes","typeName","nodeType","nodeObjectType","connectionFields","typeConnection","connectionType","inferredInputFieldsFromNodes","inferredInputFieldsFromPlugins","fields","fieldsFromPlugins","filterFields","merge","inferredFields","sortNames","sort","concat","camelCase","description","args","filter","resolve","object","resolveArgs","b","rootValue","path","runSift","latestNodes","n","internal","connection","node"],"mappings":"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","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst { connectionArgs, connectionDefinitions } = require(`graphql-skip-limit`)\nconst { GraphQLInputObjectType } = require(`graphql`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst {\n  inferInputObjectStructureFromFields,\n} = require(`./infer-graphql-input-fields-from-fields`)\nconst createSortField = require(`./create-sort-field`)\nconst buildConnectionFields = require(`./build-connection-fields`)\nconst { getNodes } = require(`../redux`)\n\nmodule.exports = (types: any) => {\n  const connections = {}\n\n  _.each(types, (type /* , fieldName*/) => {\n    // Don't create a connection for the Site node since there can only be one\n    // of them.\n    if (type.name === `Site`) {\n      return\n    }\n    const nodes = type.nodes\n    const typeName = `${type.name}Connection`\n    const { connectionType: typeConnection } = connectionDefinitions({\n      nodeType: type.nodeObjectType,\n      connectionFields: () => buildConnectionFields(type),\n    })\n\n    const inferredInputFieldsFromNodes = inferInputObjectStructureFromNodes({\n      nodes,\n      typeName,\n    })\n\n    const inferredInputFieldsFromPlugins = inferInputObjectStructureFromFields({\n      fields: type.fieldsFromPlugins,\n      typeName,\n    })\n\n    const filterFields = _.merge(\n      {},\n      inferredInputFieldsFromNodes.inferredFields,\n      inferredInputFieldsFromPlugins.inferredFields\n    )\n    const sortNames = inferredInputFieldsFromNodes.sort.concat(\n      inferredInputFieldsFromPlugins.sort\n    )\n    const sort = createSortField(typeName, sortNames)\n\n    connections[_.camelCase(`all ${type.name}`)] = {\n      type: typeConnection,\n      description: `Connection to all ${type.name} nodes`,\n      args: {\n        ...connectionArgs,\n        sort,\n        filter: {\n          type: new GraphQLInputObjectType({\n            name: _.camelCase(`filter ${type.name}`),\n            description: `Filter connection on its fields`,\n            fields: () => filterFields,\n          }),\n        },\n      },\n      resolve(object, resolveArgs, b, { rootValue }) {\n        let path\n        if (typeof rootValue !== `undefined`) {\n          path = rootValue.path\n        }\n        const runSift = require(`./run-sift`)\n        const latestNodes = _.filter(\n          getNodes(),\n          n => n.internal.type === type.name\n        )\n        return runSift({\n          args: resolveArgs,\n          nodes: latestNodes,\n          connection: true,\n          path,\n          typeName: typeName,\n          type: type.node.type,\n        })\n      },\n    }\n  })\n\n  return connections\n}\n"],"file":"build-node-connections.js"}