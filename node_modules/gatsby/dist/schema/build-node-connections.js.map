{"version":3,"sources":["../../src/schema/build-node-connections.js"],"names":["_","require","connectionArgs","connectionDefinitions","GraphQLInputObjectType","inferInputObjectStructureFromNodes","inferInputObjectStructureFromFields","buildSortArg","buildConnectionFields","createPageDependency","connectionFromArray","runQuery","handleQueryResult","results","queryArgs","path","length","connection","totalCount","internal","connectionType","edges","node","type","buildResolver","gqlType","object","b","rootValue","firstOnly","buildFilterArg","typeName","filterFields","name","camelCase","description","fields","buildFieldConfig","processedType","nodes","nodeObjectType","nodeType","connectionFields","outputType","inferredInputFieldsFromNodes","inferredInputFieldsFromPlugins","fieldsFromPlugins","merge","inferredFields","sortNames","sort","concat","argsMap","filter","args","resolve","buildFieldConfigMap","fieldName","fieldConfig","fieldConfigReducer","fieldConfigMap","Object","assign","buildAll","processedTypes","reduce","module","exports"],"mappings":"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","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst { connectionArgs, connectionDefinitions } = require(`graphql-skip-limit`)\nconst { GraphQLInputObjectType } = require(`graphql`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst {\n  inferInputObjectStructureFromFields,\n} = require(`./infer-graphql-input-fields-from-fields`)\nconst buildSortArg = require(`./create-sort-field`)\nconst buildConnectionFields = require(`./build-connection-fields`)\nconst createPageDependency = require(`../redux/actions/add-page-dependency`)\nconst { connectionFromArray } = require(`graphql-skip-limit`)\nconst { runQuery } = require(`../db/nodes`)\n\nfunction handleQueryResult({ results, queryArgs, path }) {\n  if (results && results.length) {\n    const connection = connectionFromArray(results, queryArgs)\n    connection.totalCount = results.length\n\n    if (results[0].internal) {\n      const connectionType = connection.edges[0].node.internal.type\n      createPageDependency({\n        path,\n        connection: connectionType,\n      })\n    }\n    return connection\n  } else {\n    return null\n  }\n}\n\nfunction buildResolver(gqlType) {\n  return async (object, queryArgs, b, { rootValue }) => {\n    let path\n    if (typeof rootValue !== `undefined`) {\n      path = rootValue.path\n    }\n    const results = await runQuery({\n      queryArgs,\n      firstOnly: false,\n      gqlType,\n    })\n    return handleQueryResult({ results, queryArgs, path })\n  }\n}\n\nfunction buildFilterArg(typeName, filterFields) {\n  return {\n    type: new GraphQLInputObjectType({\n      name: _.camelCase(`filter ${typeName}`),\n      description: `Filter connection on its fields`,\n      fields: () => filterFields,\n    }),\n  }\n}\n\nfunction buildFieldConfig(processedType) {\n  const { nodes, nodeObjectType } = processedType\n  const typeName = `${processedType.name}Connection`\n  const { connectionType: outputType } = connectionDefinitions({\n    nodeType: nodeObjectType,\n    connectionFields: () => buildConnectionFields(processedType),\n  })\n\n  const inferredInputFieldsFromNodes = inferInputObjectStructureFromNodes({\n    nodes,\n    typeName,\n  })\n\n  const inferredInputFieldsFromPlugins = inferInputObjectStructureFromFields({\n    fields: processedType.fieldsFromPlugins,\n    typeName,\n  })\n\n  const filterFields = _.merge(\n    {},\n    inferredInputFieldsFromNodes.inferredFields,\n    inferredInputFieldsFromPlugins.inferredFields\n  )\n  const sortNames = inferredInputFieldsFromNodes.sort.concat(\n    inferredInputFieldsFromPlugins.sort\n  )\n\n  const argsMap = {\n    ...connectionArgs,\n    sort: buildSortArg(typeName, sortNames),\n    filter: buildFilterArg(processedType.name, filterFields),\n  }\n\n  return {\n    type: outputType,\n    description: `Connection to all ${processedType.name} nodes`,\n    args: argsMap,\n    resolve: buildResolver(nodeObjectType),\n  }\n}\n\nfunction buildFieldConfigMap(processedType) {\n  const fieldName = _.camelCase(`all ${processedType.name}`)\n  const fieldConfig = buildFieldConfig(processedType)\n  return { [fieldName]: fieldConfig }\n}\n\nfunction fieldConfigReducer(fieldConfigMap, type) {\n  return Object.assign(fieldConfigMap, buildFieldConfigMap(type))\n}\n\nfunction buildAll(processedTypes) {\n  return processedTypes\n    .filter(type => type.name !== `Site`)\n    .reduce(fieldConfigReducer, {})\n}\n\nmodule.exports = {\n  buildFieldConfig,\n  buildFieldConfigMap,\n  buildAll,\n}\n"],"file":"build-node-connections.js"}