{"version":3,"sources":["../../src/schema/infer-graphql-input-fields-from-fields.js"],"names":["require","GraphQLInputObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLID","GraphQLList","GraphQLEnumType","GraphQLNonNull","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","_","report","createTypeName","createKey","makeNullable","type","ofType","convertToInputType","typeMap","has","nextTypeMap","Set","Array","from","concat","fields","transform","getFields","out","fieldConfig","key","Object","keys","length","name","innerType","message","verbose","scalarFilterMap","Int","eq","ne","gt","gte","lt","lte","in","nin","Float","ID","String","regex","glob","Boolean","convertToInputFilter","prefix","upperFirst","innerFilter","innerFields","elemMatch","extractFieldNamesFromInputField","accu","push","each","inferInputObjectStructureFromFields","typeName","inferredFields","sort","inputType","inputFilter"],"mappings":";;;;;iBAgBIA,OAAO,CAAE,SAAF,C;MAbTC,sB,YAAAA,sB;MACAC,c,YAAAA,c;MACAC,a,YAAAA,a;MACAC,Y,YAAAA,Y;MACAC,U,YAAAA,U;MACAC,S,YAAAA,S;MACAC,W,YAAAA,W;MACAC,e,YAAAA,e;MACAC,c,YAAAA,c;MACAC,iB,YAAAA,iB;MACAC,iB,YAAAA,iB;MACAC,oB,YAAAA,oB;MACAC,gB,YAAAA,gB;;AAKF,MAAMC,CAAC,GAAGd,OAAO,CAAE,QAAF,CAAjB;;AACA,MAAMe,MAAM,GAAGf,OAAO,CAAE,yBAAF,CAAtB;;AACA,MAAMgB,cAAc,GAAGhB,OAAO,CAAE,oBAAF,CAA9B;;AACA,MAAMiB,SAAS,GAAGjB,OAAO,CAAE,cAAF,CAAzB;;AAQA,SAASkB,YAAT,CAAsBC,IAAtB,EAA6E;AAC3E,MAAIA,IAAI,YAAYV,cAApB,EAAoC;AAClC,WAAOU,IAAI,CAACC,MAAZ;AACD;;AACD,SAAOD,IAAP;AACD;;AAED,SAASE,kBAAT,CACEF,IADF,EAEEG,OAFF,EAGqB;AACnB;AACA,MAAIA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,CAAJ,EAAuB;AACrB,WAAO,IAAP;AACD;;AACD,QAAMK,WAAW,GAAG,IAAIC,GAAJ,CAAQC,KAAK,CAACC,IAAN,CAAWL,OAAX,EAAoBM,MAApB,CAA2B,CAACT,IAAD,CAA3B,CAAR,CAApB;;AAEA,MAAIA,IAAI,YAAYT,iBAAhB,IAAqCS,IAAI,YAAYX,eAAzD,EAA0E;AACxE,WAAOW,IAAP;AACD,GAFD,MAEO,IAAIA,IAAI,YAAYR,iBAApB,EAAuC;AAC5C,UAAMkB,MAAM,GAAGf,CAAC,CAACgB,SAAF,CAAYX,IAAI,CAACY,SAAL,EAAZ,EAA8B,CAACC,GAAD,EAAMC,WAAN,EAAmBC,GAAnB,KAA2B;AACtE,YAAMf,IAAI,GAAGE,kBAAkB,CAACY,WAAW,CAACd,IAAb,EAAmBK,WAAnB,CAA/B;AACA,UAAIL,IAAJ,EAAUa,GAAG,CAACE,GAAD,CAAH,GAAW;AAAEf,QAAAA;AAAF,OAAX;AACX,KAHc,CAAf;;AAIA,QAAIgB,MAAM,CAACC,IAAP,CAAYP,MAAZ,EAAoBQ,MAApB,KAA+B,CAAnC,EAAsC;AACpC,aAAO,IAAP;AACD;;AACD,WAAO,IAAIpC,sBAAJ,CAA2B;AAChCqC,MAAAA,IAAI,EAAEtB,cAAc,CAAE,GAAEG,IAAI,CAACmB,IAAK,aAAd,CADY;AAEhCT,MAAAA;AAFgC,KAA3B,CAAP;AAID,GAZM,MAYA,IAAIV,IAAI,YAAYZ,WAApB,EAAiC;AACtC,QAAIgC,SAAS,GAAGlB,kBAAkB,CAACF,IAAI,CAACC,MAAN,EAAcI,WAAd,CAAlC;AACA,WAAOe,SAAS,GAAG,IAAIhC,WAAJ,CAAgBW,YAAY,CAACqB,SAAD,CAA5B,CAAH,GAA8C,IAA9D;AACD,GAHM,MAGA,IAAIpB,IAAI,YAAYV,cAApB,EAAoC;AACzC,QAAI8B,SAAS,GAAGlB,kBAAkB,CAACF,IAAI,CAACC,MAAN,EAAcI,WAAd,CAAlC;AACA,WAAOe,SAAS,GAAG,IAAI9B,cAAJ,CAAmBS,YAAY,CAACqB,SAAD,CAA/B,CAAH,GAAiD,IAAjE;AACD,GAHM,MAGA;AACL,QAAIC,OAAO,GAAGrB,IAAI,GAAI,aAAYA,IAAI,CAACmB,IAAK,EAA1B,GAA+B,EAAjD;;AACA,QAAInB,IAAI,YAAYP,oBAApB,EAA0C;AACxC4B,MAAAA,OAAO,GAAI,4CAA2CA,OAAQ,EAA9D;AACD,KAFD,MAEO,IAAIrB,IAAI,YAAYN,gBAApB,EAAsC;AAC3C2B,MAAAA,OAAO,GAAI,wCAAuCA,OAAQ,EAA1D;AACD,KAFM,MAEA;AACLA,MAAAA,OAAO,GAAI,sBAAqBA,OAAQ,EAAxC;AACD;;AACDzB,IAAAA,MAAM,CAAC0B,OAAP,CAAeD,OAAf;AACD;;AAED,SAAO,IAAP;AACD;;AAED,MAAME,eAAe,GAAG;AACtBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,EAAE,EAAE;AAAEzB,MAAAA,IAAI,EAAEd;AAAR,KADD;AAEHwC,IAAAA,EAAE,EAAE;AAAE1B,MAAAA,IAAI,EAAEd;AAAR,KAFD;AAGHyC,IAAAA,EAAE,EAAE;AAAE3B,MAAAA,IAAI,EAAEd;AAAR,KAHD;AAIH0C,IAAAA,GAAG,EAAE;AAAE5B,MAAAA,IAAI,EAAEd;AAAR,KAJF;AAKH2C,IAAAA,EAAE,EAAE;AAAE7B,MAAAA,IAAI,EAAEd;AAAR,KALD;AAMH4C,IAAAA,GAAG,EAAE;AAAE9B,MAAAA,IAAI,EAAEd;AAAR,KANF;AAOH6C,IAAAA,EAAE,EAAE;AAAE/B,MAAAA,IAAI,EAAE,IAAIZ,WAAJ,CAAgBF,UAAhB;AAAR,KAPD;AAQH8C,IAAAA,GAAG,EAAE;AAAEhC,MAAAA,IAAI,EAAE,IAAIZ,WAAJ,CAAgBF,UAAhB;AAAR;AARF,GADiB;AAWtB+C,EAAAA,KAAK,EAAE;AACLR,IAAAA,EAAE,EAAE;AAAEzB,MAAAA,IAAI,EAAEf;AAAR,KADC;AAELyC,IAAAA,EAAE,EAAE;AAAE1B,MAAAA,IAAI,EAAEf;AAAR,KAFC;AAGL0C,IAAAA,EAAE,EAAE;AAAE3B,MAAAA,IAAI,EAAEf;AAAR,KAHC;AAIL2C,IAAAA,GAAG,EAAE;AAAE5B,MAAAA,IAAI,EAAEf;AAAR,KAJA;AAKL4C,IAAAA,EAAE,EAAE;AAAE7B,MAAAA,IAAI,EAAEf;AAAR,KALC;AAML6C,IAAAA,GAAG,EAAE;AAAE9B,MAAAA,IAAI,EAAEf;AAAR,KANA;AAOL8C,IAAAA,EAAE,EAAE;AAAE/B,MAAAA,IAAI,EAAE,IAAIZ,WAAJ,CAAgBH,YAAhB;AAAR,KAPC;AAQL+C,IAAAA,GAAG,EAAE;AAAEhC,MAAAA,IAAI,EAAE,IAAIZ,WAAJ,CAAgBH,YAAhB;AAAR;AARA,GAXe;AAqBtBiD,EAAAA,EAAE,EAAE;AACFT,IAAAA,EAAE,EAAE;AAAEzB,MAAAA,IAAI,EAAEb;AAAR,KADF;AAEFuC,IAAAA,EAAE,EAAE;AAAE1B,MAAAA,IAAI,EAAEb;AAAR,KAFF;AAGF4C,IAAAA,EAAE,EAAE;AAAE/B,MAAAA,IAAI,EAAE,IAAIZ,WAAJ,CAAgBD,SAAhB;AAAR,KAHF;AAIF6C,IAAAA,GAAG,EAAE;AAAEhC,MAAAA,IAAI,EAAE,IAAIZ,WAAJ,CAAgBD,SAAhB;AAAR;AAJH,GArBkB;AA2BtBgD,EAAAA,MAAM,EAAE;AACNV,IAAAA,EAAE,EAAE;AAAEzB,MAAAA,IAAI,EAAEhB;AAAR,KADE;AAEN0C,IAAAA,EAAE,EAAE;AAAE1B,MAAAA,IAAI,EAAEhB;AAAR,KAFE;AAGNoD,IAAAA,KAAK,EAAE;AAAEpC,MAAAA,IAAI,EAAEhB;AAAR,KAHD;AAINqD,IAAAA,IAAI,EAAE;AAAErC,MAAAA,IAAI,EAAEhB;AAAR,KAJA;AAKN+C,IAAAA,EAAE,EAAE;AAAE/B,MAAAA,IAAI,EAAE,IAAIZ,WAAJ,CAAgBJ,aAAhB;AAAR,KALE;AAMNgD,IAAAA,GAAG,EAAE;AAAEhC,MAAAA,IAAI,EAAE,IAAIZ,WAAJ,CAAgBJ,aAAhB;AAAR;AANC,GA3Bc;AAmCtBsD,EAAAA,OAAO,EAAE;AACPb,IAAAA,EAAE,EAAE;AAAEzB,MAAAA,IAAI,EAAEjB;AAAR,KADG;AAEP2C,IAAAA,EAAE,EAAE;AAAE1B,MAAAA,IAAI,EAAEjB;AAAR,KAFG;AAGPgD,IAAAA,EAAE,EAAE;AAAE/B,MAAAA,IAAI,EAAE,IAAIZ,WAAJ,CAAgBL,cAAhB;AAAR,KAHG;AAIPiD,IAAAA,GAAG,EAAE;AAAEhC,MAAAA,IAAI,EAAE,IAAIZ,WAAJ,CAAgBL,cAAhB;AAAR;AAJE;AAnCa,CAAxB;;AA2CA,SAASwD,oBAAT,CACEC,MADF,EAEExC,IAFF,EAG2B;AACzB,MAAIA,IAAI,YAAYT,iBAApB,EAAuC;AACrC,UAAM4B,IAAI,GAAGnB,IAAI,CAACmB,IAAlB;AACA,UAAMT,MAAM,GAAGa,eAAe,CAACJ,IAAD,CAA9B;AAEA,QAAIT,MAAM,IAAI,IAAd,EAAoB,OAAO,IAAP;AACpB,WAAO,IAAI5B,sBAAJ,CAA2B;AAChCqC,MAAAA,IAAI,EAAEtB,cAAc,CAAE,GAAE2C,MAAO,QAAOrB,IAAK,EAAvB,CADY;AAEhCT,MAAAA,MAAM,EAAEA;AAFwB,KAA3B,CAAP;AAID,GATD,MASO,IAAIV,IAAI,YAAYlB,sBAApB,EAA4C;AACjD,UAAM4B,MAAM,GAAGf,CAAC,CAACgB,SAAF,CAAYX,IAAI,CAACY,SAAL,EAAZ,EAA8B,CAACC,GAAD,EAAMC,WAAN,EAAmBC,GAAnB,KAA2B;AACtE,YAAMf,IAAI,GAAGuC,oBAAoB,CAC9B,GAAEC,MAAO,GAAE7C,CAAC,CAAC8C,UAAF,CAAa1B,GAAb,CAAkB,EADC,EAE/BD,WAAW,CAACd,IAFmB,CAAjC;AAIA,UAAIA,IAAJ,EAAUa,GAAG,CAACE,GAAD,CAAH,GAAW;AAAEf,QAAAA;AAAF,OAAX;AACX,KANc,CAAf;;AAOA,QAAIgB,MAAM,CAACC,IAAP,CAAYP,MAAZ,EAAoBQ,MAApB,KAA+B,CAAnC,EAAsC;AACpC,aAAO,IAAP;AACD;;AACD,WAAO,IAAIpC,sBAAJ,CAA2B;AAChCqC,MAAAA,IAAI,EAAEtB,cAAc,CAAE,GAAE2C,MAAO,aAAX,CADY;AAEhC9B,MAAAA,MAAM,EAAEA;AAFwB,KAA3B,CAAP;AAID,GAfM,MAeA,IAAIV,IAAI,YAAYZ,WAApB,EAAiC;AACtC,UAAMgC,SAAS,GAAGpB,IAAI,CAACC,MAAvB;AACA,UAAMyC,WAAW,GAAGH,oBAAoB,CAAE,GAAEC,MAAO,UAAX,EAAsBpB,SAAtB,CAAxC;AACA,UAAMuB,WAAW,GAAGD,WAAW,GAAGA,WAAW,CAAC9B,SAAZ,EAAH,GAA6B,EAA5D;AAEA,QAAIF,MAAJ;;AACA,QAAIU,SAAS,YAAYtC,sBAAzB,EAAiD;AAC/C4B,MAAAA,MAAM,GAAG;AACPkC,QAAAA,SAAS,EAAE;AAAE5C,UAAAA,IAAI,EAAE0C;AAAR;AADJ,OAAT;AAGD,KAJD,MAIO;AACLhC,MAAAA,MAAM,qBACDiC,WADC;AAEJZ,QAAAA,EAAE,EAAE;AAAE/B,UAAAA,IAAI,EAAE,IAAIZ,WAAJ,CAAgBgC,SAAhB;AAAR;AAFA,QAAN;AAID;;AAED,WAAO,IAAItC,sBAAJ,CAA2B;AAChCqC,MAAAA,IAAI,EAAEtB,cAAc,CAAE,GAAE2C,MAAO,WAAX,CADY;AAEhC9B,MAAAA;AAFgC,KAA3B,CAAP;AAID,GArBM,MAqBA,IAAIV,IAAI,YAAYV,cAApB,EAAoC;AACzC,WAAOiD,oBAAoB,CAACC,MAAD,EAASxC,IAAI,CAACC,MAAd,CAA3B;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAAS4C,+BAAT,CACEL,MADF,EAEExC,IAFF,EAGE8C,IAHF,EAIE;AACA,MAAI9C,IAAI,YAAYT,iBAAhB,IAAqCS,IAAI,YAAYZ,WAAzD,EAAsE;AACpE0D,IAAAA,IAAI,CAACC,IAAL,CAAUP,MAAV;AACD,GAFD,MAEO,IAAIxC,IAAI,YAAYlB,sBAApB,EAA4C;AACjDa,IAAAA,CAAC,CAACqD,IAAF,CAAOhD,IAAI,CAACY,SAAL,EAAP,EAAyB,CAACE,WAAD,EAAcC,GAAd,KAAsB;AAC7C8B,MAAAA,+BAA+B,CAC5B,GAAEL,MAAO,MAAKzB,GAAI,EADU,EAE7BD,WAAW,CAACd,IAFiB,EAG7B8C,IAH6B,CAA/B;AAKD,KAND;AAOD,GARM,MAQA,IAAI9C,IAAI,YAAYV,cAApB,EAAoC;AACzCuD,IAAAA,+BAA+B,CAACL,MAAD,EAASxC,IAAI,CAACC,MAAd,EAAsB6C,IAAtB,CAA/B;AACD;AACF,C,CAED;;;AACO,SAASG,mCAAT,CAA6C;AAClDvC,EAAAA,MADkD;AAElDwC,EAAAA,QAAQ,GAAI;AAFsC,CAA7C,EAGC;AACN,QAAMC,cAAc,GAAG,EAAvB;AACA,QAAMC,IAAI,GAAG,EAAb;;AAEAzD,EAAAA,CAAC,CAACqD,IAAF,CAAOtC,MAAP,EAAe,CAACI,WAAD,EAAcC,GAAd,KAAsB;AACnC,UAAMsC,SAAS,GAAGnD,kBAAkB,CAACY,WAAW,CAACd,IAAb,EAAmB,IAAIM,GAAJ,EAAnB,CAApC;AACA,UAAMgD,WAAW,GACfD,SAAS,IAAId,oBAAoB,CAAC5C,CAAC,CAAC8C,UAAF,CAAa1B,GAAb,CAAD,EAAoBsC,SAApB,CADnC;AAGA,QAAI,CAACC,WAAL,EAAkB;AAElBH,IAAAA,cAAc,CAACrD,SAAS,CAACiB,GAAD,CAAV,CAAd,GAAiC;AAAEf,MAAAA,IAAI,EAAEsD,WAAR,CAEjC;;AAFiC,KAAjC;;AAGA,QAAIJ,QAAJ,EAAc;AACZL,MAAAA,+BAA+B,CAAC9B,GAAD,EAAMsC,SAAN,EAAiBD,IAAjB,CAA/B;AACD;AACF,GAbD;;AAeA,SAAO;AAAED,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,GAAP;AACD","sourcesContent":["// @flow\n\nconst {\n  GraphQLInputObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLID,\n  GraphQLList,\n  GraphQLEnumType,\n  GraphQLNonNull,\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n} = require(`graphql`)\n\nimport type { GraphQLInputType, GraphQLType } from \"graphql\"\n\nconst _ = require(`lodash`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\n\ntype GraphQLNullableInputType<T> =\n  | GraphQLScalarType\n  | GraphQLEnumType\n  | GraphQLInputObjectType\n  | GraphQLList<T>\n\nfunction makeNullable(type: GraphQLInputType): GraphQLNullableInputType<any> {\n  if (type instanceof GraphQLNonNull) {\n    return type.ofType\n  }\n  return type\n}\n\nfunction convertToInputType(\n  type: GraphQLType,\n  typeMap: Set<GraphQLType>\n): ?GraphQLInputType {\n  // track types already processed in current tree, to avoid infinite recursion\n  if (typeMap.has(type)) {\n    return null\n  }\n  const nextTypeMap = new Set(Array.from(typeMap).concat([type]))\n\n  if (type instanceof GraphQLScalarType || type instanceof GraphQLEnumType) {\n    return type\n  } else if (type instanceof GraphQLObjectType) {\n    const fields = _.transform(type.getFields(), (out, fieldConfig, key) => {\n      const type = convertToInputType(fieldConfig.type, nextTypeMap)\n      if (type) out[key] = { type }\n    })\n    if (Object.keys(fields).length === 0) {\n      return null\n    }\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${type.name}InputObject`),\n      fields,\n    })\n  } else if (type instanceof GraphQLList) {\n    let innerType = convertToInputType(type.ofType, nextTypeMap)\n    return innerType ? new GraphQLList(makeNullable(innerType)) : null\n  } else if (type instanceof GraphQLNonNull) {\n    let innerType = convertToInputType(type.ofType, nextTypeMap)\n    return innerType ? new GraphQLNonNull(makeNullable(innerType)) : null\n  } else {\n    let message = type ? `for type: ${type.name}` : ``\n    if (type instanceof GraphQLInterfaceType) {\n      message = `GraphQLInterfaceType not yet implemented ${message}`\n    } else if (type instanceof GraphQLUnionType) {\n      message = `GraphQLUnionType not yet implemented ${message}`\n    } else {\n      message = `Invalid input type ${message}`\n    }\n    report.verbose(message)\n  }\n\n  return null\n}\n\nconst scalarFilterMap = {\n  Int: {\n    eq: { type: GraphQLInt },\n    ne: { type: GraphQLInt },\n    gt: { type: GraphQLInt },\n    gte: { type: GraphQLInt },\n    lt: { type: GraphQLInt },\n    lte: { type: GraphQLInt },\n    in: { type: new GraphQLList(GraphQLInt) },\n    nin: { type: new GraphQLList(GraphQLInt) },\n  },\n  Float: {\n    eq: { type: GraphQLFloat },\n    ne: { type: GraphQLFloat },\n    gt: { type: GraphQLFloat },\n    gte: { type: GraphQLFloat },\n    lt: { type: GraphQLFloat },\n    lte: { type: GraphQLFloat },\n    in: { type: new GraphQLList(GraphQLFloat) },\n    nin: { type: new GraphQLList(GraphQLFloat) },\n  },\n  ID: {\n    eq: { type: GraphQLID },\n    ne: { type: GraphQLID },\n    in: { type: new GraphQLList(GraphQLID) },\n    nin: { type: new GraphQLList(GraphQLID) },\n  },\n  String: {\n    eq: { type: GraphQLString },\n    ne: { type: GraphQLString },\n    regex: { type: GraphQLString },\n    glob: { type: GraphQLString },\n    in: { type: new GraphQLList(GraphQLString) },\n    nin: { type: new GraphQLList(GraphQLString) },\n  },\n  Boolean: {\n    eq: { type: GraphQLBoolean },\n    ne: { type: GraphQLBoolean },\n    in: { type: new GraphQLList(GraphQLBoolean) },\n    nin: { type: new GraphQLList(GraphQLBoolean) },\n  },\n}\n\nfunction convertToInputFilter(\n  prefix: string,\n  type: GraphQLInputType\n): ?GraphQLInputObjectType {\n  if (type instanceof GraphQLScalarType) {\n    const name = type.name\n    const fields = scalarFilterMap[name]\n\n    if (fields == null) return null\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}Query${name}`),\n      fields: fields,\n    })\n  } else if (type instanceof GraphQLInputObjectType) {\n    const fields = _.transform(type.getFields(), (out, fieldConfig, key) => {\n      const type = convertToInputFilter(\n        `${prefix}${_.upperFirst(key)}`,\n        fieldConfig.type\n      )\n      if (type) out[key] = { type }\n    })\n    if (Object.keys(fields).length === 0) {\n      return null\n    }\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}{type.name}`),\n      fields: fields,\n    })\n  } else if (type instanceof GraphQLList) {\n    const innerType = type.ofType\n    const innerFilter = convertToInputFilter(`${prefix}ListElem`, innerType)\n    const innerFields = innerFilter ? innerFilter.getFields() : {}\n\n    let fields\n    if (innerType instanceof GraphQLInputObjectType) {\n      fields = {\n        elemMatch: { type: innerFilter },\n      }\n    } else {\n      fields = {\n        ...innerFields,\n        in: { type: new GraphQLList(innerType) },\n      }\n    }\n\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}QueryList`),\n      fields,\n    })\n  } else if (type instanceof GraphQLNonNull) {\n    return convertToInputFilter(prefix, type.ofType)\n  }\n\n  return null\n}\n\nfunction extractFieldNamesFromInputField(\n  prefix: string,\n  type: GraphQLInputType,\n  accu: string[]\n) {\n  if (type instanceof GraphQLScalarType || type instanceof GraphQLList) {\n    accu.push(prefix)\n  } else if (type instanceof GraphQLInputObjectType) {\n    _.each(type.getFields(), (fieldConfig, key) => {\n      extractFieldNamesFromInputField(\n        `${prefix}___${key}`,\n        fieldConfig.type,\n        accu\n      )\n    })\n  } else if (type instanceof GraphQLNonNull) {\n    extractFieldNamesFromInputField(prefix, type.ofType, accu)\n  }\n}\n\n// convert output fields to output fields and a list of fields to sort on\nexport function inferInputObjectStructureFromFields({\n  fields,\n  typeName = ``,\n}: any) {\n  const inferredFields = {}\n  const sort = []\n\n  _.each(fields, (fieldConfig, key) => {\n    const inputType = convertToInputType(fieldConfig.type, new Set())\n    const inputFilter =\n      inputType && convertToInputFilter(_.upperFirst(key), inputType)\n\n    if (!inputFilter) return\n\n    inferredFields[createKey(key)] = { type: inputFilter }\n\n    // Add sorting (but only to the top level).\n    if (typeName) {\n      extractFieldNamesFromInputField(key, inputType, sort)\n    }\n  })\n\n  return { inferredFields, sort }\n}\n"],"file":"infer-graphql-input-fields-from-fields.js"}