{"version":3,"sources":["../../src/schema/build-node-types.js"],"names":["_","require","GraphQLObjectType","GraphQLNonNull","GraphQLID","GraphQLList","tracer","globalTracer","apiRunner","inferObjectStructureFromNodes","inferInputObjectStructureFromFields","inferInputObjectStructureFromNodes","nodeInterface","getNodes","getNode","getNodeAndSavePathDependency","createPageDependency","setFileNodeRootType","clearTypeExampleValues","nodesCache","Map","module","exports","parentSpan","spanArgs","childOf","span","startSpan","types","groupBy","filter","node","internal","ignoreType","type","processedTypes","createNodeFields","defaultNodeFields","id","description","parent","resolve","a","context","path","children","map","childNodesByType","nodes","flatMap","camelCase","undefined","value","Object","keys","forEach","childNodeType","maxChildCount","maxBy","values","c","g","length","nodeObjectType","filteredNodes","n","nodeId","childNode","find","inferredFields","ignoreFields","fieldsFromPlugins","createType","typeName","intermediateType","name","traceId","mergedFieldsFromPlugins","merge","inferredInputFieldsFromPlugins","fields","gqlType","interfaces","proccesedType","isTypeOf","inferedInputFields","filterFields","args","runSift","latestNodes","process","env","NODE_ENV","has","get","set","isObject","Promise","all","finish"],"mappings":"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","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst {\n  GraphQLObjectType,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLList,\n} = require(`graphql`)\nconst tracer = require(`opentracing`).globalTracer()\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst { inferObjectStructureFromNodes } = require(`./infer-graphql-type`)\nconst {\n  inferInputObjectStructureFromFields,\n} = require(`./infer-graphql-input-fields-from-fields`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst { nodeInterface } = require(`./node-interface`)\nconst { getNodes, getNode, getNodeAndSavePathDependency } = require(`../redux`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\nconst { setFileNodeRootType } = require(`./types/type-file`)\nconst { clearTypeExampleValues } = require(`./data-tree-utils`)\n\nimport type { ProcessedNodeType } from \"./infer-graphql-type\"\n\ntype TypeMap = {\n  [typeName: string]: ProcessedNodeType,\n}\n\nconst nodesCache = new Map()\n\nmodule.exports = async ({ parentSpan }) => {\n  const spanArgs = parentSpan ? { childOf: parentSpan } : {}\n  const span = tracer.startSpan(`build schema`, spanArgs)\n\n  const types = _.groupBy(\n    getNodes().filter(node => node.internal && !node.internal.ignoreType),\n    node => node.internal.type\n  )\n  const processedTypes: TypeMap = {}\n\n  clearTypeExampleValues()\n\n  // Reset stored File type to not point to outdated type definition\n  setFileNodeRootType(null)\n\n  function createNodeFields(type: ProcessedNodeType) {\n    const defaultNodeFields = {\n      id: {\n        type: new GraphQLNonNull(GraphQLID),\n        description: `The id of this node.`,\n      },\n      parent: {\n        type: nodeInterface,\n        description: `The parent of this node.`,\n        resolve(node, a, context) {\n          return getNodeAndSavePathDependency(node.parent, context.path)\n        },\n      },\n      children: {\n        type: new GraphQLList(nodeInterface),\n        description: `The children of this node.`,\n        resolve(node, a, { path }) {\n          return node.children.map(id => getNodeAndSavePathDependency(id, path))\n        },\n      },\n    }\n\n    // Create children fields for each type of children e.g.\n    // \"childrenMarkdownRemark\".\n    const childNodesByType = _(type.nodes)\n      .flatMap(({ children }) => children.map(getNode))\n      .groupBy(\n        node => (node.internal ? _.camelCase(node.internal.type) : undefined)\n      )\n      .value()\n\n    Object.keys(childNodesByType).forEach(childNodeType => {\n      // Does this child type have one child per parent or multiple?\n      const maxChildCount = _.maxBy(\n        _.values(_.groupBy(childNodesByType[childNodeType], c => c.parent)),\n        g => g.length\n      ).length\n\n      if (maxChildCount > 1) {\n        defaultNodeFields[_.camelCase(`children ${childNodeType}`)] = {\n          type: new GraphQLList(processedTypes[childNodeType].nodeObjectType),\n          description: `The children of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const filteredNodes = node.children\n              .map(id => getNode(id))\n              .filter(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            // Add dependencies for the path\n            filteredNodes.forEach(n =>\n              createPageDependency({\n                path,\n                nodeId: n.id,\n              })\n            )\n            return filteredNodes\n          },\n        }\n      } else {\n        defaultNodeFields[_.camelCase(`child ${childNodeType}`)] = {\n          type: processedTypes[childNodeType].nodeObjectType,\n          description: `The child of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const childNode = node.children\n              .map(id => getNode(id))\n              .find(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            if (childNode) {\n              // Add dependencies for the path\n              createPageDependency({\n                path,\n                nodeId: childNode.id,\n              })\n              return childNode\n            }\n            return null\n          },\n        }\n      }\n    })\n\n    const inferredFields = inferObjectStructureFromNodes({\n      nodes: type.nodes,\n      types: _.values(processedTypes),\n      ignoreFields: Object.keys(type.fieldsFromPlugins),\n    })\n\n    return {\n      ...defaultNodeFields,\n      ...inferredFields,\n      ...type.fieldsFromPlugins,\n    }\n  }\n\n  async function createType(nodes, typeName) {\n    const intermediateType = {}\n\n    intermediateType.name = typeName\n    intermediateType.nodes = nodes\n\n    const fieldsFromPlugins = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n      type: intermediateType,\n      traceId: `initial-setFieldsOnGraphQLNodeType`,\n      parentSpan: span,\n    })\n\n    const mergedFieldsFromPlugins = _.merge(...fieldsFromPlugins)\n\n    const inferredInputFieldsFromPlugins = inferInputObjectStructureFromFields({\n      fields: mergedFieldsFromPlugins,\n    })\n\n    const gqlType = new GraphQLObjectType({\n      name: typeName,\n      description: `Node of type ${typeName}`,\n      interfaces: [nodeInterface],\n      fields: () => createNodeFields(proccesedType),\n      isTypeOf: value => value.internal.type === typeName,\n    })\n\n    const inferedInputFields = inferInputObjectStructureFromNodes({\n      nodes,\n      typeName,\n    })\n\n    const filterFields = _.merge(\n      {},\n      inferedInputFields.inferredFields,\n      inferredInputFieldsFromPlugins.inferredFields\n    )\n\n    const proccesedType: ProcessedNodeType = {\n      ...intermediateType,\n      fieldsFromPlugins: mergedFieldsFromPlugins,\n      nodeObjectType: gqlType,\n      node: {\n        name: typeName,\n        type: gqlType,\n        args: filterFields,\n        resolve(a, args, context) {\n          const runSift = require(`./run-sift`)\n          let latestNodes\n          if (\n            process.env.NODE_ENV === `production` &&\n            nodesCache.has(typeName)\n          ) {\n            latestNodes = nodesCache.get(typeName)\n          } else {\n            latestNodes = _.filter(\n              getNodes(),\n              n => n.internal.type === typeName\n            )\n            nodesCache.set(typeName, latestNodes)\n          }\n          if (!_.isObject(args)) {\n            args = {}\n          }\n          return runSift({\n            args: {\n              filter: {\n                ...args,\n              },\n            },\n            nodes: latestNodes,\n            path: context.path ? context.path : ``,\n            typeName: typeName,\n            type: gqlType,\n          })\n        },\n      },\n    }\n\n    processedTypes[_.camelCase(typeName)] = proccesedType\n\n    // Special case to construct linked file type used by type inferring\n    if (typeName === `File`) {\n      setFileNodeRootType(gqlType)\n    }\n  }\n\n  // Create node types and node fields for nodes that have a resolve function.\n  await Promise.all(_.map(types, createType))\n\n  span.finish()\n\n  return processedTypes\n}\n"],"file":"build-node-types.js"}