{"version":3,"sources":["../../src/schema/index.js"],"names":["_","require","GraphQLSchema","GraphQLObjectType","mergeSchemas","buildNodeTypes","nodeConnections","store","invariant","clearUnionTypes","buildNodesSchema","fields","query","name","module","exports","build","parentSpan","typesGQL","connections","buildAll","values","nodes","mapValues","isEmpty","thirdPartySchemas","getState","gatsbySchema","schema","schemas","dispatch","type","payload"],"mappings":";;;;;;AACA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;iBAC6CA,OAAO,CAAE,SAAF,C;MAA5CC,a,YAAAA,a;MAAeC,iB,YAAAA,iB;;kBACEF,OAAO,CAAE,eAAF,C;MAAxBG,Y,aAAAA,Y;;AAER,MAAMC,cAAc,GAAGJ,OAAO,CAAE,oBAAF,CAA9B;;AACA,MAAMK,eAAe,GAAGL,OAAO,CAAE,0BAAF,CAA/B;;kBACkBA,OAAO,CAAE,UAAF,C;MAAjBM,K,aAAAA,K;;AACR,MAAMC,SAAS,GAAGP,OAAO,CAAE,WAAF,CAAzB;;kBAC4BA,OAAO,CAAE,sBAAF,C;MAA3BQ,e,aAAAA,e;;AAER,SAASC,gBAAT,CAA0BC,MAA1B,EAAkC;AAChC,SAAO,IAAIT,aAAJ,CAAkB;AACvBU,IAAAA,KAAK,EAAE,IAAIT,iBAAJ,CAAsB;AAC3BU,MAAAA,IAAI,EAAG,eADoB;AAE3BF,MAAAA;AAF2B,KAAtB;AADgB,GAAlB,CAAP;AAMD;;AACDG,MAAM,CAACC,OAAP,CAAeL,gBAAf,GAAkCA,gBAAlC;;AAEAI,MAAM,CAACC,OAAP,CAAeC,KAAf;AAAA;AAAA;AAAA,6CAAuB,WAAO;AAAEC,IAAAA;AAAF,GAAP,EAA0B;AAC/CR,IAAAA,eAAe;AACf,UAAMS,QAAQ,SAASb,cAAc,CAAC;AAAEY,MAAAA;AAAF,KAAD,CAArC;AACA,UAAME,WAAW,GAAGb,eAAe,CAACc,QAAhB,CAAyBpB,CAAC,CAACqB,MAAF,CAASH,QAAT,CAAzB,CAApB,CAH+C,CAK/C;;AACA,UAAMI,KAAK,GAAGtB,CAAC,CAACuB,SAAF,CAAYL,QAAZ,EAAuB,MAAvB,CAAd;;AAEAV,IAAAA,SAAS,CAAC,CAACR,CAAC,CAACwB,OAAF,CAAUF,KAAV,CAAF,EAAqB,kCAArB,CAAT;AACAd,IAAAA,SAAS,CAAC,CAACR,CAAC,CAACwB,OAAF,CAAUL,WAAV,CAAF,EAA2B,wCAA3B,CAAT;AAEA,UAAMM,iBAAiB,GAAGlB,KAAK,CAACmB,QAAN,GAAiBD,iBAAjB,IAAsC,EAAhE;AAEA,UAAME,YAAY,GAAGjB,gBAAgB,mBAAMS,WAAN,EAAsBG,KAAtB,EAArC;AAEA,UAAMM,MAAM,GAAGxB,YAAY,CAAC;AAC1ByB,MAAAA,OAAO,EAAE,CAACF,YAAD,EAAe,GAAGF,iBAAlB;AADiB,KAAD,CAA3B;AAIAlB,IAAAA,KAAK,CAACuB,QAAN,CAAe;AACbC,MAAAA,IAAI,EAAG,YADM;AAEbC,MAAAA,OAAO,EAAEJ;AAFI,KAAf;AAID,GAvBD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* @flow */\nconst _ = require(`lodash`)\nconst { GraphQLSchema, GraphQLObjectType } = require(`graphql`)\nconst { mergeSchemas } = require(`graphql-tools`)\n\nconst buildNodeTypes = require(`./build-node-types`)\nconst nodeConnections = require(`./build-node-connections`)\nconst { store } = require(`../redux`)\nconst invariant = require(`invariant`)\nconst { clearUnionTypes } = require(`./infer-graphql-type`)\n\nfunction buildNodesSchema(fields) {\n  return new GraphQLSchema({\n    query: new GraphQLObjectType({\n      name: `RootQueryType`,\n      fields,\n    }),\n  })\n}\nmodule.exports.buildNodesSchema = buildNodesSchema\n\nmodule.exports.build = async ({ parentSpan }) => {\n  clearUnionTypes()\n  const typesGQL = await buildNodeTypes({ parentSpan })\n  const connections = nodeConnections.buildAll(_.values(typesGQL))\n\n  // Pull off just the graphql node from each type object.\n  const nodes = _.mapValues(typesGQL, `node`)\n\n  invariant(!_.isEmpty(nodes), `There are no available GQL nodes`)\n  invariant(!_.isEmpty(connections), `There are no available GQL connections`)\n\n  const thirdPartySchemas = store.getState().thirdPartySchemas || []\n\n  const gatsbySchema = buildNodesSchema({ ...connections, ...nodes })\n\n  const schema = mergeSchemas({\n    schemas: [gatsbySchema, ...thirdPartySchemas],\n  })\n\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n}\n"],"file":"index.js"}