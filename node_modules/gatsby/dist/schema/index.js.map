{"version":3,"sources":["../../src/schema/index.js"],"names":["_","require","GraphQLSchema","GraphQLObjectType","mergeSchemas","buildNodeTypes","buildNodeConnections","store","invariant","clearUnionTypes","module","exports","parentSpan","typesGQL","connections","values","nodes","mapValues","isEmpty","thirdPartySchemas","getState","gatsbySchema","query","name","fields","schema","schemas","dispatch","type","payload"],"mappings":";;;;;;AACA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;iBAC6CA,OAAO,CAAE,SAAF,C;MAA5CC,a,YAAAA,a;MAAeC,iB,YAAAA,iB;;kBACEF,OAAO,CAAE,eAAF,C;MAAxBG,Y,aAAAA,Y;;AAER,MAAMC,cAAc,GAAGJ,OAAO,CAAE,oBAAF,CAA9B;;AACA,MAAMK,oBAAoB,GAAGL,OAAO,CAAE,0BAAF,CAApC;;kBACkBA,OAAO,CAAE,UAAF,C;MAAjBM,K,aAAAA,K;;AACR,MAAMC,SAAS,GAAGP,OAAO,CAAE,WAAF,CAAzB;;kBAC4BA,OAAO,CAAE,sBAAF,C;MAA3BQ,e,aAAAA,e;;AAERC,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA,6CAAiB,WAAO;AAAEC,IAAAA;AAAF,GAAP,EAA0B;AACzCH,IAAAA,eAAe;AACf,UAAMI,QAAQ,SAASR,cAAc,CAAC;AAAEO,MAAAA;AAAF,KAAD,CAArC;AACA,UAAME,WAAW,GAAGR,oBAAoB,CAACN,CAAC,CAACe,MAAF,CAASF,QAAT,CAAD,CAAxC,CAHyC,CAKzC;;AACA,UAAMG,KAAK,GAAGhB,CAAC,CAACiB,SAAF,CAAYJ,QAAZ,EAAuB,MAAvB,CAAd;;AAEAL,IAAAA,SAAS,CAAC,CAACR,CAAC,CAACkB,OAAF,CAAUF,KAAV,CAAF,EAAqB,kCAArB,CAAT;AACAR,IAAAA,SAAS,CAAC,CAACR,CAAC,CAACkB,OAAF,CAAUJ,WAAV,CAAF,EAA2B,wCAA3B,CAAT;AAEA,UAAMK,iBAAiB,GAAGZ,KAAK,CAACa,QAAN,GAAiBD,iBAAjB,IAAsC,EAAhE;AAEA,UAAME,YAAY,GAAG,IAAInB,aAAJ,CAAkB;AACrCoB,MAAAA,KAAK,EAAE,IAAInB,iBAAJ,CAAsB;AAC3BoB,QAAAA,IAAI,EAAG,eADoB;AAE3BC,QAAAA,MAAM,oBAAOV,WAAP,EAAuBE,KAAvB;AAFqB,OAAtB;AAD8B,KAAlB,CAArB;AAOA,UAAMS,MAAM,GAAGrB,YAAY,CAAC;AAC1BsB,MAAAA,OAAO,EAAE,CAACL,YAAD,EAAe,GAAGF,iBAAlB;AADiB,KAAD,CAA3B;AAIAZ,IAAAA,KAAK,CAACoB,QAAN,CAAe;AACbC,MAAAA,IAAI,EAAG,YADM;AAEbC,MAAAA,OAAO,EAAEJ;AAFI,KAAf;AAID,GA5BD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* @flow */\nconst _ = require(`lodash`)\nconst { GraphQLSchema, GraphQLObjectType } = require(`graphql`)\nconst { mergeSchemas } = require(`graphql-tools`)\n\nconst buildNodeTypes = require(`./build-node-types`)\nconst buildNodeConnections = require(`./build-node-connections`)\nconst { store } = require(`../redux`)\nconst invariant = require(`invariant`)\nconst { clearUnionTypes } = require(`./infer-graphql-type`)\n\nmodule.exports = async ({ parentSpan }) => {\n  clearUnionTypes()\n  const typesGQL = await buildNodeTypes({ parentSpan })\n  const connections = buildNodeConnections(_.values(typesGQL))\n\n  // Pull off just the graphql node from each type object.\n  const nodes = _.mapValues(typesGQL, `node`)\n\n  invariant(!_.isEmpty(nodes), `There are no available GQL nodes`)\n  invariant(!_.isEmpty(connections), `There are no available GQL connections`)\n\n  const thirdPartySchemas = store.getState().thirdPartySchemas || []\n\n  const gatsbySchema = new GraphQLSchema({\n    query: new GraphQLObjectType({\n      name: `RootQueryType`,\n      fields: { ...connections, ...nodes },\n    }),\n  })\n\n  const schema = mergeSchemas({\n    schemas: [gatsbySchema, ...thirdPartySchemas],\n  })\n\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n}\n"],"file":"index.js"}