{"version":3,"sources":["../../src/redux/nodes.js"],"names":["_","require","Promise","store","getNodes","nodes","getState","Array","from","values","exports","getNode","id","get","getNodesByType","type","filter","node","internal","hasNodeChanged","digest","contentDigest","loadNodeContent","isString","content","resolve","plugin","flattenedPlugins","find","plug","name","owner","Error","then","getNodeAndSavePathDependency","path","createPageDependency","nodeId"],"mappings":";;AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAE,UAAF,CAAvB;;iBACkBA,OAAO,CAAE,SAAF,C;MAAjBE,K,YAAAA,K;AAER;;;;;;;AAKA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAMC,KAAK,GAAGF,KAAK,CAACG,QAAN,GAAiBD,KAA/B;;AACA,MAAIA,KAAJ,EAAW;AACT,WAAOE,KAAK,CAACC,IAAN,CAAWH,KAAK,CAACI,MAAN,EAAX,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF,CAPD;;AASAC,OAAO,CAACN,QAAR,GAAmBA,QAAnB;;AAEA,MAAMO,OAAO,GAAGC,EAAE,IAAIT,KAAK,CAACG,QAAN,GAAiBD,KAAjB,CAAuBQ,GAAvB,CAA2BD,EAA3B,CAAtB;AAEA;;;;;;;AAKAF,OAAO,CAACC,OAAR,GAAkBA,OAAlB;;AAEAD,OAAO,CAACI,cAAR,GAAyBC,IAAI,IAC3BX,QAAQ,GAAGY,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACC,QAAL,CAAcH,IAAd,KAAuBA,IAAjD,CADF;AAGA;;;;;;;;;AAOAL,OAAO,CAACS,cAAR,GAAyB,CAACP,EAAD,EAAKQ,MAAL,KAAgB;AACvC,QAAMH,IAAI,GAAGd,KAAK,CAACG,QAAN,GAAiBD,KAAjB,CAAuBQ,GAAvB,CAA2BD,EAA3B,CAAb;;AACA,MAAI,CAACK,IAAL,EAAW;AACT,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAOA,IAAI,CAACC,QAAL,CAAcG,aAAd,KAAgCD,MAAvC;AACD;AACF,CAPD;AASA;;;;;;;;AAMAV,OAAO,CAACY,eAAR,GAA0BL,IAAI,IAAI;AAChC,MAAIjB,CAAC,CAACuB,QAAF,CAAWN,IAAI,CAACC,QAAL,CAAcM,OAAzB,CAAJ,EAAuC;AACrC,WAAOtB,OAAO,CAACuB,OAAR,CAAgBR,IAAI,CAACC,QAAL,CAAcM,OAA9B,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAItB,OAAJ,CAAYuB,OAAO,IAAI;AAC5B;AACA,YAAMC,MAAM,GAAGvB,KAAK,CACjBG,QADY,GAEZqB,gBAFY,CAEKC,IAFL,CAEUC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcb,IAAI,CAACC,QAAL,CAAca,KAF9C,CAAf;;AAF4B,wBAKA9B,OAAO,CAACyB,MAAM,CAACD,OAAR,CALP;AAAA,YAKpBH,eALoB,aAKpBA,eALoB;;AAM5B,UAAI,CAACA,eAAL,EAAsB;AACpB,cAAM,IAAIU,KAAJ,CACH,sDAAqDN,MAAM,CAACI,IAAK,EAD9D,CAAN;AAGD;;AAED,aAAOR,eAAe,CAACL,IAAD,CAAf,CAAsBgB,IAAtB,CAA2BT,OAAO,IAAI;AAC3C;AACAC,QAAAA,OAAO,CAACD,OAAD,CAAP;AACD,OAHM,CAAP;AAID,KAhBM,CAAP;AAiBD;AACF,CAtBD;AAwBA;;;;;;;;;AAOAd,OAAO,CAACwB,4BAAR,GAAuC,CAACtB,EAAD,EAAKuB,IAAL,KAAc;AACnD,QAAMC,oBAAoB,GAAGnC,OAAO,CAAE,+BAAF,CAApC;;AACA,QAAMgB,IAAI,GAAGN,OAAO,CAACC,EAAD,CAApB;AACAwB,EAAAA,oBAAoB,CAAC;AAAED,IAAAA,IAAF;AAAQE,IAAAA,MAAM,EAAEzB;AAAhB,GAAD,CAApB;AACA,SAAOK,IAAP;AACD,CALD","sourcesContent":["const _ = require(`lodash`)\nconst Promise = require(`bluebird`)\nconst { store } = require(`./index`)\n\n/**\n * Get all nodes from redux store.\n *\n * @returns {Array}\n */\nconst getNodes = () => {\n  const nodes = store.getState().nodes\n  if (nodes) {\n    return Array.from(nodes.values())\n  } else {\n    return []\n  }\n}\n\nexports.getNodes = getNodes\n\nconst getNode = id => store.getState().nodes.get(id)\n\n/** Get node by id from store.\n *\n * @param {string} id\n * @returns {Object}\n */\nexports.getNode = getNode\n\nexports.getNodesByType = type =>\n  getNodes().filter(node => node.internal.type === type)\n\n/**\n * Determine if node has changed.\n *\n * @param {string} id\n * @param {string} digest\n * @returns {boolean}\n */\nexports.hasNodeChanged = (id, digest) => {\n  const node = store.getState().nodes.get(id)\n  if (!node) {\n    return true\n  } else {\n    return node.internal.contentDigest !== digest\n  }\n}\n\n/**\n * Get content for a node from the plugin that created it.\n *\n * @param {Object} node\n * @returns {promise}\n */\nexports.loadNodeContent = node => {\n  if (_.isString(node.internal.content)) {\n    return Promise.resolve(node.internal.content)\n  } else {\n    return new Promise(resolve => {\n      // Load plugin's loader function\n      const plugin = store\n        .getState()\n        .flattenedPlugins.find(plug => plug.name === node.internal.owner)\n      const { loadNodeContent } = require(plugin.resolve)\n      if (!loadNodeContent) {\n        throw new Error(\n          `Could not find function loadNodeContent for plugin ${plugin.name}`\n        )\n      }\n\n      return loadNodeContent(node).then(content => {\n        // TODO update node's content field here.\n        resolve(content)\n      })\n    })\n  }\n}\n\n/**\n * Get node and save path dependency.\n *\n * @param {string} id\n * @param {string} path\n * @returns {Object} node\n */\nexports.getNodeAndSavePathDependency = (id, path) => {\n  const createPageDependency = require(`./actions/add-page-dependency`)\n  const node = getNode(id)\n  createPageDependency({ path, nodeId: id })\n  return node\n}\n"],"file":"nodes.js"}