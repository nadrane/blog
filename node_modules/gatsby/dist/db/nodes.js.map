{"version":3,"sources":["../../src/db/nodes.js"],"names":["backend","process","env","GATSBY_DB_NODES","nodesDb","require","Error","module","exports","chooseQueryEngine","queryArgs","runQuery","args","queryFunction"],"mappings":";;AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAAZ,IAAgC,OAAhD;AACA,IAAIC,OAAJ;;AACA,QAAQJ,OAAR;AACE,OAAM,OAAN;AACEI,IAAAA,OAAO,GAAGC,OAAO,CAAE,gBAAF,CAAjB;AACA;;AACF,OAAM,MAAN;AACED,IAAAA,OAAO,GAAGC,OAAO,CAAE,cAAF,CAAjB;AACA;;AACF;AACE,UAAM,IAAIC,KAAJ,CACH,iEADG,CAAN;AARJ;;AAaAC,MAAM,CAACC,OAAP,GAAiBJ,OAAjB,C,CAEA;AACA;AACA;;AAEA,SAASK,iBAAT,CAA2BC,SAA3B,EAAsC;AACpC,MAAIV,OAAO,KAAM,MAAjB,EAAwB;AACtB,UAAM,IAAIM,KAAJ,CAAW,wBAAX,CAAN;AACD,GAFD,MAEO;AACL,WAAOD,OAAO,CAAE,mBAAF,CAAd;AACD;AACF;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,SAASM,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,QAAMC,aAAa,GAAGJ,iBAAiB,CAACG,IAAI,CAACF,SAAN,CAAvC;AAEA,SAAOG,aAAa,CAACD,IAAD,CAApB;AACD;;AAEDL,MAAM,CAACC,OAAP,CAAeG,QAAf,GAA0BA,QAA1B","sourcesContent":["const backend = process.env.GATSBY_DB_NODES || `redux`\nlet nodesDb\nswitch (backend) {\n  case `redux`:\n    nodesDb = require(`../redux/nodes`)\n    break\n  case `loki`:\n    nodesDb = require(`./loki/nodes`)\n    break\n  default:\n    throw new Error(\n      `Unsupported DB nodes backend (value of env var GATSBY_DB_NODES)`\n    )\n}\n\nmodule.exports = nodesDb\n\n/////////////////////////////////////////////////////////////////////\n// Run Query\n/////////////////////////////////////////////////////////////////////\n\nfunction chooseQueryEngine(queryArgs) {\n  if (backend === `loki`) {\n    throw new Error(`loki not supported yet`)\n  } else {\n    return require(`../redux/run-sift`)\n  }\n}\n\n/**\n * Runs the query over all nodes of type. It must first select the\n * appropriate query engine. Sift, or Loki. Sift is used if the query\n * includes plugin fields, i.e those declared by plugins during the\n * `setFieldsOnGraphQLNodeType` API. If it does, then we must iterate\n * through all nodes calling the plugin field to make sure it's\n * realized, then we can perform the query. See `query-sift.js` for\n * more.\n *\n * If the query does *not* include plugin fields, then we can perform\n * a much faster pure data query using loki. See `query-loki.js` for\n * more.\n *\n * @param {Object} args. Object with:\n *\n * {Object} gqlType: built during `./build-node-types.js`\n *\n * {Object} queryArgs: The raw graphql query as a js object. E.g `{\n * filter: { fields { slug: { eq: \"/somepath\" } } } }`\n *\n * {Object} context: The context from the QueryJob\n *\n * {boolean} firstOnly: Whether to return the first found match, or\n * all matching result.\n *\n * @returns {promise} A promise that will eventually be resolved with\n * a collection of matching objects (even if `firstOnly` is true)\n */\nfunction runQuery(args) {\n  const queryFunction = chooseQueryEngine(args.queryArgs)\n\n  return queryFunction(args)\n}\n\nmodule.exports.runQuery = runQuery\n"],"file":"nodes.js"}