{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-watcher.js"],"names":["_","require","chokidar","path","slash","store","emitter","boundActionCreators","queryCompiler","default","report","queueQueryForPathname","runQueuedQueries","runQueuedActions","debug","getQueriesSnapshot","state","getState","snapshot","components","Map","staticQueryComponents","handleComponentsWithRemovedQueries","queries","forEach","c","query","has","componentPath","replaceComponentQuery","queueQueriesForPageComponent","dispatch","type","payload","jsonName","deleteComponentsDependencies","handleQuery","component","isStaticQuery","oldQuery","get","isNewQuery","hash","text","replaceStaticQuery","name","id","length","updateStateAndRunQueries","isFirstRun","then","queriesWillNotRun","queryWillRun","watchComponent","warn","log","stripIndent","clearInactiveComponents","pages","activeTemplates","Set","page","add","exports","extractQueries","process","env","NODE_ENV","watch","program","directory","getPagesForComponent","map","p","values","filter","filesToWatch","watcher","rootDir","debounceCompile","debounce","join","on","filePath","gatsby_executing_command","bootstrapFinished","action","otherPageWithTemplateExists"],"mappings":"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","sourcesContent":["/** *\n * Jobs of this module\n * - Maintain the list of components in the Redux store. So monitor new components\n *   and add/remove components.\n * - Watch components for query changes and extract these and update the store.\n * - Ensure all page queries are run as part of bootstrap and report back when\n *   this is done\n * - Whenever a query changes, re-run all pages that rely on this query.\n ***/\n\nconst _ = require(`lodash`)\nconst chokidar = require(`chokidar`)\nconst path = require(`path`)\nconst slash = require(`slash`)\n\nconst { store, emitter } = require(`../../redux/`)\nconst { boundActionCreators } = require(`../../redux/actions`)\nconst queryCompiler = require(`./query-compiler`).default\nconst report = require(`gatsby-cli/lib/reporter`)\nconst {\n  queueQueryForPathname,\n  runQueuedActions: runQueuedQueries,\n} = require(`./page-query-runner`)\nconst debug = require(`debug`)(`gatsby:query-watcher`)\n\nconst getQueriesSnapshot = () => {\n  const state = store.getState()\n\n  const snapshot = {\n    components: new Map(state.components),\n    staticQueryComponents: new Map(state.staticQueryComponents),\n  }\n\n  return snapshot\n}\n\nconst handleComponentsWithRemovedQueries = (\n  { components, staticQueryComponents },\n  queries\n) => {\n  // If a component previously with a query now doesn't â€” update the\n  // store.\n  components.forEach(c => {\n    if (c.query !== `` && !queries.has(c.componentPath)) {\n      debug(`Page query was removed from ${c.componentPath}`)\n      boundActionCreators.replaceComponentQuery({\n        query: ``,\n        componentPath: c.componentPath,\n      })\n      queueQueriesForPageComponent(c.componentPath)\n    }\n  })\n\n  // If a component had static query and it doesn't have it\n  // anymore - update the store\n  staticQueryComponents.forEach(c => {\n    if (c.query !== `` && !queries.has(c.componentPath)) {\n      debug(`Static query was removed from ${c.componentPath}`)\n      store.dispatch({\n        type: `REMOVE_STATIC_QUERY`,\n        payload: c.jsonName,\n      })\n      boundActionCreators.deleteComponentsDependencies([c.jsonName])\n    }\n  })\n}\n\nconst handleQuery = (\n  { components, staticQueryComponents },\n  query,\n  component\n) => {\n  // If this is a static query\n  // Add action / reducer + watch staticquery files\n  if (query.isStaticQuery) {\n    const oldQuery = staticQueryComponents.get(query.jsonName)\n    const isNewQuery = !oldQuery\n\n    // Compare query text because text is compiled query with any attached\n    // fragments and we want to rerun queries if fragments are edited.\n    // Compare hash because hash is used for identyfing query and\n    // passing data to component in development. Hash can change if user will\n    // format query text, but it doesn't mean that compiled text will change.\n    if (\n      isNewQuery ||\n      oldQuery.hash !== query.hash ||\n      oldQuery.text !== query.text\n    ) {\n      boundActionCreators.replaceStaticQuery({\n        name: query.name,\n        componentPath: query.path,\n        id: query.jsonName,\n        jsonName: query.jsonName,\n        query: query.text,\n        hash: query.hash,\n      })\n\n      debug(\n        `Static query in ${component} ${\n          isNewQuery ? `was added` : `has changed`\n        }.`\n      )\n\n      boundActionCreators.deleteComponentsDependencies([query.jsonName])\n      queueQueryForPathname(query.jsonName)\n    }\n    return true\n\n    // If this is page query\n  } else if (components.has(component)) {\n    if (components.get(component).query !== query.text) {\n      boundActionCreators.replaceComponentQuery({\n        query: query.text,\n        componentPath: component,\n      })\n\n      debug(\n        `Page query in ${component} ${\n          components.get(component).query.length === 0\n            ? `was added`\n            : `has changed`\n        }.`\n      )\n      queueQueriesForPageComponent(component)\n    }\n    return true\n  }\n\n  return false\n}\n\nconst updateStateAndRunQueries = isFirstRun => {\n  const snapshot = getQueriesSnapshot()\n  return queryCompiler().then(queries => {\n    handleComponentsWithRemovedQueries(snapshot, queries)\n\n    let queriesWillNotRun = false\n    queries.forEach((query, component) => {\n      const queryWillRun = handleQuery(snapshot, query, component)\n\n      if (queryWillRun) {\n        watchComponent(component)\n      } else if (isFirstRun) {\n        report.warn(\n          `The GraphQL query in the non-page component \"${component}\" will not be run.`\n        )\n        queriesWillNotRun = true\n      }\n    })\n\n    if (queriesWillNotRun) {\n      report.log(report.stripIndent`\n        Exported queries are only executed for Page components. Instead of an exported\n        query, either co-locate a GraphQL fragment and compose that fragment into the\n        query (or other fragment) of the top-level page that renders this component, or\n        use a <StaticQuery> in this component. For more info on fragments and\n        composition, see http://graphql.org/learn/queries/#fragments and for more\n        information on <StaticQuery>, see https://gatsbyjs.org/docs/static-query\n      `)\n    }\n    runQueuedQueries()\n\n    return null\n  })\n}\n\n/**\n * Removes components templates that aren't used by any page from redux store.\n */\nconst clearInactiveComponents = () => {\n  const { components, pages } = store.getState()\n\n  const activeTemplates = new Set()\n  pages.forEach(page => {\n    // Set will guarantee uniqeness of entires\n    activeTemplates.add(slash(page.component))\n  })\n\n  components.forEach(component => {\n    if (!activeTemplates.has(component.componentPath)) {\n      debug(\n        `${\n          component.componentPath\n        } component was removed because it isn't used by any page`\n      )\n      store.dispatch({\n        type: `REMOVE_TEMPLATE_COMPONENT`,\n        payload: component,\n      })\n    }\n  })\n}\n\nexports.extractQueries = () => {\n  // Remove template components that point to not existing page templates.\n  // We need to do this, because components data is cached and there might\n  // be changes applied when development server isn't running. This is needed\n  // only in initial run, because during development state will be adjusted.\n  clearInactiveComponents()\n\n  return updateStateAndRunQueries(true).then(() => {\n    // During development start watching files to recompile & run\n    // queries on the fly.\n    if (process.env.NODE_ENV !== `production`) {\n      watch(store.getState().program.directory)\n    }\n  })\n}\n\nconst queueQueriesForPageComponent = componentPath => {\n  const pages = getPagesForComponent(componentPath)\n  // Remove page data dependencies before re-running queries because\n  // the changing of the query could have changed the data dependencies.\n  // Re-running the queries will add back data dependencies.\n  boundActionCreators.deleteComponentsDependencies(\n    pages.map(p => p.path || p.id)\n  )\n  pages.forEach(page => queueQueryForPathname(page.path))\n}\n\nconst getPagesForComponent = componentPath => {\n  const state = store.getState()\n  return [...state.pages.values()].filter(\n    p => p.componentPath === componentPath\n  )\n}\n\nconst filesToWatch = new Set()\nlet watcher\nconst watchComponent = componentPath => {\n  // We don't start watching until mid-way through the bootstrap so ignore\n  // new components being added until then. This doesn't affect anything as\n  // when extractQueries is called from bootstrap, we make sure that all\n  // components are being watched.\n  if (\n    process.env.NODE_ENV !== `production` &&\n    !filesToWatch.has(componentPath)\n  ) {\n    filesToWatch.add(componentPath)\n    if (watcher) {\n      watcher.add(componentPath)\n    }\n  }\n}\n\nexports.watchComponent = watchComponent\n\nconst watch = rootDir => {\n  if (watcher) return\n  const debounceCompile = _.debounce(() => {\n    updateStateAndRunQueries()\n  }, 100)\n\n  watcher = chokidar\n    .watch(slash(path.join(rootDir, `/src/**/*.{js,jsx,ts,tsx}`)))\n    .on(`change`, path => {\n      debounceCompile()\n    })\n  filesToWatch.forEach(filePath => watcher.add(filePath))\n}\n\nif (process.env.gatsby_executing_command === `develop`) {\n  let bootstrapFinished = false\n  emitter.on(`BOOTSTRAP_FINISHED`, () => {\n    bootstrapFinished = true\n  })\n  emitter.on(`DELETE_PAGE`, action => {\n    if (bootstrapFinished) {\n      const componentPath = slash(action.payload.component)\n      const { pages } = store.getState()\n      let otherPageWithTemplateExists = false\n      for (let page of pages.values()) {\n        if (slash(page.component) === componentPath) {\n          otherPageWithTemplateExists = true\n          break\n        }\n      }\n      if (!otherPageWithTemplateExists) {\n        store.dispatch({\n          type: `REMOVE_TEMPLATE_COMPONENT`,\n          payload: {\n            componentPath,\n          },\n        })\n      }\n    }\n  })\n}\n"],"file":"query-watcher.js"}