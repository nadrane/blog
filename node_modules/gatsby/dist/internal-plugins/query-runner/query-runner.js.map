{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-runner.js"],"names":["fs","require","report","websocketManager","path","store","generatePathChunkName","formatErrorDetails","mod","resultHashes","module","exports","queryJob","component","getState","schema","program","graphql","query","context","result","errors","errorDetails","Map","set","isPage","JSON","stringify","pluginCreatorId","panicOnBuild","componentPath","Object","assign","pageContext","jsonName","internalComponentName","componentChunkName","updatedAt","pluginCreator___NODE","resultJSON","resultHash","createHash","update","digest","replace","dataPath","hash","process","env","gatsby_executing_command","emitPageData","id","emitStaticQueryData","modInt","toString","resultPath","join","directory","outputFile","dispatch","type","payload","key","value"],"mappings":"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","sourcesContent":["// @flow\n\nimport { graphql as graphqlFunction } from \"graphql\"\nconst fs = require(`fs-extra`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst websocketManager = require(`../../utils/websocket-manager`)\n\nconst path = require(`path`)\nconst { store } = require(`../../redux`)\nconst { generatePathChunkName } = require(`../../utils/js-chunk-names`)\nconst { formatErrorDetails } = require(`./utils`)\nconst mod = require(`hash-mod`)(999)\n\nconst resultHashes = {}\n\ntype QueryJob = {\n  id: string,\n  hash?: string,\n  jsonName: string,\n  query: string,\n  componentPath: string,\n  context: Object,\n  isPage: Boolean,\n}\n\n// Run query\nmodule.exports = async (queryJob: QueryJob, component: Any) => {\n  const { schema, program } = store.getState()\n\n  const graphql = (query, context) =>\n    graphqlFunction(schema, query, context, context, context)\n\n  // Run query\n  let result\n  // Nothing to do if the query doesn't exist.\n  if (!queryJob.query || queryJob.query === ``) {\n    result = {}\n  } else {\n    result = await graphql(queryJob.query, queryJob.context)\n  }\n\n  // If there's a graphql error then log the error. If we're building, also\n  // quit.\n  if (result && result.errors) {\n    const errorDetails = new Map()\n    errorDetails.set(`Errors`, result.errors || [])\n    if (queryJob.isPage) {\n      errorDetails.set(`URL path`, queryJob.context.path)\n      errorDetails.set(\n        `Context`,\n        JSON.stringify(queryJob.context.context, null, 2)\n      )\n    }\n    errorDetails.set(`Plugin`, queryJob.pluginCreatorId || `none`)\n    errorDetails.set(`Query`, queryJob.query)\n\n    report.panicOnBuild(`\nThe GraphQL query from ${queryJob.componentPath} failed.\n\n${formatErrorDetails(errorDetails)}`)\n  }\n\n  // Add the page context onto the results.\n  if (queryJob && queryJob.isPage) {\n    result[`pageContext`] = Object.assign({}, queryJob.context)\n  }\n\n  // Delete internal data from pageContext\n  if (result.pageContext) {\n    delete result.pageContext.jsonName\n    delete result.pageContext.path\n    delete result.pageContext.internalComponentName\n    delete result.pageContext.component\n    delete result.pageContext.componentChunkName\n    delete result.pageContext.updatedAt\n    delete result.pageContext.pluginCreator___NODE\n    delete result.pageContext.pluginCreatorId\n    delete result.pageContext.componentPath\n    delete result.pageContext.context\n  }\n\n  const resultJSON = JSON.stringify(result)\n  const resultHash = require(`crypto`)\n    .createHash(`sha1`)\n    .update(resultJSON)\n    .digest(`base64`)\n    // Remove potentially unsafe characters. This increases chances of collisions\n    // slightly but it should still be very safe + we get a shorter\n    // url vs hex.\n    .replace(/[^a-zA-Z0-9-_]/g, ``)\n\n  let dataPath\n  if (queryJob.isPage) {\n    dataPath = `${generatePathChunkName(queryJob.jsonName)}-${resultHash}`\n  } else {\n    dataPath = queryJob.hash\n  }\n\n  if (process.env.gatsby_executing_command === `develop`) {\n    if (queryJob.isPage) {\n      websocketManager.emitPageData({\n        result,\n        id: queryJob.id,\n      })\n    } else {\n      websocketManager.emitStaticQueryData({\n        result,\n        id: queryJob.id,\n      })\n    }\n  }\n\n  if (resultHashes[queryJob.id] !== resultHash) {\n    resultHashes[queryJob.id] = resultHash\n    let modInt = ``\n    // We leave StaticQuery results at public/static/d\n    // as the babel plugin has that path hard-coded\n    // for importing static query results.\n    if (queryJob.isPage) {\n      modInt = mod(dataPath).toString()\n    }\n\n    // Always write file to public/static/d/ folder.\n    const resultPath = path.join(\n      program.directory,\n      `public`,\n      `static`,\n      `d`,\n      modInt,\n      `${dataPath}.json`\n    )\n\n    if (queryJob.isPage) {\n      dataPath = `${modInt}/${dataPath}`\n    }\n\n    await fs.outputFile(resultPath, resultJSON)\n\n    store.dispatch({\n      type: `SET_JSON_DATA_PATH`,\n      payload: {\n        key: queryJob.jsonName,\n        value: dataPath,\n      },\n    })\n\n    return result\n  }\n\n  return result\n}\n"],"file":"query-runner.js"}