{"version":3,"sources":["../../src/commands/build.js"],"names":["report","require","buildHTML","buildProductionBundle","bootstrap","apiRunnerNode","copyStaticDirectory","initTracer","stopTracer","tracer","globalTracer","reportFailure","msg","err","log","panic","module","exports","program","openTracingConfigFile","buildSpan","startSpan","setTag","directory","parentSpan","graphqlRunner","graphql","activity","activityTimer","start","catch","end","stripIndent","info","process","uptime","finish","build"],"mappings":";;;;;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAE,yBAAF,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAE,cAAF,CAAzB;;AACA,MAAME,qBAAqB,GAAGF,OAAO,CAAE,oBAAF,CAArC;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAE,cAAF,CAAzB;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAE,0BAAF,CAA7B;;AACA,MAAMK,mBAAmB,GAAGL,OAAO,CAAE,gCAAF,CAAnC;;iBACmCA,OAAO,CAAE,iBAAF,C;MAAlCM,U,YAAAA,U;MAAYC,U,YAAAA,U;;AACpB,MAAMC,MAAM,GAAGR,OAAO,CAAE,aAAF,CAAP,CAAuBS,YAAvB,EAAf;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAwC;AACtCb,EAAAA,MAAM,CAACc,GAAP,CAAY,EAAZ;AACAd,EAAAA,MAAM,CAACe,KAAP,CAAaH,GAAb,EAAkBC,GAAlB;AACD;;AAUDG,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA,+CAAiB,WAAqBC,OAArB,EAAyC;AACxDX,IAAAA,UAAU,CAACW,OAAO,CAACC,qBAAT,CAAV;AAEA,UAAMC,SAAS,GAAGX,MAAM,CAACY,SAAP,CAAkB,OAAlB,CAAlB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAkB,WAAlB,EAA8BJ,OAAO,CAACK,SAAtC;;AAJwD,uBAMxBnB,SAAS,mBACpCc,OADoC;AAEvCM,MAAAA,UAAU,EAAEJ;AAF2B,OANe;AAAA,UAMhDK,aANgD,QAMhDA,aANgD;;AAWxD,UAAMpB,aAAa,CAAE,YAAF,EAAe;AAChCqB,MAAAA,OAAO,EAAED,aADuB;AAEhCD,MAAAA,UAAU,EAAEJ;AAFoB,KAAf,CAAnB,CAXwD,CAgBxD;AACA;;AACAd,IAAAA,mBAAmB;AAEnB,QAAIqB,QAAJ;AACAA,IAAAA,QAAQ,GAAG3B,MAAM,CAAC4B,aAAP,CACR,gDADQ,EAET;AAAEJ,MAAAA,UAAU,EAAEJ;AAAd,KAFS,CAAX;AAIAO,IAAAA,QAAQ,CAACE,KAAT;AACA,UAAM1B,qBAAqB,CAACe,OAAD,CAArB,CAA+BY,KAA/B,CAAqCjB,GAAG,IAAI;AAChDF,MAAAA,aAAa,CAAE,sCAAF,EAAyCE,GAAzC,CAAb;AACD,KAFK,CAAN;AAGAc,IAAAA,QAAQ,CAACI,GAAT;AAEAJ,IAAAA,QAAQ,GAAG3B,MAAM,CAAC4B,aAAP,CAAsB,gCAAtB,EAAuD;AAChEJ,MAAAA,UAAU,EAAEJ;AADoD,KAAvD,CAAX;AAGAO,IAAAA,QAAQ,CAACE,KAAT;AACA,UAAM3B,SAAS,CAACgB,OAAD,EAAUS,QAAV,CAAT,CAA6BG,KAA7B,CAAmCjB,GAAG,IAAI;AAC9CF,MAAAA,aAAa,CACXX,MAAM,CAACgC,WAAY;;;;OADR,EAMXnB,GANW,CAAb;AAQD,KATK,CAAN;AAUAc,IAAAA,QAAQ,CAACI,GAAT;AAEA,UAAM1B,aAAa,CAAE,aAAF,EAAgB;AACjCqB,MAAAA,OAAO,EAAED,aADwB;AAEjCD,MAAAA,UAAU,EAAEJ;AAFqB,KAAhB,CAAnB;AAKApB,IAAAA,MAAM,CAACiC,IAAP,CAAa,oBAAmBC,OAAO,CAACC,MAAR,EAAiB,MAAjD;AAEAf,IAAAA,SAAS,CAACgB,MAAV;AAEA,UAAM5B,UAAU,EAAhB;AACD,GAzDD;;AAAA,kBAAgC6B,KAAhC;AAAA;AAAA;AAAA","sourcesContent":["/* @flow */\n\nconst report = require(`gatsby-cli/lib/reporter`)\nconst buildHTML = require(`./build-html`)\nconst buildProductionBundle = require(`./build-javascript`)\nconst bootstrap = require(`../bootstrap`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst copyStaticDirectory = require(`../utils/copy-static-directory`)\nconst { initTracer, stopTracer } = require(`../utils/tracer`)\nconst tracer = require(`opentracing`).globalTracer()\n\nfunction reportFailure(msg, err: Error) {\n  report.log(``)\n  report.panic(msg, err)\n}\n\ntype BuildArgs = {\n  directory: string,\n  sitePackageJson: object,\n  prefixPaths: boolean,\n  noUglify: boolean,\n  openTracingConfigFile: string,\n}\n\nmodule.exports = async function build(program: BuildArgs) {\n  initTracer(program.openTracingConfigFile)\n\n  const buildSpan = tracer.startSpan(`build`)\n  buildSpan.setTag(`directory`, program.directory)\n\n  const { graphqlRunner } = await bootstrap({\n    ...program,\n    parentSpan: buildSpan,\n  })\n\n  await apiRunnerNode(`onPreBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirectory()\n\n  let activity\n  activity = report.activityTimer(\n    `Building production JavaScript and CSS bundles`,\n    { parentSpan: buildSpan }\n  )\n  activity.start()\n  await buildProductionBundle(program).catch(err => {\n    reportFailure(`Generating JavaScript bundles failed`, err)\n  })\n  activity.end()\n\n  activity = report.activityTimer(`Building static HTML for pages`, {\n    parentSpan: buildSpan,\n  })\n  activity.start()\n  await buildHTML(program, activity).catch(err => {\n    reportFailure(\n      report.stripIndent`\n        Building static HTML for pages failed\n\n        See our docs page on debugging HTML builds for help https://goo.gl/yL9lND\n      `,\n      err\n    )\n  })\n  activity.end()\n\n  await apiRunnerNode(`onPostBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  report.info(`Done building in ${process.uptime()} sec`)\n\n  buildSpan.finish()\n\n  await stopTracer()\n}\n"],"file":"build.js"}