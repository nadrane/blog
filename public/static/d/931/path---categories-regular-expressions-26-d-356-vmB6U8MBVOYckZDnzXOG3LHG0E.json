{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"\nI stumbled upon an [article](https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html) the other day where Rob Pike implements a rudimentary regular expression engine in c. I converted his code to Javascript and added test specs so that someone can self-guide themselves through the creation of the regex engine. The specs and solution can be found in this [GitHub repository](https://github.com/nadrane/build-your-own-regex). This blog post walks through my solution.\n\n","slug":"build-your-own-regex","frontmatter":{"title":"Build a Regex Engine in Less than 40 Lines of Code","date":"2017-11-28T11:36:04.000Z"}}},{"node":{"excerpt":"\nI posted my article [Build Your Own Regex Engine](https://nickdrane.com/build-your-own-regex/) on Reddit the other day, and one of the commenters claimed that the implementation should be trivial to break. Since I had already tested my program against a customized suite of tests, the remark got me thinking about how I could further increase my confidence in the correctness of my program. One extremely low cost however effective strategy for identifying faults in software is known as fuzzing.\n\n","slug":"regex-and-automated-test-fuzzing","frontmatter":{"title":"Regex And Automated Test Fuzzing","date":"2017-12-06T00:00:00.000Z"}}}]}},"pageContext":{"category":"Regular Expressions"}}