{"data":{"allMarkdownRemark":{"totalCount":12,"edges":[{"node":{"excerpt":"\nTwo months ago I purchased a GPS device and associated service plan from [SPOT](https://www.findmespot.com/en/). Today, upon trying to cancel the service, the customer service representative informed me that I had accidentally enrolled myself into a 1 year, $250 contract and that I was unable to cancel. He told me that if I blocked the monthly charges against my credit card that they would report the debt to a collections agency. I was initially upset but soon realized it was a great opportunity to talk about ethics in software engineering.\n\n","slug":"ethical-engineering-for-the-average-engineer","frontmatter":{"title":"Ethical Engineering for the Average Engineer","date":"2018-09-16T15:41:16.000Z"}}},{"node":{"excerpt":"\nReact has taken the web development community by a storm, and with it functional programming concepts have embedded themselves in the mainstream. One common statement you will often read is that all state in React should be immutable, and this practice is justified as necessary for performance reasons. This statement is entirely true, but it only tells half the truth. Immutability alone will not yield any performance gains in React (it'll actually make things slower).\n\n","slug":"leveraging-immutability-in-react","frontmatter":{"title":"Leveraging Immutability in React","date":"2017-09-27T09:30:27.000Z"}}},{"node":{"excerpt":"\nA client approached me with a puzzling problem:\n\nAt Fraight, we have an omnisearch interface backed by an Elasticsearch datastore. The interface allows users yo type a freetext query and get a list of database records sorted by relevancy. At it's core, this is a simple problem: if the user types in `Joe`, return all people whose name contains the word `Joe`. And indeed, returning all the `Joe's` in the system is trivial; the problem is that we worked hundreds, possibly even thousands of `Joes`. How do we identify the particular `Joe` that we care about?\n\n","slug":"optimizing-elasticsearch-score","frontmatter":{"title":"Optimizing Elasticsearch Score: How to Rank and Differentiate Similar Records","date":"2017-10-11T00:00:00.000Z"}}},{"node":{"excerpt":"\n\nI posted my article [Build Your Own Regex Engine](https://nickdrane.com/build-your-own-regex/) on Reddit the other day, and one of the commenters claimed that the implementation should be trivial to break. Since I had already tested my program against a customized suite of tests, the remark got me thinking about how I could further increase my confidence in the correctness of my program. One extremely low cost however effective strategy for identifying faults in software is known as fuzzing.\n\n","slug":"regex-and-automated-test-fuzzing","frontmatter":{"title":"Regex And Automated Test Fuzzing","date":"2017-12-06T00:00:00.000Z"}}},{"node":{"excerpt":"\nI'm currently contracted to create a web service using some data from a third party Angular application. I worked off a proof of concept codebase that used Chrome's new [Puppeteer](https://github.com/GoogleChrome/puppeteer) API to scrape this site. I strongly regret not starting from scratch.\n\n","slug":"scraping-the-web-with-puppeteer-lessons-learned","frontmatter":{"title":"Scraping the Web with Puppeteer: Lessons Learned","date":"2017-12-09T15:35:13.000Z"}}},{"node":{"excerpt":"\nI recently wanted to ingest a [line-delimited](https://en.wikipedia.org/wiki/JSON_streaming#Line-delimited_JSON) JSON file into [Postgres](https://www.postgresql.org/) for some quick data exploration. I was surprised when I couldn't find a simple CLI solution that parsed the JSON and loaded each field into its own column. Every approach I found instead inserted the entire JSON object in a JSONB field. Here is my solution.\n\n","slug":"using-jq-to-effortlessly-ingest-newline-delimited-JSON-into-postgres","frontmatter":{"title":"Using Shell Commands to Effortlessly Ingest Line-delimited JSON into PostgreSQL","date":"2018-10-18T00:00:00.000Z"}}},{"node":{"excerpt":"\nI stumbled upon an [article](https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html) the other day where Rob Pike implements a rudimentary regular expression engine in c. I converted his code to Javascript and added test specs so that someone can self-guide themselves through the creation of the regex engine. The specs and solution can be found in this [GitHub repository](https://github.com/nadrane/build-your-own-regex). This blog post walks through my solution.\n\n","slug":"build-your-own-regex","frontmatter":{"title":"Build a Regex Engine in Less than 40 Lines of Code","date":"2017-11-28T11:36:04.000Z"}}},{"node":{"excerpt":"\nThe other day at work, one of my colleagues was frustrated that he was unable to encode nested objects in a query string and still maintain a readable URL. I went home that night and coded up a simple solution to this problem, and I thought I'd share it here today. This [Github repo](https://github.com/nadrane/querystring-encoder) contains specs and the solution code.\n\n","slug":"build-your-own-nested-query-string-encoder","frontmatter":{"title":"Build Your Own Nested Query String Encoder/Decoder","date":"2018-04-13T15:17:00.000Z"}}},{"node":{"excerpt":"\n[Postgres](https://www.postgresql.org/) introduced the [JSONB](https://www.postgresql.org/docs/current/static/datatype-json.html) type in version 9.4 with considerable excitement. JSONB promised to marry a favorite relational database with the noSQL world, permitting data to be stored in the database as JSON without the need for re-parsing whenever a field is accessed. Moreover, the binary storage format permits indexing and complex queries against the stored JSON blobs. This data format embodies the flexible schema and was readily adopted at [Fraight](https://fraight.ai/).\n\n","slug":"hidden-costs-of-postgresql-jsonb","frontmatter":{"title":"The Hidden Costs of PostgreSQL's JSONB Datatype","date":"2018-09-30T00:00:00.000Z"}}},{"node":{"excerpt":"\nMy first introduction to functional programming was a couple years ago when I read through the famous [SICP](https://mitpress.mit.edu/sicp/full-text/book/book.html). As someone who had up to this point worked with mostly in object oriented and imperative languages, I had rarely seen `map`, `fitler`, and `reduce` before that time. The purpose of the former two felt obvious; the latter one not so much. This blog post is geared for someone who knows how `reduce` works but feels like they struggle to use it practically.\n\n","slug":"using-reduce","frontmatter":{"title":"Using Reduce","date":"2017-09-28T10:36:30.000Z"}}},{"node":{"excerpt":"\nI've conducted about 100 technical interviews over the past 6 months for a software development recruiting company called [Triplebyte](https://triplebyte.com/iv/RrzqKKw/bp). I've also been doing consulting work, which has required me to take numerous technical interviews. It's interesting contrasting the experiences to identify what works and what doesn't.\n\nEvery Triplebyte interview begins with the candidate coding a short game. We have a series of steps, and each step precisely defines simple requirements for the program to handle. I can generally tell a couple minutes into the 2 hour interview whether the candidate will be successful. There are certainly outliers (as well as mechanisms to prevent bias), but in general, I can quickly ascertain how well a candidate stacks up technically. So then, it begs the question, why is it so hard to hire engineers? The answer is, most of us are doing it wrong.\n\n","slug":"you're-hiring-programmers-wrong-a-case-for-interview-standardization","frontmatter":{"title":"You're Hiring Programmers Wrong: A Case for Interview Standardization","date":"2018-03-20T17:03:01.000Z"}}},{"node":{"excerpt":"\n_My inspiration for this blog post came from [this video](https://www.youtube.com/watch?v=VJ38wSFbM3A) where Dan Abramov walks through the source code to react-redux_\n\nAs frontend web developers, it's not uncommon that we follow well-specified patterns - often blindly. The frontend landscape is changing rapidly, and sometimes there isn't time to investigate why we use a specific pattern; we just know we should.\n\nOne widely used pattern in [react-redux](https://github.com/reactjs/react-redux) applications looks like this\n\n```js\nconnect(mapStateToProps, mapDispatchToProps)(MyComponent)\n```\n\nI'll assume you know how to implement this pattern, but why do we use it and how does it work under the hood?\n\n","slug":"write-your-own-redux-connect","frontmatter":{"title":"Write Your Own React-Redux Connect","date":"2017-09-29T13:14:18.000Z"}}}]}},"pageContext":{}}