{"expireTime":9007200794876223000,"key":"transformer-remark-markdown-html-b5ef0b07c6bce39b5cea90b03c728ecc--","val":"<p>I recently wanted to ingest a <a href=\"https://en.wikipedia.org/wiki/JSON_streaming#Line-delimited_JSON\">line-delimited</a> JSON file into <a href=\"https://www.postgresql.org/\">Postgres</a> for some quick data exploration. I was surprised when I couldn't find a simple CLI solution that parsed the JSON and loaded each field into its own column. Every approach I found instead inserted the entire JSON object in a JSONB field. Here is my solution.</p>\n<!-- more -->\n<h2>Downloading 250000 Hacker News Comments</h2>\n<p>Let's say we want to download all of the <a href=\"https://news.ycombinator.com/\">Hacker News</a> comments from the month of May. A line-delimited JSON file is available from <a href=\"https://files.pushshift.io/hackernews/HNI_2018-05.bz2\">pushshift</a>. Fetching and decompressing the file is simple:</p>\n<pre><code class=\"language-bash\">curl https://files.pushshift.io/hackernews/HNI_2018-05.bz2 | bzip2 -d\n</code></pre>\n<p>Here is what the dataset looks like:</p>\n<pre><code class=\"language-JSON\">{\n  \"by\": \"criddell\",\n  \"id\": 16966059,\n  \"kids\": [\n    16966312,\n    16966776,\n    16969455,\n    16966323\n  ],\n  \"parent\": 16965363,\n  \"retrieved_on\": 1528401399,\n  \"text\": \"Yeah - there's always a HATEOAS comment somewhere and...\",\n  \"time\": 1525173078,\n  \"type\": \"comment\"\n}\n</code></pre>\n<h2>Formatting the Data</h2>\n<p>You might think that Postgres has a simple utility for loading line-delimited JSON. Like me, you'd be wrong. It's all the more surprising given that it has a <a href=\"https://www.postgresql.org/docs/current/static/sql-copy.html\">COPY</a> utility that's designed to load data from files. Unfortunately, that utility only supports <code>text</code>, <code>csv</code>, and <code>binary</code> formats.</p>\n<p>Transforming our data into a CSV is a breeze with <a href=\"https://stedolan.github.io/jq/\">jq</a>. We can pipe the JSON stream into the following command to extract the <code>id</code>, <code>by</code>, <code>parent</code>, and <code>text</code> fields. You can customize the command to extract whatever fields you like.</p>\n<pre><code class=\"language-bash\">jq -r '[.id, .by, .parent, .text] | @csv'\n</code></pre>\n<p>The <code>-r</code> option indicates that we would like a raw string output, as opposed to JSON formatted with quotes. The <code>[.id, .by, .parent, .text]</code> part produces an array containing the desired fields and the pipe into <code>@csv</code> specifies the format. All that's left is to load the data into Postgres.</p>\n<h2>Ingesting the Data</h2>\n<p>After creating the database</p>\n<p><code>createdb comment_db</code></p>\n<p>and applying the schema</p>\n<pre><code class=\"language-SQL\">CREATE TABLE comment (\n    id INTEGER PRIMARY KEY,\n    by VARCHAR,\n    parent INTEGER,\n    text TEXT\n);\n</code></pre>\n<p>we can hydrate our comments into <code>comment_db</code> using <a href=\"https://www.postgresql.org/docs/current/static/app-psql.html\">psql</a></p>\n<pre><code class=\"language-bash\">psql comment_db -c \"COPY comment (id, by, parent, text) FROM STDIN WITH (FORMAT CSV)\"\n</code></pre>\n<p>Note that the fields specified above need to be in the same order as the fields in the CSV stream generated by <code>jq</code>.</p>\n<p>Here is the final command</p>\n<pre><code class=\"language-bash\">curl https://files.pushshift.io/hackernews/HNI_2018-05.bz2 \\\n  | bzip2 -d \\\n  | jq -r '[.id, .by, .parent, .text] | @csv' \\\n  | psql comment_db -c \"COPY comment (id, by, parent, text) FROM STDIN WITH (FORMAT CSV)\"\n</code></pre>\n<h2>Supporting Referential Integrity</h2>\n<p>You will notice that despite the fact that the <code>comment.parent</code> refers to a comment id, we have omitted a foreign key constraint from our schema. This omission is because our command does not control for the order in which comments are loaded. We would have received constraint errors if we specified the foreign key relationship.</p>\n<p>We can overcome this obstacle by sorting our incoming comments by id.</p>\n<pre><code class=\"language-bash\">curl https://files.pushshift.io/hackernews/HNI_2018-05.bz2 \\\n  | bzip2 -d \\\n  | jq -s -r 'sort_by(.id) | .[] | [.id, .by, .parent, .text] | @csv' \\\n  | psql comment_db -c \"COPY comment (id, by, parent, text) FROM STDIN WITH (FORMAT CSV)\"\n</code></pre>\n<p>If you have a primary key that doesn't serially increase - perhaps you're using a <a href=\"https://en.wikipedia.org/wiki/Natural_key\">natural key</a> or a UUID as your primary key - then you could also sort on a <code>created_at</code> timestamp</p>\n<h2>Tradeoffs</h2>\n<p>Everything in software engineering has a tradeoff, and I would be remiss to to not mention them here. That <code>-s</code> option we specified above instructs <code>jq</code> to download the entire dataset into memory, a requirement for sorting. If you dataset is too large, then the command will fail (<code>jq</code> failed for me at 769MB).</p>\n<p>The first option does not suffer this limitation and will work for arbitrarily large datasets. This is because it leverages [streams](<a href=\"https://en.wikipedia.org/wiki/Stream_(computing\">https://en.wikipedia.org/wiki/Stream_(computing</a>) to only work on small chunks of data at once. If your dataset is large and you want foreign key constraints, you could use this streaming approach and then apply the constraints after data ingestion completes.</p>\n<p><em>If you have a data ingestion or PostgreSQL related problem, I do <a href=\"/hire-me\">consulting</a> work out of Chicago area and am currently looking for new clients. Please contact me for more details</em></p>"}