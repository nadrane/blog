{"expireTime":9007200797082461000,"key":"transformer-remark-markdown-html-ast-c26dbf500f0a967f9fc7b0a7b9ee0cfc-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I recently wanted to ingest a ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":31,"offset":31}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/JSON_streaming#Line-delimited_JSON"},"children":[{"type":"text","value":"line-delimited","position":{"start":{"line":2,"column":32,"offset":32},"end":{"line":2,"column":46,"offset":46}}}],"position":{"start":{"line":2,"column":31,"offset":31},"end":{"line":2,"column":113,"offset":113}}},{"type":"text","value":" JSON file into ","position":{"start":{"line":2,"column":113,"offset":113},"end":{"line":2,"column":129,"offset":129}}},{"type":"element","tagName":"a","properties":{"href":"https://www.postgresql.org/"},"children":[{"type":"text","value":"Postgres","position":{"start":{"line":2,"column":130,"offset":130},"end":{"line":2,"column":138,"offset":138}}}],"position":{"start":{"line":2,"column":129,"offset":129},"end":{"line":2,"column":168,"offset":168}}},{"type":"text","value":" for some quick data exploration. I was surprised when I couldn't find a simple CLI solution that parsed the JSON and loaded each field into its own column. Every approach I found instead inserted the entire JSON object in a JSONB field. Here is my solution.","position":{"start":{"line":2,"column":168,"offset":168},"end":{"line":2,"column":426,"offset":426}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":426,"offset":426}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!-- more -->","position":{"start":{"line":4,"column":1,"offset":428},"end":{"line":4,"column":14,"offset":441}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Downloading 250000 Hacker News Comments","position":{"start":{"line":6,"column":4,"offset":446},"end":{"line":6,"column":43,"offset":485}}}],"position":{"start":{"line":6,"column":1,"offset":443},"end":{"line":6,"column":43,"offset":485}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's say we want to download all of the ","position":{"start":{"line":8,"column":1,"offset":487},"end":{"line":8,"column":42,"offset":528}}},{"type":"element","tagName":"a","properties":{"href":"https://news.ycombinator.com/"},"children":[{"type":"text","value":"Hacker News","position":{"start":{"line":8,"column":43,"offset":529},"end":{"line":8,"column":54,"offset":540}}}],"position":{"start":{"line":8,"column":42,"offset":528},"end":{"line":8,"column":86,"offset":572}}},{"type":"text","value":" comments from the month of May. A line-delimited JSON file is available from ","position":{"start":{"line":8,"column":86,"offset":572},"end":{"line":8,"column":164,"offset":650}}},{"type":"element","tagName":"a","properties":{"href":"https://files.pushshift.io/hackernews/HNI_2018-05.bz2"},"children":[{"type":"text","value":"pushshift","position":{"start":{"line":8,"column":165,"offset":651},"end":{"line":8,"column":174,"offset":660}}}],"position":{"start":{"line":8,"column":164,"offset":650},"end":{"line":8,"column":230,"offset":716}}},{"type":"text","value":". Fetching and decompressing the file is simple:","position":{"start":{"line":8,"column":230,"offset":716},"end":{"line":8,"column":278,"offset":764}}}],"position":{"start":{"line":8,"column":1,"offset":487},"end":{"line":8,"column":278,"offset":764}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> https://files.pushshift.io/hackernews/HNI_2018-05.bz2 <span class=\"token operator\">|</span> <span class=\"token function\">bzip2</span> -d</code></pre></div>","position":{"start":{"line":10,"column":1,"offset":766},"end":{"line":12,"column":4,"offset":847}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is what the dataset looks like:","position":{"start":{"line":14,"column":1,"offset":849},"end":{"line":14,"column":37,"offset":885}}}],"position":{"start":{"line":14,"column":1,"offset":849},"end":{"line":14,"column":37,"offset":885}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"by\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"criddell\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">16966059</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"kids\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">16966312</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16966776</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16969455</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16966323</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parent\"</span><span class=\"token operator\">:</span> <span class=\"token number\">16965363</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"retrieved_on\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1528401399</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Yeah - there's always a HATEOAS comment somewhere and...\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"time\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1525173078</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"comment\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":16,"column":1,"offset":887},"end":{"line":27,"column":4,"offset":1156}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Formatting the Data","position":{"start":{"line":29,"column":4,"offset":1161},"end":{"line":29,"column":23,"offset":1180}}}],"position":{"start":{"line":29,"column":1,"offset":1158},"end":{"line":29,"column":23,"offset":1180}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You might think that Postgres has a simple utility for loading line-delimited JSON. Like me, you'd be wrong. It's all the more surprising given that it has a ","position":{"start":{"line":31,"column":1,"offset":1182},"end":{"line":31,"column":159,"offset":1340}}},{"type":"element","tagName":"a","properties":{"href":"https://www.postgresql.org/docs/current/static/sql-copy.html"},"children":[{"type":"text","value":"COPY","position":{"start":{"line":31,"column":160,"offset":1341},"end":{"line":31,"column":164,"offset":1345}}}],"position":{"start":{"line":31,"column":159,"offset":1340},"end":{"line":31,"column":227,"offset":1408}}},{"type":"text","value":" utility that's designed to load data from files. Unfortunately, that utility only supports ","position":{"start":{"line":31,"column":227,"offset":1408},"end":{"line":31,"column":319,"offset":1500}}},{"type":"raw","value":"<code class=\"language-markup\">text</code>","position":{"start":{"line":31,"column":319,"offset":1500},"end":{"line":31,"column":332,"offset":1513}}},{"type":"text","value":", ","position":{"start":{"line":31,"column":332,"offset":1513},"end":{"line":31,"column":334,"offset":1515}}},{"type":"raw","value":"<code class=\"language-markup\">csv</code>","position":{"start":{"line":31,"column":334,"offset":1515},"end":{"line":31,"column":346,"offset":1527}}},{"type":"text","value":", and ","position":{"start":{"line":31,"column":346,"offset":1527},"end":{"line":31,"column":352,"offset":1533}}},{"type":"raw","value":"<code class=\"language-markup\">binary</code>","position":{"start":{"line":31,"column":352,"offset":1533},"end":{"line":31,"column":367,"offset":1548}}},{"type":"text","value":" formats.","position":{"start":{"line":31,"column":367,"offset":1548},"end":{"line":31,"column":376,"offset":1557}}}],"position":{"start":{"line":31,"column":1,"offset":1182},"end":{"line":31,"column":376,"offset":1557}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Transforming our data into a CSV is a breeze with ","position":{"start":{"line":33,"column":1,"offset":1559},"end":{"line":33,"column":51,"offset":1609}}},{"type":"element","tagName":"a","properties":{"href":"https://stedolan.github.io/jq/"},"children":[{"type":"text","value":"jq","position":{"start":{"line":33,"column":52,"offset":1610},"end":{"line":33,"column":54,"offset":1612}}}],"position":{"start":{"line":33,"column":51,"offset":1609},"end":{"line":33,"column":87,"offset":1645}}},{"type":"text","value":". We can pipe the JSON stream into the following command to extract the ","position":{"start":{"line":33,"column":87,"offset":1645},"end":{"line":33,"column":159,"offset":1717}}},{"type":"raw","value":"<code class=\"language-text\">id</code>","position":{"start":{"line":33,"column":159,"offset":1717},"end":{"line":33,"column":163,"offset":1721}}},{"type":"text","value":", ","position":{"start":{"line":33,"column":163,"offset":1721},"end":{"line":33,"column":165,"offset":1723}}},{"type":"raw","value":"<code class=\"language-text\">by</code>","position":{"start":{"line":33,"column":165,"offset":1723},"end":{"line":33,"column":169,"offset":1727}}},{"type":"text","value":", ","position":{"start":{"line":33,"column":169,"offset":1727},"end":{"line":33,"column":171,"offset":1729}}},{"type":"raw","value":"<code class=\"language-text\">parent</code>","position":{"start":{"line":33,"column":171,"offset":1729},"end":{"line":33,"column":179,"offset":1737}}},{"type":"text","value":", and ","position":{"start":{"line":33,"column":179,"offset":1737},"end":{"line":33,"column":185,"offset":1743}}},{"type":"raw","value":"<code class=\"language-text\">text</code>","position":{"start":{"line":33,"column":185,"offset":1743},"end":{"line":33,"column":191,"offset":1749}}},{"type":"text","value":" fields. You can customize the command to extract whatever fields you like.","position":{"start":{"line":33,"column":191,"offset":1749},"end":{"line":33,"column":266,"offset":1824}}}],"position":{"start":{"line":33,"column":1,"offset":1559},"end":{"line":33,"column":266,"offset":1824}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">jq -r <span class=\"token string\">'[.id, .by, .parent, .text] | @csv'</span></code></pre></div>","position":{"start":{"line":35,"column":1,"offset":1826},"end":{"line":37,"column":4,"offset":1879}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":39,"column":1,"offset":1881},"end":{"line":39,"column":5,"offset":1885}}},{"type":"raw","value":"<code class=\"language-text\">-r</code>","position":{"start":{"line":39,"column":5,"offset":1885},"end":{"line":39,"column":9,"offset":1889}}},{"type":"text","value":" option indicates that we would like a raw string output, as opposed to JSON formatted with quotes. The ","position":{"start":{"line":39,"column":9,"offset":1889},"end":{"line":39,"column":113,"offset":1993}}},{"type":"raw","value":"<code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>by<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">]</span></code>","position":{"start":{"line":39,"column":113,"offset":1993},"end":{"line":39,"column":144,"offset":2024}}},{"type":"text","value":" part produces an array containing the desired fields and the pipe into ","position":{"start":{"line":39,"column":144,"offset":2024},"end":{"line":39,"column":216,"offset":2096}}},{"type":"raw","value":"<code class=\"language-text\">bash&gt;@csv</code>","position":{"start":{"line":39,"column":216,"offset":2096},"end":{"line":39,"column":227,"offset":2107}}},{"type":"text","value":" specifies the format. All that's left is to load the data into Postgres.","position":{"start":{"line":39,"column":227,"offset":2107},"end":{"line":39,"column":300,"offset":2180}}}],"position":{"start":{"line":39,"column":1,"offset":1881},"end":{"line":39,"column":300,"offset":2180}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Ingesting the Data","position":{"start":{"line":41,"column":4,"offset":2185},"end":{"line":41,"column":22,"offset":2203}}}],"position":{"start":{"line":41,"column":1,"offset":2182},"end":{"line":41,"column":22,"offset":2203}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After creating the database","position":{"start":{"line":43,"column":1,"offset":2205},"end":{"line":43,"column":28,"offset":2232}}}],"position":{"start":{"line":43,"column":1,"offset":2205},"end":{"line":43,"column":28,"offset":2232}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">createdb comment_db</code>","position":{"start":{"line":45,"column":1,"offset":2234},"end":{"line":45,"column":22,"offset":2255}}}],"position":{"start":{"line":45,"column":1,"offset":2234},"end":{"line":45,"column":22,"offset":2255}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"and applying the schema","position":{"start":{"line":47,"column":1,"offset":2257},"end":{"line":47,"column":24,"offset":2280}}}],"position":{"start":{"line":47,"column":1,"offset":2257},"end":{"line":47,"column":24,"offset":2280}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">comment</span> <span class=\"token punctuation\">(</span>\n    id <span class=\"token keyword\">INTEGER</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">by</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    parent <span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">text</span> <span class=\"token keyword\">TEXT</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":49,"column":1,"offset":2282},"end":{"line":56,"column":4,"offset":2396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"we can hydrate our comments into ","position":{"start":{"line":58,"column":1,"offset":2398},"end":{"line":58,"column":34,"offset":2431}}},{"type":"raw","value":"<code class=\"language-text\">comment_db</code>","position":{"start":{"line":58,"column":34,"offset":2431},"end":{"line":58,"column":46,"offset":2443}}},{"type":"text","value":" using ","position":{"start":{"line":58,"column":46,"offset":2443},"end":{"line":58,"column":53,"offset":2450}}},{"type":"element","tagName":"a","properties":{"href":"https://www.postgresql.org/docs/current/static/app-psql.html"},"children":[{"type":"text","value":"psql","position":{"start":{"line":58,"column":54,"offset":2451},"end":{"line":58,"column":58,"offset":2455}}}],"position":{"start":{"line":58,"column":53,"offset":2450},"end":{"line":58,"column":121,"offset":2518}}}],"position":{"start":{"line":58,"column":1,"offset":2398},"end":{"line":58,"column":121,"offset":2518}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">psql comment_db -c <span class=\"token string\">\"COPY comment (id, by, parent, text) FROM STDIN WITH (FORMAT CSV)\"</span></code></pre></div>","position":{"start":{"line":60,"column":1,"offset":2520},"end":{"line":62,"column":4,"offset":2617}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that the fields specified above need to be in the same order as the fields in the CSV stream generated by ","position":{"start":{"line":64,"column":1,"offset":2619},"end":{"line":64,"column":112,"offset":2730}}},{"type":"raw","value":"<code class=\"language-text\">jq</code>","position":{"start":{"line":64,"column":112,"offset":2730},"end":{"line":64,"column":116,"offset":2734}}},{"type":"text","value":".","position":{"start":{"line":64,"column":116,"offset":2734},"end":{"line":64,"column":117,"offset":2735}}}],"position":{"start":{"line":64,"column":1,"offset":2619},"end":{"line":64,"column":117,"offset":2735}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is the final command","position":{"start":{"line":66,"column":1,"offset":2737},"end":{"line":66,"column":26,"offset":2762}}}],"position":{"start":{"line":66,"column":1,"offset":2737},"end":{"line":66,"column":26,"offset":2762}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> https://files.pushshift.io/hackernews/HNI_2018-05.bz2 \\\n  <span class=\"token operator\">|</span> <span class=\"token function\">bzip2</span> -d \\\n  <span class=\"token operator\">|</span> jq -r <span class=\"token string\">'[.id, .by, .parent, .text] | @csv'</span> \\\n  <span class=\"token operator\">|</span> psql comment_db -c <span class=\"token string\">\"COPY comment (id, by, parent, text) FROM STDIN WITH (FORMAT CSV)\"</span></code></pre></div>","position":{"start":{"line":68,"column":1,"offset":2764},"end":{"line":73,"column":4,"offset":2989}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Supporting Referential Integrity","position":{"start":{"line":75,"column":4,"offset":2994},"end":{"line":75,"column":36,"offset":3026}}}],"position":{"start":{"line":75,"column":1,"offset":2991},"end":{"line":75,"column":36,"offset":3026}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You will notice that despite the fact that the ","position":{"start":{"line":77,"column":1,"offset":3028},"end":{"line":77,"column":48,"offset":3075}}},{"type":"raw","value":"<code class=\"language-text\">comment.parent</code>","position":{"start":{"line":77,"column":48,"offset":3075},"end":{"line":77,"column":64,"offset":3091}}},{"type":"text","value":" refers to a comment id, we have omitted a foreign key constraint from our schema. This omission is because our command does not control for the order in which comments are loaded. We would have received constraint errors if we specified the foreign key relationship.","position":{"start":{"line":77,"column":64,"offset":3091},"end":{"line":77,"column":331,"offset":3358}}}],"position":{"start":{"line":77,"column":1,"offset":3028},"end":{"line":77,"column":331,"offset":3358}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can overcome this obstacle by sorting our incoming comments by id.","position":{"start":{"line":79,"column":1,"offset":3360},"end":{"line":79,"column":70,"offset":3429}}}],"position":{"start":{"line":79,"column":1,"offset":3360},"end":{"line":79,"column":70,"offset":3429}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> https://files.pushshift.io/hackernews/HNI_2018-05.bz2 \\\n  <span class=\"token operator\">|</span> <span class=\"token function\">bzip2</span> -d \\\n  <span class=\"token operator\">|</span> jq -s -r <span class=\"token string\">'sort_by(.id) | .[] | [.id, .by, .parent, .text] | @csv'</span> \\\n  <span class=\"token operator\">|</span> psql comment_db -c <span class=\"token string\">\"COPY comment (id, by, parent, text) FROM STDIN WITH (FORMAT CSV)\"</span></code></pre></div>","position":{"start":{"line":81,"column":1,"offset":3431},"end":{"line":86,"column":4,"offset":3680}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you have a primary key that doesn't serially increase - perhaps you're using a ","position":{"start":{"line":88,"column":1,"offset":3682},"end":{"line":88,"column":83,"offset":3764}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Natural_key"},"children":[{"type":"text","value":"natural key","position":{"start":{"line":88,"column":84,"offset":3765},"end":{"line":88,"column":95,"offset":3776}}}],"position":{"start":{"line":88,"column":83,"offset":3764},"end":{"line":88,"column":139,"offset":3820}}},{"type":"text","value":" or a UUID as your primary key - then you could also sort on a ","position":{"start":{"line":88,"column":139,"offset":3820},"end":{"line":88,"column":202,"offset":3883}}},{"type":"raw","value":"<code class=\"language-text\">created_at</code>","position":{"start":{"line":88,"column":202,"offset":3883},"end":{"line":88,"column":214,"offset":3895}}},{"type":"text","value":" timestamp","position":{"start":{"line":88,"column":214,"offset":3895},"end":{"line":88,"column":224,"offset":3905}}}],"position":{"start":{"line":88,"column":1,"offset":3682},"end":{"line":88,"column":224,"offset":3905}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Tradeoffs","position":{"start":{"line":90,"column":4,"offset":3910},"end":{"line":90,"column":13,"offset":3919}}}],"position":{"start":{"line":90,"column":1,"offset":3907},"end":{"line":90,"column":13,"offset":3919}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Everything in software engineering has a tradeoff, and I would be remiss to to not mention them here. That ","position":{"start":{"line":92,"column":1,"offset":3921},"end":{"line":92,"column":108,"offset":4028}}},{"type":"raw","value":"<code class=\"language-text\">-s</code>","position":{"start":{"line":92,"column":108,"offset":4028},"end":{"line":92,"column":112,"offset":4032}}},{"type":"text","value":" option we specified above instructs ","position":{"start":{"line":92,"column":112,"offset":4032},"end":{"line":92,"column":149,"offset":4069}}},{"type":"raw","value":"<code class=\"language-text\">jq</code>","position":{"start":{"line":92,"column":149,"offset":4069},"end":{"line":92,"column":153,"offset":4073}}},{"type":"text","value":" to download the entire dataset into memory, a requirement for sorting. If you dataset is too large, then the command will fail (","position":{"start":{"line":92,"column":153,"offset":4073},"end":{"line":92,"column":282,"offset":4202}}},{"type":"raw","value":"<code class=\"language-text\">jq</code>","position":{"start":{"line":92,"column":282,"offset":4202},"end":{"line":92,"column":286,"offset":4206}}},{"type":"text","value":" failed for me at 769MB).","position":{"start":{"line":92,"column":286,"offset":4206},"end":{"line":92,"column":311,"offset":4231}}}],"position":{"start":{"line":92,"column":1,"offset":3921},"end":{"line":92,"column":311,"offset":4231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first option does not suffer this limitation and will work for arbitrarily large datasets. This is because it leverages ","position":{"start":{"line":94,"column":1,"offset":4233},"end":{"line":94,"column":125,"offset":4357}}},{"type":"text","value":"[streams]","position":{"start":{"line":94,"column":126,"offset":4358},"end":{"line":94,"column":133,"offset":4365}}},{"type":"text","value":"(","position":{"start":{"line":94,"column":134,"offset":4366},"end":{"line":94,"column":135,"offset":4367}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Stream_(computing"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Stream_(computing","position":{"start":{"line":94,"column":135,"offset":4367},"end":{"line":94,"column":182,"offset":4414}}}],"position":{"start":{"line":94,"column":135,"offset":4367},"end":{"line":94,"column":182,"offset":4414}}},{"type":"text","value":") to only work on small chunks of data at once. If your dataset is large and you want foreign key constraints, you could use this streaming approach and then apply the constraints after data ingestion completes.","position":{"start":{"line":94,"column":182,"offset":4414},"end":{"line":94,"column":393,"offset":4625}}}],"position":{"start":{"line":94,"column":1,"offset":4233},"end":{"line":94,"column":393,"offset":4625}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"If you have a data ingestion or PostgreSQL related problem, I do ","position":{"start":{"line":96,"column":2,"offset":4628},"end":{"line":96,"column":67,"offset":4693}}},{"type":"element","tagName":"a","properties":{"href":"/hire-me"},"children":[{"type":"text","value":"consulting","position":{"start":{"line":96,"column":68,"offset":4694},"end":{"line":96,"column":78,"offset":4704}}}],"position":{"start":{"line":96,"column":67,"offset":4693},"end":{"line":96,"column":89,"offset":4715}}},{"type":"text","value":" work out of Chicago area and am currently looking for new clients. Please contact me for more details","position":{"start":{"line":96,"column":89,"offset":4715},"end":{"line":96,"column":191,"offset":4817}}}],"position":{"start":{"line":96,"column":1,"offset":4627},"end":{"line":96,"column":192,"offset":4818}}}],"position":{"start":{"line":96,"column":1,"offset":4627},"end":{"line":96,"column":192,"offset":4818}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":97,"column":1,"offset":4819}}}}