{"expireTime":9007200797082462000,"key":"transformer-remark-markdown-ast-4c1475536e382edb347a12f3fe860972-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"My inspiration for this blog post came from ","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":46,"offset":46},"indent":[]}},{"type":"link","title":null,"url":"https://www.youtube.com/watch?v=VJ38wSFbM3A","children":[{"type":"text","value":"this video","position":{"start":{"line":2,"column":47,"offset":47},"end":{"line":2,"column":57,"offset":57},"indent":[]}}],"position":{"start":{"line":2,"column":46,"offset":46},"end":{"line":2,"column":103,"offset":103},"indent":[]}},{"type":"text","value":" where Dan Abramov walks through the source code to react-redux","position":{"start":{"line":2,"column":103,"offset":103},"end":{"line":2,"column":166,"offset":166},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":167,"offset":167},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":167,"offset":167},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As frontend web developers, it's not uncommon that we follow well-specified patterns - often blindly. The frontend landscape is changing rapidly, and sometimes there isn't time to investigate why we use a specific pattern; we just know we should.","position":{"start":{"line":4,"column":1,"offset":169},"end":{"line":4,"column":247,"offset":415},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":169},"end":{"line":4,"column":247,"offset":415},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One widely used pattern in ","position":{"start":{"line":6,"column":1,"offset":417},"end":{"line":6,"column":28,"offset":444},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/reactjs/react-redux","children":[{"type":"text","value":"react-redux","position":{"start":{"line":6,"column":29,"offset":445},"end":{"line":6,"column":40,"offset":456},"indent":[]}}],"position":{"start":{"line":6,"column":28,"offset":444},"end":{"line":6,"column":81,"offset":497},"indent":[]}},{"type":"text","value":" applications looks like this","position":{"start":{"line":6,"column":81,"offset":497},"end":{"line":6,"column":110,"offset":526},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":417},"end":{"line":6,"column":110,"offset":526},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapStateToProps<span class=\"token punctuation\">,</span>\n  mapDispatchToProps\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":8,"column":1,"offset":528},"end":{"line":13,"column":4,"offset":602},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I'll assume you know how to implement this pattern, but why do we use it and how does it work under the hood?","position":{"start":{"line":15,"column":1,"offset":604},"end":{"line":15,"column":110,"offset":713},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":604},"end":{"line":15,"column":110,"offset":713},"indent":[]}},{"type":"html","value":"<!-- more -->","position":{"start":{"line":17,"column":1,"offset":715},"end":{"line":17,"column":14,"offset":728},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Why Do we Need React-Redux?","position":{"start":{"line":19,"column":3,"offset":732},"end":{"line":19,"column":30,"offset":759},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":730},"end":{"line":19,"column":30,"offset":759},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"React and Redux are two completely independent tools that have nothing to do with each other. React is a tool for creating user interfaces in the browser. Redux is a tool for managing state. Either tool can be used without the other. We often use them together because they both solve separate but very important and closely related problems. The purpose of react-redux is to get these two tools to talk.","position":{"start":{"line":21,"column":1,"offset":761},"end":{"line":21,"column":405,"offset":1165},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":761},"end":{"line":21,"column":405,"offset":1165},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"But first, what would we do without react-redux? How would React and Redux talk?","position":{"start":{"line":23,"column":1,"offset":1167},"end":{"line":23,"column":81,"offset":1247},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1167},"end":{"line":23,"column":81,"offset":1247},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"How to Integrate React and Redux Without react-redux","position":{"start":{"line":25,"column":3,"offset":1251},"end":{"line":25,"column":55,"offset":1303},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1249},"end":{"line":25,"column":55,"offset":1303},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"More precisely, how do we ensure that a React component re-renders when the Redux store changes? The answer lies in Redux's ","position":{"start":{"line":27,"column":1,"offset":1305},"end":{"line":27,"column":125,"offset":1429},"indent":[]}},{"type":"link","title":null,"url":"http://redux.js.org/docs/api/Store.html#subscribe","children":[{"type":"text","value":"subscribe","position":{"start":{"line":27,"column":126,"offset":1430},"end":{"line":27,"column":135,"offset":1439},"indent":[]}}],"position":{"start":{"line":27,"column":125,"offset":1429},"end":{"line":27,"column":187,"offset":1491},"indent":[]}},{"type":"text","value":" API.","position":{"start":{"line":27,"column":187,"offset":1491},"end":{"line":27,"column":192,"offset":1496},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1305},"end":{"line":27,"column":192,"offset":1496},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./store'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// One solution is to make each component</span>\n    <span class=\"token comment\">// store the entirety of the redux state.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Callbacks passed to store.subscribe will be</span>\n    <span class=\"token comment\">// invoked every time the store's state changes.</span>\n    <span class=\"token comment\">// Our callback can get the state of the</span>\n    <span class=\"token comment\">// store and add it to the component's local state.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// We need to make sure that we don't accidentally</span>\n  <span class=\"token comment\">// subscribe to the store multiple times in the case</span>\n  <span class=\"token comment\">// where a component mounts, unmounts, and then mounts a second time.</span>\n  <span class=\"token comment\">// Fortunately, Redux makes this easy by returning</span>\n  <span class=\"token comment\">// an unsubscribe function when store.subscribe is invoked.</span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":29,"column":1,"offset":1498},"end":{"line":60,"column":4,"offset":2485},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we insert the above boilerplate into every one of our React component's, then every component could have access to the store and would be informed through a subscription the moment the store's state changes. This configuration has three flaws.","position":{"start":{"line":62,"column":1,"offset":2487},"end":{"line":62,"column":247,"offset":2733},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2487},"end":{"line":62,"column":247,"offset":2733},"indent":[]}},{"type":"list","ordered":true,"start":1,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The boilerplate of subscribing and unsubscribing to the store is highly error prone and unnecessarily verbose.","position":{"start":{"line":64,"column":4,"offset":2738},"end":{"line":64,"column":114,"offset":2848},"indent":[]}}],"position":{"start":{"line":64,"column":4,"offset":2738},"end":{"line":64,"column":114,"offset":2848},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2735},"end":{"line":64,"column":114,"offset":2848},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"All of our React component's are dependent upon knowledge of the Redux store. This is a complete failure of ","position":{"start":{"line":65,"column":4,"offset":2852},"end":{"line":65,"column":112,"offset":2960},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Separation_of_concerns","children":[{"type":"text","value":"separation of concerns","position":{"start":{"line":65,"column":113,"offset":2961},"end":{"line":65,"column":135,"offset":2983},"indent":[]}}],"position":{"start":{"line":65,"column":112,"offset":2960},"end":{"line":65,"column":190,"offset":3038},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":65,"column":190,"offset":3038},"end":{"line":65,"column":191,"offset":3039},"indent":[]}}],"position":{"start":{"line":65,"column":4,"offset":2852},"end":{"line":65,"column":191,"offset":3039},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":2849},"end":{"line":65,"column":191,"offset":3039},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Every component is dependent upon the entirety of the store's state tree. This means that whenever an action is dispatched, ","position":{"start":{"line":66,"column":4,"offset":3043},"end":{"line":66,"column":128,"offset":3167},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setState</code>","position":{"start":{"line":66,"column":128,"offset":3167},"end":{"line":66,"column":138,"offset":3177},"indent":[]}},{"type":"text","value":" is called on every mounted component, causing each one to re-render, regardless of whether its render function depends on the store state that changed. Woah! Let that sink in for a moment.","position":{"start":{"line":66,"column":138,"offset":3177},"end":{"line":66,"column":327,"offset":3366},"indent":[]}}],"position":{"start":{"line":66,"column":4,"offset":3043},"end":{"line":66,"column":327,"offset":3366},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":3040},"end":{"line":66,"column":327,"offset":3366},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2735},"end":{"line":66,"column":327,"offset":3366},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let's write a rudimentary implementation of connect that resolves the first problem.","position":{"start":{"line":68,"column":1,"offset":3368},"end":{"line":68,"column":85,"offset":3452},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":3368},"end":{"line":68,"column":85,"offset":3452},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Understanding The Syntax of Connect","position":{"start":{"line":70,"column":3,"offset":3456},"end":{"line":70,"column":38,"offset":3491},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":3454},"end":{"line":70,"column":38,"offset":3491},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Typically, we invoke ","position":{"start":{"line":72,"column":1,"offset":3493},"end":{"line":72,"column":22,"offset":3514},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">connect</code>","position":{"start":{"line":72,"column":22,"offset":3514},"end":{"line":72,"column":31,"offset":3523},"indent":[]}},{"type":"text","value":" like this:","position":{"start":{"line":72,"column":31,"offset":3523},"end":{"line":72,"column":42,"offset":3534},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":3493},"end":{"line":72,"column":42,"offset":3534},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapStateToProps<span class=\"token punctuation\">,</span>\n  mapDispatchToProps\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":74,"column":1,"offset":3536},"end":{"line":79,"column":4,"offset":3615},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">connect</code>","position":{"start":{"line":81,"column":1,"offset":3617},"end":{"line":81,"column":10,"offset":3626},"indent":[]}},{"type":"text","value":" takes in two functions as arguments and returns a function. Yes, you heard me, ","position":{"start":{"line":81,"column":10,"offset":3626},"end":{"line":81,"column":90,"offset":3706},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">connect</code>","position":{"start":{"line":81,"column":90,"offset":3706},"end":{"line":81,"column":99,"offset":3715},"indent":[]}},{"type":"text","value":" returns a function, not a component. Suppose I invoke ","position":{"start":{"line":81,"column":99,"offset":3715},"end":{"line":81,"column":154,"offset":3770},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">connect</code>","position":{"start":{"line":81,"column":154,"offset":3770},"end":{"line":81,"column":163,"offset":3779},"indent":[]}},{"type":"text","value":" and neglect to pass in a component.","position":{"start":{"line":81,"column":163,"offset":3779},"end":{"line":81,"column":199,"offset":3815},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":3617},"end":{"line":81,"column":199,"offset":3815},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> connectFunc <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapStateToProps<span class=\"token punctuation\">,</span>\n  mapDispatchToProps\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> connctedComponent <span class=\"token operator\">=</span> <span class=\"token function\">connectFunc</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":83,"column":1,"offset":3817},"end":{"line":89,"column":4,"offset":3955},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">connect</code>","position":{"start":{"line":91,"column":1,"offset":3957},"end":{"line":91,"column":10,"offset":3966},"indent":[]}},{"type":"text","value":" will return to me a function. It's that function that takes in my component (","position":{"start":{"line":91,"column":10,"offset":3966},"end":{"line":91,"column":88,"offset":4044},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">connect</code>","position":{"start":{"line":91,"column":88,"offset":4044},"end":{"line":91,"column":97,"offset":4053},"indent":[]}},{"type":"text","value":" is implemented this way as opposed to simply taking in 3 arguments to support decorator syntax. The Dan Abramov video I linked above explains this.)","position":{"start":{"line":91,"column":97,"offset":4053},"end":{"line":91,"column":246,"offset":4202},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":3957},"end":{"line":91,"column":246,"offset":4202},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Thus, the very first few lines of ","position":{"start":{"line":93,"column":1,"offset":4204},"end":{"line":93,"column":35,"offset":4238},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">connect</code>","position":{"start":{"line":93,"column":35,"offset":4238},"end":{"line":93,"column":44,"offset":4247},"indent":[]}},{"type":"text","value":" must look like this:","position":{"start":{"line":93,"column":44,"offset":4247},"end":{"line":93,"column":65,"offset":4268},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":4204},"end":{"line":93,"column":65,"offset":4268},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":95,"column":1,"offset":4270},"end":{"line":99,"column":4,"offset":4377},"indent":[1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Higher Order Components","position":{"start":{"line":101,"column":3,"offset":4381},"end":{"line":101,"column":26,"offset":4404},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":4379},"end":{"line":101,"column":26,"offset":4404},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"And what does the function we returned above do? This function is implemented as a ","position":{"start":{"line":103,"column":1,"offset":4406},"end":{"line":103,"column":84,"offset":4489},"indent":[]}},{"type":"link","title":null,"url":"https://reactjs.org/docs/higher-order-components.html","children":[{"type":"text","value":"higher order component","position":{"start":{"line":103,"column":85,"offset":4490},"end":{"line":103,"column":107,"offset":4512},"indent":[]}}],"position":{"start":{"line":103,"column":84,"offset":4489},"end":{"line":103,"column":163,"offset":4568},"indent":[]}},{"type":"text","value":" (HOC). A HOC is a function that takes in a component as a parameter and returns a new component. The new component is generally a modified or augmented version of the original component.","position":{"start":{"line":103,"column":163,"offset":4568},"end":{"line":103,"column":350,"offset":4755},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":4406},"end":{"line":103,"column":350,"offset":4755},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// We are returning a brand new component.</span>\n    <span class=\"token comment\">// Note that this new component does</span>\n    <span class=\"token comment\">// not inherit from WrappedComponent.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WrapperComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// All we are doing is returning a new component</span>\n      <span class=\"token comment\">// that renders our original component.</span>\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Notice that we need to pass WrappedComponent</span>\n        <span class=\"token comment\">// WrapperComponent's props.</span>\n        <span class=\"token comment\">// If we didn't do this, then WrappedComponent</span>\n        <span class=\"token comment\">// would never have access to any props.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":105,"column":1,"offset":4757},"end":{"line":124,"column":4,"offset":5434},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we were to run the above ","position":{"start":{"line":126,"column":1,"offset":5436},"end":{"line":126,"column":29,"offset":5464},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">connect</code>","position":{"start":{"line":126,"column":29,"offset":5464},"end":{"line":126,"column":38,"offset":5473},"indent":[]}},{"type":"text","value":" function on a component, the connected component would behave identically to original component. Furthermore, we could nest ","position":{"start":{"line":126,"column":38,"offset":5473},"end":{"line":126,"column":163,"offset":5598},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">connect</code>","position":{"start":{"line":126,"column":163,"offset":5598},"end":{"line":126,"column":172,"offset":5607},"indent":[]}},{"type":"text","value":" as many times as we want","position":{"start":{"line":126,"column":172,"offset":5607},"end":{"line":126,"column":197,"offset":5632},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":5436},"end":{"line":126,"column":197,"offset":5632},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":128,"column":1,"offset":5634},"end":{"line":138,"column":4,"offset":5712},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"and still never distort the behavior of the original component. Our current implementation is effectively ","position":{"start":{"line":140,"column":1,"offset":5714},"end":{"line":140,"column":107,"offset":5820},"indent":[]}},{"type":"link","title":null,"url":"https://stackoverflow.com/questions/1077412/what-is-an-idempotent-operation","children":[{"type":"text","value":"idempotent","position":{"start":{"line":140,"column":108,"offset":5821},"end":{"line":140,"column":118,"offset":5831},"indent":[]}}],"position":{"start":{"line":140,"column":107,"offset":5820},"end":{"line":140,"column":196,"offset":5909},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":140,"column":196,"offset":5909},"end":{"line":140,"column":197,"offset":5910},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":5714},"end":{"line":140,"column":197,"offset":5910},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Eliminating Boilerplate","position":{"start":{"line":142,"column":3,"offset":5914},"end":{"line":142,"column":26,"offset":5937},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":5912},"end":{"line":142,"column":26,"offset":5937},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Our next step is to eliminate some of the boilerplate code. We don't want to have to subscribe to the store every time we create a new component, so let's have our new ","position":{"start":{"line":144,"column":1,"offset":5939},"end":{"line":144,"column":169,"offset":6107},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">connect</code>","position":{"start":{"line":144,"column":169,"offset":6107},"end":{"line":144,"column":178,"offset":6116},"indent":[]}},{"type":"text","value":" function do it instead.","position":{"start":{"line":144,"column":178,"offset":6116},"end":{"line":144,"column":202,"offset":6140},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":5939},"end":{"line":144,"column":202,"offset":6140},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WrapperComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Since the whole point of this HOC is to get WrappedComponent</span>\n        <span class=\"token comment\">// access to the store, we need to pass that state down as props.</span>\n        <span class=\"token keyword\">const</span> storeState <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>storeState<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>storeState<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":146,"column":1,"offset":6142},"end":{"line":174,"column":4,"offset":6933},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We just made huge progress! Now, whenever we invoke","position":{"start":{"line":176,"column":1,"offset":6935},"end":{"line":176,"column":52,"offset":6986},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":6935},"end":{"line":176,"column":52,"offset":6986},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":178,"column":1,"offset":6988},"end":{"line":183,"column":4,"offset":7037},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"we get a component that is subscribed to state changes on the store, and this state will be passed down to our component as props.","position":{"start":{"line":185,"column":1,"offset":7039},"end":{"line":185,"column":131,"offset":7169},"indent":[]}}],"position":{"start":{"line":185,"column":1,"offset":7039},"end":{"line":185,"column":131,"offset":7169},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Implementing Support for mapStateToProps","position":{"start":{"line":187,"column":3,"offset":7173},"end":{"line":187,"column":43,"offset":7213},"indent":[]}}],"position":{"start":{"line":187,"column":1,"offset":7171},"end":{"line":187,"column":43,"offset":7213},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Our connected components still all depend on the entirety of the store's state tree. Look up above, the entire state is passed down as props to every connected component. To reiterate, this means that if any piece of the store's state is updated, our component will re-render.","position":{"start":{"line":189,"column":1,"offset":7215},"end":{"line":189,"column":277,"offset":7491},"indent":[]}}],"position":{"start":{"line":189,"column":1,"offset":7215},"end":{"line":189,"column":277,"offset":7491},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is where ","position":{"start":{"line":191,"column":1,"offset":7493},"end":{"line":191,"column":15,"offset":7507},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mapStateToProps</code>","position":{"start":{"line":191,"column":15,"offset":7507},"end":{"line":191,"column":32,"offset":7524},"indent":[]}},{"type":"text","value":" comes to the rescue. ","position":{"start":{"line":191,"column":32,"offset":7524},"end":{"line":191,"column":54,"offset":7546},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mapStateToProps</code>","position":{"start":{"line":191,"column":54,"offset":7546},"end":{"line":191,"column":71,"offset":7563},"indent":[]}},{"type":"text","value":" takes as its argument the store's state, and it allows us to return the particular pieces of the store's state that a component depends on. It then passes that state as props to our component instead.","position":{"start":{"line":191,"column":71,"offset":7563},"end":{"line":191,"column":272,"offset":7764},"indent":[]}}],"position":{"start":{"line":191,"column":1,"offset":7493},"end":{"line":191,"column":272,"offset":7764},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WrapperComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Now, instead of passing down all of the store state,</span>\n        <span class=\"token comment\">// we only pass down the subset of state return from</span>\n        <span class=\"token comment\">// mapStateToProps</span>\n        <span class=\"token keyword\">const</span> storeProps <span class=\"token operator\">=</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>storeState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>storeProps<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":193,"column":1,"offset":7766},"end":{"line":222,"column":4,"offset":8580},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"All we did was insert a call to ","position":{"start":{"line":224,"column":1,"offset":8582},"end":{"line":224,"column":33,"offset":8614},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mapStateToProps</code>","position":{"start":{"line":224,"column":33,"offset":8614},"end":{"line":224,"column":50,"offset":8631},"indent":[]}},{"type":"text","value":", allowing us to make each connected component dependent upon only the state it cares about, as defined by the return value of ","position":{"start":{"line":224,"column":50,"offset":8631},"end":{"line":224,"column":177,"offset":8758},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mapStateToProps</code>","position":{"start":{"line":224,"column":177,"offset":8758},"end":{"line":224,"column":194,"offset":8775},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":224,"column":194,"offset":8775},"end":{"line":224,"column":196,"offset":8777},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mapStateToProps</code>","position":{"start":{"line":224,"column":196,"offset":8777},"end":{"line":224,"column":213,"offset":8794},"indent":[]}},{"type":"text","value":" is a wonderful form of explicit documentation, clearly stating the slices of the state tree each component depends on. Unfortunately, our change does not fix the efficiency problems noted above. More on that below.","position":{"start":{"line":224,"column":213,"offset":8794},"end":{"line":224,"column":428,"offset":9009},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":8582},"end":{"line":224,"column":428,"offset":9009},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"mapStateToProps and ownProps","position":{"start":{"line":226,"column":3,"offset":9013},"end":{"line":226,"column":31,"offset":9041},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":9011},"end":{"line":226,"column":31,"offset":9041},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An astute reader might note that ","position":{"start":{"line":228,"column":1,"offset":9043},"end":{"line":228,"column":34,"offset":9076},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mapStateToProps</code>","position":{"start":{"line":228,"column":34,"offset":9076},"end":{"line":228,"column":51,"offset":9093},"indent":[]}},{"type":"text","value":" actually takes two arguments: the first is a copy of the store's state, and the second are the props that are originally passed down to ","position":{"start":{"line":228,"column":51,"offset":9093},"end":{"line":228,"column":188,"offset":9230},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">WrapperComponent</code>","position":{"start":{"line":228,"column":188,"offset":9230},"end":{"line":228,"column":206,"offset":9248},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":228,"column":206,"offset":9248},"end":{"line":228,"column":208,"offset":9250},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">react-redux</code>","position":{"start":{"line":228,"column":208,"offset":9250},"end":{"line":228,"column":221,"offset":9263},"indent":[]}},{"type":"text","value":" does not pass these down to the wrapped component by default as we do in the example immediately above. Let's modify our implementation to mirror ","position":{"start":{"line":228,"column":221,"offset":9263},"end":{"line":228,"column":368,"offset":9410},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">react-redux</code>","position":{"start":{"line":228,"column":368,"offset":9410},"end":{"line":228,"column":381,"offset":9423},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":228,"column":381,"offset":9423},"end":{"line":228,"column":382,"offset":9424},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":9043},"end":{"line":228,"column":382,"offset":9424},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WrapperComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> newProps <span class=\"token operator\">=</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>storeState<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>newProps<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":230,"column":1,"offset":9426},"end":{"line":256,"column":4,"offset":10080},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now the implementer of ","position":{"start":{"line":258,"column":1,"offset":10082},"end":{"line":258,"column":24,"offset":10105},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mapStateToProps</code>","position":{"start":{"line":258,"column":24,"offset":10105},"end":{"line":258,"column":41,"offset":10122},"indent":[]}},{"type":"text","value":" can choose which of ","position":{"start":{"line":258,"column":41,"offset":10122},"end":{"line":258,"column":62,"offset":10143},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">WrapperComponent</code>","position":{"start":{"line":258,"column":62,"offset":10143},"end":{"line":258,"column":80,"offset":10161},"indent":[]}},{"type":"text","value":"'s props it would like to keep and which it would like to disregard.","position":{"start":{"line":258,"column":80,"offset":10161},"end":{"line":258,"column":148,"offset":10229},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":10082},"end":{"line":258,"column":148,"offset":10229},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"What's the Point of mapDispatchToProps?","position":{"start":{"line":260,"column":3,"offset":10233},"end":{"line":260,"column":42,"offset":10272},"indent":[]}}],"position":{"start":{"line":260,"column":1,"offset":10231},"end":{"line":260,"column":42,"offset":10272},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">mapDispatchToProps</code>","position":{"start":{"line":262,"column":1,"offset":10274},"end":{"line":262,"column":21,"offset":10294},"indent":[]}},{"type":"text","value":" is designed to eliminate React's dependency upon Redux. If we were to use the above implementation of ","position":{"start":{"line":262,"column":21,"offset":10294},"end":{"line":262,"column":124,"offset":10397},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">connect</code>","position":{"start":{"line":262,"column":124,"offset":10397},"end":{"line":262,"column":133,"offset":10406},"indent":[]}},{"type":"text","value":", every component that dispatch's an action must import ","position":{"start":{"line":262,"column":133,"offset":10406},"end":{"line":262,"column":189,"offset":10462},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">store.dispatch</code>","position":{"start":{"line":262,"column":189,"offset":10462},"end":{"line":262,"column":205,"offset":10478},"indent":[]}},{"type":"text","value":", and the implementation would look like this:","position":{"start":{"line":262,"column":205,"offset":10478},"end":{"line":262,"column":251,"offset":10524},"indent":[]}}],"position":{"start":{"line":262,"column":1,"offset":10274},"end":{"line":262,"column":251,"offset":10524},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./store'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> updateThing <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./store/actions'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">updateThing</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":264,"column":1,"offset":10526},"end":{"line":274,"column":4,"offset":10759},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The above component 'knows' that it is part of a Redux application because it is explicitly referencing the store to dispatch actions. But we should always try to minimize the interaction of different pieces of architecture, esspecially when they have no need to interact. Ultimately, React components should not been intertwined with Redux code!","position":{"start":{"line":276,"column":1,"offset":10761},"end":{"line":276,"column":347,"offset":11107},"indent":[]}}],"position":{"start":{"line":276,"column":1,"offset":10761},"end":{"line":276,"column":347,"offset":11107},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Implementing Support for mapDispatchToProps","position":{"start":{"line":278,"column":4,"offset":11112},"end":{"line":278,"column":47,"offset":11155},"indent":[]}}],"position":{"start":{"line":278,"column":1,"offset":11109},"end":{"line":278,"column":47,"offset":11155},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">connect</code>","position":{"start":{"line":280,"column":1,"offset":11157},"end":{"line":280,"column":10,"offset":11166},"indent":[]}},{"type":"text","value":" resolves this problem for us by injecting the ","position":{"start":{"line":280,"column":10,"offset":11166},"end":{"line":280,"column":57,"offset":11213},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">store.dispatch</code>","position":{"start":{"line":280,"column":57,"offset":11213},"end":{"line":280,"column":73,"offset":11229},"indent":[]}},{"type":"text","value":" dependency into ","position":{"start":{"line":280,"column":73,"offset":11229},"end":{"line":280,"column":90,"offset":11246},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mapDispatchToProps</code>","position":{"start":{"line":280,"column":90,"offset":11246},"end":{"line":280,"column":110,"offset":11266},"indent":[]}},{"type":"text","value":", allowing us to explicitly define functions that dispatch actions without requiring that our ","position":{"start":{"line":280,"column":110,"offset":11266},"end":{"line":280,"column":204,"offset":11360},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0","children":[{"type":"text","value":"presentation components","position":{"start":{"line":280,"column":205,"offset":11361},"end":{"line":280,"column":228,"offset":11384},"indent":[]}}],"position":{"start":{"line":280,"column":204,"offset":11360},"end":{"line":280,"column":301,"offset":11457},"indent":[]}},{"type":"text","value":" have a dependency on the store. Just as the return value of ","position":{"start":{"line":280,"column":301,"offset":11457},"end":{"line":280,"column":362,"offset":11518},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mapStateToProps</code>","position":{"start":{"line":280,"column":362,"offset":11518},"end":{"line":280,"column":379,"offset":11535},"indent":[]}},{"type":"text","value":" is passed down to ","position":{"start":{"line":280,"column":379,"offset":11535},"end":{"line":280,"column":398,"offset":11554},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">WrappedComponent</code>","position":{"start":{"line":280,"column":398,"offset":11554},"end":{"line":280,"column":416,"offset":11572},"indent":[]}},{"type":"text","value":", the return value of ","position":{"start":{"line":280,"column":416,"offset":11572},"end":{"line":280,"column":438,"offset":11594},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mapDispatchToProps</code>","position":{"start":{"line":280,"column":438,"offset":11594},"end":{"line":280,"column":458,"offset":11614},"indent":[]}},{"type":"text","value":" will be passed down as well.","position":{"start":{"line":280,"column":458,"offset":11614},"end":{"line":280,"column":487,"offset":11643},"indent":[]}}],"position":{"start":{"line":280,"column":1,"offset":11157},"end":{"line":280,"column":487,"offset":11643},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WrapperComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Now we merge the results from mapStateToProps</span>\n        <span class=\"token comment\">// and mapDispatchToProps and pass everything down</span>\n        <span class=\"token keyword\">const</span> newProps <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>storeState<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// If you aren't intimately familiar with the this keyword,</span>\n          <span class=\"token comment\">// it's okay if you don't understand why we use bind here</span>\n          <span class=\"token function\">mapDispatchToProps</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>newProps<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":282,"column":1,"offset":11645},"end":{"line":316,"column":4,"offset":12659},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"More Efficiency Issues - Hello shouldComponentUpdate","position":{"start":{"line":318,"column":3,"offset":12663},"end":{"line":318,"column":55,"offset":12715},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":12661},"end":{"line":318,"column":55,"offset":12715},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We never actually fixed any of the performance issues noted above. The crux of the problem is that every time the store updates, ","position":{"start":{"line":320,"column":1,"offset":12717},"end":{"line":320,"column":130,"offset":12846},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">WrapperComponent</code>","position":{"start":{"line":320,"column":130,"offset":12846},"end":{"line":320,"column":148,"offset":12864},"indent":[]}},{"type":"text","value":" re-renders (because of its Redux store subscription that calls ","position":{"start":{"line":320,"column":148,"offset":12864},"end":{"line":320,"column":212,"offset":12928},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setState</code>","position":{"start":{"line":320,"column":212,"offset":12928},"end":{"line":320,"column":222,"offset":12938},"indent":[]}},{"type":"text","value":") and that means ","position":{"start":{"line":320,"column":222,"offset":12938},"end":{"line":320,"column":239,"offset":12955},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">WrappedComponent</code>","position":{"start":{"line":320,"column":239,"offset":12955},"end":{"line":320,"column":257,"offset":12973},"indent":[]}},{"type":"text","value":" re-renders. This ","position":{"start":{"line":320,"column":257,"offset":12973},"end":{"line":320,"column":275,"offset":12991},"indent":[]}},{"type":"link","title":null,"url":"/leveraging-immutability-in-react","children":[{"type":"text","value":"re-rendering","position":{"start":{"line":320,"column":276,"offset":12992},"end":{"line":320,"column":288,"offset":13004},"indent":[]}}],"position":{"start":{"line":320,"column":275,"offset":12991},"end":{"line":320,"column":324,"offset":13040},"indent":[]}},{"type":"text","value":" happens despite the fact that ","position":{"start":{"line":320,"column":324,"offset":13040},"end":{"line":320,"column":355,"offset":13071},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">WrappedComponent</code>","position":{"start":{"line":320,"column":355,"offset":13071},"end":{"line":320,"column":373,"offset":13089},"indent":[]}},{"type":"text","value":"'s props might be unchanged between two invocations of ","position":{"start":{"line":320,"column":373,"offset":13089},"end":{"line":320,"column":428,"offset":13144},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setState</code>","position":{"start":{"line":320,"column":428,"offset":13144},"end":{"line":320,"column":438,"offset":13154},"indent":[]}},{"type":"text","value":". In fact, this scenario is highly probable and will occur whenever a piece of state in the store changes that your component does not depend on (aka, a piece of store state not returned from from ","position":{"start":{"line":320,"column":438,"offset":13154},"end":{"line":320,"column":635,"offset":13351},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mapStateToProps</code>","position":{"start":{"line":320,"column":635,"offset":13351},"end":{"line":320,"column":652,"offset":13368},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":320,"column":652,"offset":13368},"end":{"line":320,"column":654,"offset":13370},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":12717},"end":{"line":320,"column":654,"offset":13370},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"React has a handy lifecycle method called ","position":{"start":{"line":322,"column":1,"offset":13372},"end":{"line":322,"column":43,"offset":13414},"indent":[]}},{"type":"link","title":null,"url":"https://reactjs.org/docs/react-component.html#shouldcomponentupdate","children":[{"type":"html","value":"<code class=\"language-text\">shouldComponentUpdate</code>","position":{"start":{"line":322,"column":44,"offset":13415},"end":{"line":322,"column":67,"offset":13438},"indent":[]}}],"position":{"start":{"line":322,"column":43,"offset":13414},"end":{"line":322,"column":137,"offset":13508},"indent":[]}},{"type":"text","value":" that allows us to return a boolean that indicates whether a component should re-render. In essence, if we implement this method on ","position":{"start":{"line":322,"column":137,"offset":13508},"end":{"line":322,"column":269,"offset":13640},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">WrapperComponent</code>","position":{"start":{"line":322,"column":269,"offset":13640},"end":{"line":322,"column":287,"offset":13658},"indent":[]}},{"type":"text","value":" and it returns ","position":{"start":{"line":322,"column":287,"offset":13658},"end":{"line":322,"column":303,"offset":13674},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">false</code>","position":{"start":{"line":322,"column":303,"offset":13674},"end":{"line":322,"column":310,"offset":13681},"indent":[]}},{"type":"text","value":", then React will not re-render ","position":{"start":{"line":322,"column":310,"offset":13681},"end":{"line":322,"column":342,"offset":13713},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">WrapperComponent</code>","position":{"start":{"line":322,"column":342,"offset":13713},"end":{"line":322,"column":360,"offset":13731},"indent":[]}},{"type":"text","value":". And it follows that ","position":{"start":{"line":322,"column":360,"offset":13731},"end":{"line":322,"column":382,"offset":13753},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">WrappedComponent</code>","position":{"start":{"line":322,"column":382,"offset":13753},"end":{"line":322,"column":400,"offset":13771},"indent":[]}},{"type":"text","value":" won't re-render either.","position":{"start":{"line":322,"column":400,"offset":13771},"end":{"line":322,"column":424,"offset":13795},"indent":[]}}],"position":{"start":{"line":322,"column":1,"offset":13372},"end":{"line":322,"column":424,"offset":13795},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, in the above scenario, when ","position":{"start":{"line":324,"column":1,"offset":13797},"end":{"line":324,"column":33,"offset":13829},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">WrapperComponent</code>","position":{"start":{"line":324,"column":33,"offset":13829},"end":{"line":324,"column":51,"offset":13847},"indent":[]}},{"type":"text","value":" calls ","position":{"start":{"line":324,"column":51,"offset":13847},"end":{"line":324,"column":58,"offset":13854},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setState</code>","position":{"start":{"line":324,"column":58,"offset":13854},"end":{"line":324,"column":68,"offset":13864},"indent":[]}},{"type":"text","value":", React first calls the ","position":{"start":{"line":324,"column":68,"offset":13864},"end":{"line":324,"column":92,"offset":13888},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">shouldComponentUpdate</code>","position":{"start":{"line":324,"column":92,"offset":13888},"end":{"line":324,"column":115,"offset":13911},"indent":[]}},{"type":"text","value":" method to see if a re-render should actually happen. Let's implement it below.","position":{"start":{"line":324,"column":115,"offset":13911},"end":{"line":324,"column":194,"offset":13990},"indent":[]}}],"position":{"start":{"line":324,"column":1,"offset":13797},"end":{"line":324,"column":194,"offset":13990},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Just a simple shallow equality function</span>\n<span class=\"token keyword\">import</span> shallowEqual <span class=\"token keyword\">from</span> <span class=\"token string\">'shallow-equal/objects'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WrapperComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// If the props to WrapperComponent do not change</span>\n        <span class=\"token comment\">// between setState calls, then we don't need to re-render.</span>\n        <span class=\"token comment\">// On the previous re-render, we cached the results of</span>\n        <span class=\"token comment\">// mapStateToProps. That's what this.oldProps is.</span>\n        <span class=\"token keyword\">const</span> newProps <span class=\"token operator\">=</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>storeState<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span>newProps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>oldProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> storeState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// We need to hang onto the previous result of</span>\n        <span class=\"token comment\">// mapStateToProps to use the next time</span>\n        <span class=\"token comment\">// shouldComponentUpdate runs</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>oldProps <span class=\"token operator\">=</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>storeState<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> newProps <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>oldProps<span class=\"token punctuation\">,</span> <span class=\"token function\">mapDispatchToProps</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>newProps<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":326,"column":1,"offset":13992},"end":{"line":368,"column":4,"offset":15406},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I've created a demo ","position":{"start":{"line":370,"column":1,"offset":15408},"end":{"line":370,"column":21,"offset":15428},"indent":[]}},{"type":"link","title":null,"url":"https://codesandbox.io/s/o43p70k66","children":[{"type":"text","value":"here","position":{"start":{"line":370,"column":22,"offset":15429},"end":{"line":370,"column":26,"offset":15433},"indent":[]}}],"position":{"start":{"line":370,"column":21,"offset":15428},"end":{"line":370,"column":63,"offset":15470},"indent":[]}},{"type":"text","value":". Open the console and prove to yourself that ","position":{"start":{"line":370,"column":63,"offset":15470},"end":{"line":370,"column":109,"offset":15516},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">shouldComponentUpdate</code>","position":{"start":{"line":370,"column":109,"offset":15516},"end":{"line":370,"column":132,"offset":15539},"indent":[]}},{"type":"text","value":" is doing its job.","position":{"start":{"line":370,"column":132,"offset":15539},"end":{"line":370,"column":150,"offset":15557},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":15408},"end":{"line":370,"column":150,"offset":15557},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"I should note that this is not exactly what react-redux does because of edge cases, but the concept is still the same.","position":{"start":{"line":372,"column":2,"offset":15560},"end":{"line":372,"column":120,"offset":15678},"indent":[]}}],"position":{"start":{"line":372,"column":1,"offset":15559},"end":{"line":372,"column":121,"offset":15679},"indent":[]}}],"position":{"start":{"line":372,"column":1,"offset":15559},"end":{"line":372,"column":121,"offset":15679},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now our wrapper and wrapped components will only re-render when the props returned from ","position":{"start":{"line":374,"column":1,"offset":15681},"end":{"line":374,"column":89,"offset":15769},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mapStateToProps</code>","position":{"start":{"line":374,"column":89,"offset":15769},"end":{"line":374,"column":106,"offset":15786},"indent":[]}},{"type":"text","value":" change! This is a huge performance gain. This implementation of ","position":{"start":{"line":374,"column":106,"offset":15786},"end":{"line":374,"column":171,"offset":15851},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">connect</code>","position":{"start":{"line":374,"column":171,"offset":15851},"end":{"line":374,"column":180,"offset":15860},"indent":[]}},{"type":"text","value":" explains why adherence to ","position":{"start":{"line":374,"column":180,"offset":15860},"end":{"line":374,"column":207,"offset":15887},"indent":[]}},{"type":"link","title":null,"url":"http://redux.js.org/docs/faq/ReactRedux.html#react-not-rerendering","children":[{"type":"text","value":"immutability is so important","position":{"start":{"line":374,"column":208,"offset":15888},"end":{"line":374,"column":236,"offset":15916},"indent":[]}}],"position":{"start":{"line":374,"column":207,"offset":15887},"end":{"line":374,"column":305,"offset":15985},"indent":[]}},{"type":"text","value":" in redux's reducers. If you fail to respect immutability, the shallow comparison in the ","position":{"start":{"line":374,"column":305,"offset":15985},"end":{"line":374,"column":394,"offset":16074},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">shouldComponentUpdate</code>","position":{"start":{"line":374,"column":394,"offset":16074},"end":{"line":374,"column":417,"offset":16097},"indent":[]}},{"type":"text","value":" in ","position":{"start":{"line":374,"column":417,"offset":16097},"end":{"line":374,"column":421,"offset":16101},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">WrapperComponent</code>","position":{"start":{"line":374,"column":421,"offset":16101},"end":{"line":374,"column":439,"offset":16119},"indent":[]}},{"type":"text","value":" will likely return ","position":{"start":{"line":374,"column":439,"offset":16119},"end":{"line":374,"column":459,"offset":16139},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">false</code>","position":{"start":{"line":374,"column":459,"offset":16139},"end":{"line":374,"column":466,"offset":16146},"indent":[]}},{"type":"text","value":", causing your connected component to not re-render when it should.","position":{"start":{"line":374,"column":466,"offset":16146},"end":{"line":374,"column":533,"offset":16213},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":15681},"end":{"line":374,"column":533,"offset":16213},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Wrapping up","position":{"start":{"line":376,"column":3,"offset":16217},"end":{"line":376,"column":14,"offset":16228},"indent":[]}}],"position":{"start":{"line":376,"column":1,"offset":16215},"end":{"line":376,"column":14,"offset":16228},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"React-redux's ","position":{"start":{"line":378,"column":1,"offset":16230},"end":{"line":378,"column":15,"offset":16244},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">connect</code>","position":{"start":{"line":378,"column":15,"offset":16244},"end":{"line":378,"column":24,"offset":16253},"indent":[]}},{"type":"text","value":" method is remarkably simple and only performs a handful of operations.","position":{"start":{"line":378,"column":24,"offset":16253},"end":{"line":378,"column":95,"offset":16324},"indent":[]}}],"position":{"start":{"line":378,"column":1,"offset":16230},"end":{"line":378,"column":95,"offset":16324},"indent":[]}},{"type":"list","ordered":true,"start":1,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It manages our component's subscription to the store so that our component can update when the store updates.","position":{"start":{"line":380,"column":4,"offset":16329},"end":{"line":380,"column":113,"offset":16438},"indent":[]}}],"position":{"start":{"line":380,"column":4,"offset":16329},"end":{"line":380,"column":113,"offset":16438},"indent":[]}}],"position":{"start":{"line":380,"column":1,"offset":16326},"end":{"line":380,"column":113,"offset":16438},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It allows us to explicitly define the slice of state our component is dependent upon using ","position":{"start":{"line":381,"column":4,"offset":16442},"end":{"line":381,"column":95,"offset":16533},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mapStateToProps</code>","position":{"start":{"line":381,"column":95,"offset":16533},"end":{"line":381,"column":112,"offset":16550},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":381,"column":112,"offset":16550},"end":{"line":381,"column":113,"offset":16551},"indent":[]}}],"position":{"start":{"line":381,"column":4,"offset":16442},"end":{"line":381,"column":113,"offset":16551},"indent":[]}}],"position":{"start":{"line":381,"column":1,"offset":16439},"end":{"line":381,"column":113,"offset":16551},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It gives our component access to ","position":{"start":{"line":382,"column":4,"offset":16555},"end":{"line":382,"column":37,"offset":16588},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">store.dispatch</code>","position":{"start":{"line":382,"column":37,"offset":16588},"end":{"line":382,"column":53,"offset":16604},"indent":[]}},{"type":"text","value":" without requiring a direct dependency on the store.","position":{"start":{"line":382,"column":53,"offset":16604},"end":{"line":382,"column":105,"offset":16656},"indent":[]}}],"position":{"start":{"line":382,"column":4,"offset":16555},"end":{"line":382,"column":105,"offset":16656},"indent":[]}}],"position":{"start":{"line":382,"column":1,"offset":16552},"end":{"line":382,"column":105,"offset":16656},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It defines ","position":{"start":{"line":383,"column":4,"offset":16660},"end":{"line":383,"column":15,"offset":16671},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">shouldComponentUpdate</code>","position":{"start":{"line":383,"column":15,"offset":16671},"end":{"line":383,"column":38,"offset":16694},"indent":[]}},{"type":"text","value":", ensuring that our components only re-render when the store state they depend on changes.","position":{"start":{"line":383,"column":38,"offset":16694},"end":{"line":383,"column":128,"offset":16784},"indent":[]}}],"position":{"start":{"line":383,"column":4,"offset":16660},"end":{"line":383,"column":128,"offset":16784},"indent":[]}}],"position":{"start":{"line":383,"column":1,"offset":16657},"end":{"line":383,"column":128,"offset":16784},"indent":[]}}],"position":{"start":{"line":380,"column":1,"offset":16326},"end":{"line":383,"column":128,"offset":16784},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I hope you found this article helpful. Please feel free to email me and reach out if you have questions. I put a ","position":{"start":{"line":385,"column":1,"offset":16786},"end":{"line":385,"column":114,"offset":16899},"indent":[]}},{"type":"link","title":null,"url":"https://gist.github.com/nadrane/5221c64c421efe421bda9fdaab167dc2","children":[{"type":"text","value":"gist","position":{"start":{"line":385,"column":115,"offset":16900},"end":{"line":385,"column":119,"offset":16904},"indent":[]}}],"position":{"start":{"line":385,"column":114,"offset":16899},"end":{"line":385,"column":186,"offset":16971},"indent":[]}},{"type":"text","value":" online containing the same code as the demo.","position":{"start":{"line":385,"column":186,"offset":16971},"end":{"line":385,"column":231,"offset":17016},"indent":[]}}],"position":{"start":{"line":385,"column":1,"offset":16786},"end":{"line":385,"column":231,"offset":17016},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":386,"column":1,"offset":17017}}}}