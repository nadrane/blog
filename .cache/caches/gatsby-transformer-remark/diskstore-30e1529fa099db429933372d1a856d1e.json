{"expireTime":9007200794876223000,"key":"transformer-remark-markdown-ast-396dc3ace105d30367e295b02a2ac305--","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"I stumbled upon an ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":20,"offset":20},"indent":[]}},{"type":"link","title":null,"url":"https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html","children":[{"type":"text","value":"article","position":{"start":{"line":2,"column":21,"offset":21},"end":{"line":2,"column":28,"offset":28},"indent":[]}}],"position":{"start":{"line":2,"column":20,"offset":20},"end":{"line":2,"column":103,"offset":103},"indent":[]}},{"type":"text","value":" the other day where Rob Pike implements a rudimentary regular expression engine in c. I converted his code to Javascript and added test specs so that someone can self-guide themselves through the creation of the regex engine. The specs and solution can be found in this ","position":{"start":{"line":2,"column":103,"offset":103},"end":{"line":2,"column":374,"offset":374},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/nadrane/build-your-own-regex","children":[{"type":"text","value":"GitHub repository","position":{"start":{"line":2,"column":375,"offset":375},"end":{"line":2,"column":392,"offset":392},"indent":[]}}],"position":{"start":{"line":2,"column":374,"offset":374},"end":{"line":2,"column":442,"offset":442},"indent":[]}},{"type":"text","value":". This blog post walks through my solution.","position":{"start":{"line":2,"column":442,"offset":442},"end":{"line":2,"column":485,"offset":485},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":485,"offset":485},"indent":[]}},{"type":"html","value":"<!-- more -->","position":{"start":{"line":4,"column":1,"offset":487},"end":{"line":4,"column":14,"offset":500},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The Problem","position":{"start":{"line":6,"column":4,"offset":505},"end":{"line":6,"column":15,"offset":516},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":502},"end":{"line":6,"column":15,"offset":516},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Our regex engine will support the following syntax:","position":{"start":{"line":8,"column":1,"offset":518},"end":{"line":8,"column":52,"offset":569},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":518},"end":{"line":8,"column":52,"offset":569},"indent":[]}},{"type":"table","align":[null,null,null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Syntax","position":{"start":{"line":10,"column":3,"offset":573},"end":{"line":10,"column":9,"offset":579},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":573},"end":{"line":10,"column":9,"offset":579},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Meaning","position":{"start":{"line":10,"column":12,"offset":582},"end":{"line":10,"column":19,"offset":589},"indent":[]}}],"position":{"start":{"line":10,"column":12,"offset":582},"end":{"line":10,"column":19,"offset":589},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Example","position":{"start":{"line":10,"column":22,"offset":592},"end":{"line":10,"column":29,"offset":599},"indent":[]}}],"position":{"start":{"line":10,"column":22,"offset":592},"end":{"line":10,"column":29,"offset":599},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"matches","position":{"start":{"line":10,"column":32,"offset":602},"end":{"line":10,"column":39,"offset":609},"indent":[]}}],"position":{"start":{"line":10,"column":32,"offset":602},"end":{"line":10,"column":39,"offset":609},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":571},"end":{"line":10,"column":41,"offset":611},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"a","position":{"start":{"line":12,"column":3,"offset":655},"end":{"line":12,"column":4,"offset":656},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":655},"end":{"line":12,"column":4,"offset":656},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Matches the specified character literal","position":{"start":{"line":12,"column":7,"offset":659},"end":{"line":12,"column":46,"offset":698},"indent":[]}}],"position":{"start":{"line":12,"column":7,"offset":659},"end":{"line":12,"column":46,"offset":698},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"q","position":{"start":{"line":12,"column":49,"offset":701},"end":{"line":12,"column":50,"offset":702},"indent":[]}}],"position":{"start":{"line":12,"column":49,"offset":701},"end":{"line":12,"column":50,"offset":702},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"q","position":{"start":{"line":12,"column":53,"offset":705},"end":{"line":12,"column":54,"offset":706},"indent":[]}}],"position":{"start":{"line":12,"column":53,"offset":705},"end":{"line":12,"column":54,"offset":706},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":653},"end":{"line":12,"column":56,"offset":708},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"*","position":{"start":{"line":13,"column":3,"offset":711},"end":{"line":13,"column":4,"offset":712},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":711},"end":{"line":13,"column":4,"offset":712},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Matches 0 or more of the previous character","position":{"start":{"line":13,"column":7,"offset":715},"end":{"line":13,"column":50,"offset":758},"indent":[]}}],"position":{"start":{"line":13,"column":7,"offset":715},"end":{"line":13,"column":50,"offset":758},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"a*","position":{"start":{"line":13,"column":53,"offset":761},"end":{"line":13,"column":55,"offset":763},"indent":[]}}],"position":{"start":{"line":13,"column":53,"offset":761},"end":{"line":13,"column":55,"offset":763},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"\"\", a, aa, aaa","position":{"start":{"line":13,"column":58,"offset":766},"end":{"line":13,"column":72,"offset":780},"indent":[]}}],"position":{"start":{"line":13,"column":58,"offset":766},"end":{"line":13,"column":73,"offset":781},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":709},"end":{"line":13,"column":75,"offset":783},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"?","position":{"start":{"line":14,"column":3,"offset":786},"end":{"line":14,"column":4,"offset":787},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":786},"end":{"line":14,"column":4,"offset":787},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Matches 0 or 1 of the previous character","position":{"start":{"line":14,"column":7,"offset":790},"end":{"line":14,"column":47,"offset":830},"indent":[]}}],"position":{"start":{"line":14,"column":7,"offset":790},"end":{"line":14,"column":47,"offset":830},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"a?","position":{"start":{"line":14,"column":50,"offset":833},"end":{"line":14,"column":52,"offset":835},"indent":[]}}],"position":{"start":{"line":14,"column":50,"offset":833},"end":{"line":14,"column":52,"offset":835},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"\"\", a","position":{"start":{"line":14,"column":55,"offset":838},"end":{"line":14,"column":60,"offset":843},"indent":[]}}],"position":{"start":{"line":14,"column":55,"offset":838},"end":{"line":14,"column":60,"offset":843},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":784},"end":{"line":14,"column":62,"offset":845},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":".","position":{"start":{"line":15,"column":3,"offset":848},"end":{"line":15,"column":4,"offset":849},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":848},"end":{"line":15,"column":4,"offset":849},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Matches any character literal","position":{"start":{"line":15,"column":7,"offset":852},"end":{"line":15,"column":36,"offset":881},"indent":[]}}],"position":{"start":{"line":15,"column":7,"offset":852},"end":{"line":15,"column":36,"offset":881},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":".","position":{"start":{"line":15,"column":39,"offset":884},"end":{"line":15,"column":40,"offset":885},"indent":[]}}],"position":{"start":{"line":15,"column":39,"offset":884},"end":{"line":15,"column":40,"offset":885},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"a, b, c, d, e ...","position":{"start":{"line":15,"column":43,"offset":888},"end":{"line":15,"column":60,"offset":905},"indent":[]}}],"position":{"start":{"line":15,"column":43,"offset":888},"end":{"line":15,"column":60,"offset":905},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":846},"end":{"line":15,"column":62,"offset":907},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"^","position":{"start":{"line":16,"column":3,"offset":910},"end":{"line":16,"column":4,"offset":911},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":910},"end":{"line":16,"column":4,"offset":911},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Matches the start of a string","position":{"start":{"line":16,"column":7,"offset":914},"end":{"line":16,"column":36,"offset":943},"indent":[]}}],"position":{"start":{"line":16,"column":7,"offset":914},"end":{"line":16,"column":36,"offset":943},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"^c","position":{"start":{"line":16,"column":39,"offset":946},"end":{"line":16,"column":41,"offset":948},"indent":[]}}],"position":{"start":{"line":16,"column":39,"offset":946},"end":{"line":16,"column":41,"offset":948},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"c, ca, caa, cbb ...","position":{"start":{"line":16,"column":44,"offset":951},"end":{"line":16,"column":63,"offset":970},"indent":[]}}],"position":{"start":{"line":16,"column":44,"offset":951},"end":{"line":16,"column":63,"offset":970},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":908},"end":{"line":16,"column":65,"offset":972},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"$","position":{"start":{"line":17,"column":3,"offset":975},"end":{"line":17,"column":4,"offset":976},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":975},"end":{"line":17,"column":4,"offset":976},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Matches the end of a string","position":{"start":{"line":17,"column":7,"offset":979},"end":{"line":17,"column":34,"offset":1006},"indent":[]}}],"position":{"start":{"line":17,"column":7,"offset":979},"end":{"line":17,"column":34,"offset":1006},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"a$","position":{"start":{"line":17,"column":37,"offset":1009},"end":{"line":17,"column":39,"offset":1011},"indent":[]}}],"position":{"start":{"line":17,"column":37,"offset":1009},"end":{"line":17,"column":39,"offset":1011},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"ba, baaa, qwerta ...","position":{"start":{"line":17,"column":42,"offset":1014},"end":{"line":17,"column":62,"offset":1034},"indent":[]}}],"position":{"start":{"line":17,"column":42,"offset":1014},"end":{"line":17,"column":62,"offset":1034},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":973},"end":{"line":17,"column":64,"offset":1036},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":571},"end":{"line":17,"column":64,"offset":1036},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The goal is to provide a syntax robust enough to match a large portion of regex use cases with minimal code.","position":{"start":{"line":19,"column":1,"offset":1038},"end":{"line":19,"column":109,"offset":1146},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1038},"end":{"line":19,"column":109,"offset":1146},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Matching One Character","position":{"start":{"line":21,"column":4,"offset":1151},"end":{"line":21,"column":26,"offset":1173},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1148},"end":{"line":21,"column":26,"offset":1173},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first step is to write a function that takes in a one character pattern and a one character text string and returns a boolean indicating if they match. A pattern of ","position":{"start":{"line":23,"column":1,"offset":1175},"end":{"line":23,"column":170,"offset":1344},"indent":[]}},{"type":"inlineCode","value":".","position":{"start":{"line":23,"column":170,"offset":1344},"end":{"line":23,"column":173,"offset":1347},"indent":[]}},{"type":"text","value":" is considered a wildcard and matches against any character literal.","position":{"start":{"line":23,"column":173,"offset":1347},"end":{"line":23,"column":241,"offset":1415},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1175},"end":{"line":23,"column":241,"offset":1415},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here are some examples","position":{"start":{"line":25,"column":1,"offset":1417},"end":{"line":25,"column":23,"offset":1439},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1417},"end":{"line":25,"column":23,"offset":1439},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"matchOne('a', 'a')","position":{"start":{"line":27,"column":1,"offset":1441},"end":{"line":27,"column":21,"offset":1461},"indent":[]}},{"type":"text","value":" -> ","position":{"start":{"line":27,"column":21,"offset":1461},"end":{"line":27,"column":25,"offset":1465},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":27,"column":25,"offset":1465},"end":{"line":27,"column":31,"offset":1471},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":27,"column":31,"offset":1471},"end":{"line":28,"column":1,"offset":1472},"indent":[1]}},{"type":"inlineCode","value":"matchOne('.', 'z')","position":{"start":{"line":28,"column":1,"offset":1472},"end":{"line":28,"column":21,"offset":1492},"indent":[]}},{"type":"text","value":" -> ","position":{"start":{"line":28,"column":21,"offset":1492},"end":{"line":28,"column":25,"offset":1496},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":28,"column":25,"offset":1496},"end":{"line":28,"column":31,"offset":1502},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":28,"column":31,"offset":1502},"end":{"line":29,"column":1,"offset":1503},"indent":[1]}},{"type":"inlineCode","value":"matchOne('', 'h')","position":{"start":{"line":29,"column":1,"offset":1503},"end":{"line":29,"column":20,"offset":1522},"indent":[]}},{"type":"text","value":"  -> ","position":{"start":{"line":29,"column":20,"offset":1522},"end":{"line":29,"column":25,"offset":1527},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":29,"column":25,"offset":1527},"end":{"line":29,"column":31,"offset":1533},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":29,"column":31,"offset":1533},"end":{"line":30,"column":1,"offset":1534},"indent":[1]}},{"type":"inlineCode","value":"matchOne('a', 'b')","position":{"start":{"line":30,"column":1,"offset":1534},"end":{"line":30,"column":21,"offset":1554},"indent":[]}},{"type":"text","value":" -> ","position":{"start":{"line":30,"column":21,"offset":1554},"end":{"line":30,"column":25,"offset":1558},"indent":[]}},{"type":"inlineCode","value":"false","position":{"start":{"line":30,"column":25,"offset":1558},"end":{"line":30,"column":32,"offset":1565},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":30,"column":32,"offset":1565},"end":{"line":31,"column":1,"offset":1566},"indent":[1]}},{"type":"inlineCode","value":"matchOne('p', '')","position":{"start":{"line":31,"column":1,"offset":1566},"end":{"line":31,"column":20,"offset":1585},"indent":[]}},{"type":"text","value":"  -> ","position":{"start":{"line":31,"column":20,"offset":1585},"end":{"line":31,"column":25,"offset":1590},"indent":[]}},{"type":"inlineCode","value":"false","position":{"start":{"line":31,"column":25,"offset":1590},"end":{"line":31,"column":32,"offset":1597},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1441},"end":{"line":31,"column":32,"offset":1597},"indent":[1,1,1,1]}},{"type":"code","lang":"js","value":"function matchOne(pattern, text) {\n  if (!pattern) return true // Any text matches an empty pattern\n  if (!text) return false   // If the pattern is defined but the text is empty, there cannot be a match\n  if (pattern === \".\") return true // Any inputted text matches the wildcard\n  return pattern === text\n}","position":{"start":{"line":34,"column":1,"offset":1600},"end":{"line":41,"column":4,"offset":1918},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Matching Same Length Strings","position":{"start":{"line":43,"column":4,"offset":1923},"end":{"line":43,"column":32,"offset":1951},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1920},"end":{"line":43,"column":32,"offset":1951},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now we want to add support for patterns and text strings of greater length. For now, let's only consider a pattern/text pair of the same length. I happen to know that the solution lends itself very naturally to recursion, so we will use it here. We are going to want to repeatedly invoke ","position":{"start":{"line":45,"column":1,"offset":1953},"end":{"line":45,"column":289,"offset":2241},"indent":[]}},{"type":"inlineCode","value":"matchOne","position":{"start":{"line":45,"column":289,"offset":2241},"end":{"line":45,"column":299,"offset":2251},"indent":[]}},{"type":"text","value":" on successive pairs of characters from the pattern/text combination.","position":{"start":{"line":45,"column":299,"offset":2251},"end":{"line":45,"column":368,"offset":2320},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1953},"end":{"line":45,"column":368,"offset":2320},"indent":[]}},{"type":"code","lang":"js","value":"function match(pattern, text) {\n  if (pattern === \"\") return true  // Our base case - if the pattern is empty, any inputted text is a match\n  else return matchOne(pattern[0], text[0]) && match(pattern.slice(1), text.slice(1))\n}","position":{"start":{"line":47,"column":1,"offset":2322},"end":{"line":52,"column":4,"offset":2559},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The above code advances character by character across the the pattern/text pair. It first compares ","position":{"start":{"line":54,"column":1,"offset":2561},"end":{"line":54,"column":100,"offset":2660},"indent":[]}},{"type":"inlineCode","value":"pattern[0]","position":{"start":{"line":54,"column":100,"offset":2660},"end":{"line":54,"column":112,"offset":2672},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":54,"column":112,"offset":2672},"end":{"line":54,"column":116,"offset":2676},"indent":[]}},{"type":"inlineCode","value":"text[0]","position":{"start":{"line":54,"column":116,"offset":2676},"end":{"line":54,"column":125,"offset":2685},"indent":[]}},{"type":"text","value":" and then ","position":{"start":{"line":54,"column":125,"offset":2685},"end":{"line":54,"column":135,"offset":2695},"indent":[]}},{"type":"inlineCode","value":"pattern[1]","position":{"start":{"line":54,"column":135,"offset":2695},"end":{"line":54,"column":147,"offset":2707},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":54,"column":147,"offset":2707},"end":{"line":54,"column":151,"offset":2711},"indent":[]}},{"type":"inlineCode","value":"text[1]","position":{"start":{"line":54,"column":151,"offset":2711},"end":{"line":54,"column":160,"offset":2720},"indent":[]}},{"type":"text","value":" and continues comparing ","position":{"start":{"line":54,"column":160,"offset":2720},"end":{"line":54,"column":185,"offset":2745},"indent":[]}},{"type":"inlineCode","value":"pattern[i]","position":{"start":{"line":54,"column":185,"offset":2745},"end":{"line":54,"column":197,"offset":2757},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":54,"column":197,"offset":2757},"end":{"line":54,"column":201,"offset":2761},"indent":[]}},{"type":"inlineCode","value":"text[i]","position":{"start":{"line":54,"column":201,"offset":2761},"end":{"line":54,"column":210,"offset":2770},"indent":[]}},{"type":"text","value":" until ","position":{"start":{"line":54,"column":210,"offset":2770},"end":{"line":54,"column":217,"offset":2777},"indent":[]}},{"type":"inlineCode","value":"i === pattern.length - 1","position":{"start":{"line":54,"column":217,"offset":2777},"end":{"line":54,"column":243,"offset":2803},"indent":[]}},{"type":"text","value":". If they ever don't match, then we know that the pattern cannot match the text.","position":{"start":{"line":54,"column":243,"offset":2803},"end":{"line":54,"column":323,"offset":2883},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2561},"end":{"line":54,"column":323,"offset":2883},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's take an example. Suppose we invoke ","position":{"start":{"line":56,"column":1,"offset":2885},"end":{"line":56,"column":42,"offset":2926},"indent":[]}},{"type":"inlineCode","value":"match('a.c', 'abc')","position":{"start":{"line":56,"column":42,"offset":2926},"end":{"line":56,"column":63,"offset":2947},"indent":[]}},{"type":"text","value":", which returns ","position":{"start":{"line":56,"column":63,"offset":2947},"end":{"line":56,"column":79,"offset":2963},"indent":[]}},{"type":"inlineCode","value":"matchOne('a', 'a') && match('.c', 'bc')","position":{"start":{"line":56,"column":79,"offset":2963},"end":{"line":56,"column":120,"offset":3004},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":56,"column":120,"offset":3004},"end":{"line":56,"column":121,"offset":3005},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":2885},"end":{"line":56,"column":121,"offset":3005},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we continue evaluating these functions, we get ","position":{"start":{"line":58,"column":1,"offset":3007},"end":{"line":58,"column":51,"offset":3057},"indent":[]}},{"type":"inlineCode","value":"matchOne('a', 'a') && matchOne('.', 'b') && matchOne('c', 'c') && match(\"\", \"\")","position":{"start":{"line":58,"column":51,"offset":3057},"end":{"line":58,"column":132,"offset":3138},"indent":[]}},{"type":"text","value":", which is just equal to ","position":{"start":{"line":58,"column":132,"offset":3138},"end":{"line":58,"column":157,"offset":3163},"indent":[]}},{"type":"inlineCode","value":"true && true && true && true","position":{"start":{"line":58,"column":157,"offset":3163},"end":{"line":58,"column":187,"offset":3193},"indent":[]}},{"type":"text","value":", So we have a match!","position":{"start":{"line":58,"column":187,"offset":3193},"end":{"line":58,"column":208,"offset":3214},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":3007},"end":{"line":58,"column":208,"offset":3214},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The $ Character","position":{"start":{"line":60,"column":4,"offset":3219},"end":{"line":60,"column":19,"offset":3234},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":3216},"end":{"line":60,"column":19,"offset":3234},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's add support for the special pattern character ","position":{"start":{"line":62,"column":1,"offset":3236},"end":{"line":62,"column":53,"offset":3288},"indent":[]}},{"type":"inlineCode","value":"$","position":{"start":{"line":62,"column":53,"offset":3288},"end":{"line":62,"column":56,"offset":3291},"indent":[]}},{"type":"text","value":" that allows us to match the end of a string. The solution simply requires adding an additional base case to the match function.","position":{"start":{"line":62,"column":56,"offset":3291},"end":{"line":62,"column":184,"offset":3419},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":3236},"end":{"line":62,"column":184,"offset":3419},"indent":[]}},{"type":"code","lang":"js","value":"function match(pattern, text) {\n  if (pattern === \"\") return true\n  if (pattern === \"$\" && text === \"\") return true\n  else return matchOne(pattern[0], text[0]) && match(pattern.slice(1), text.slice(1))\n}","position":{"start":{"line":64,"column":1,"offset":3421},"end":{"line":70,"column":4,"offset":3634},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The ^ Character","position":{"start":{"line":72,"column":4,"offset":3639},"end":{"line":72,"column":19,"offset":3654},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":3636},"end":{"line":72,"column":19,"offset":3654},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's add support for the special pattern character ","position":{"start":{"line":74,"column":1,"offset":3656},"end":{"line":74,"column":53,"offset":3708},"indent":[]}},{"type":"inlineCode","value":"^","position":{"start":{"line":74,"column":53,"offset":3708},"end":{"line":74,"column":56,"offset":3711},"indent":[]}},{"type":"text","value":" that allows us to match the beginning of a string. I'm going to introduce a new function called ","position":{"start":{"line":74,"column":56,"offset":3711},"end":{"line":74,"column":153,"offset":3808},"indent":[]}},{"type":"inlineCode","value":"search","position":{"start":{"line":74,"column":153,"offset":3808},"end":{"line":74,"column":161,"offset":3816},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":74,"column":161,"offset":3816},"end":{"line":74,"column":162,"offset":3817},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":3656},"end":{"line":74,"column":162,"offset":3817},"indent":[]}},{"type":"code","lang":"js","value":"function search(pattern, text) {\n  if (pattern[0] === \"^\") {\n    return match(pattern.slice(1), text)\n  }\n}","position":{"start":{"line":76,"column":1,"offset":3819},"end":{"line":82,"column":4,"offset":3936},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This function will be the new entry point to our code. Up till this point, we were only matching patterns that began at the beginning of the text. We are simply making that more clear now by forcing the user to preface the pattern with a ","position":{"start":{"line":84,"column":1,"offset":3938},"end":{"line":84,"column":239,"offset":4176},"indent":[]}},{"type":"inlineCode","value":"^","position":{"start":{"line":84,"column":239,"offset":4176},"end":{"line":84,"column":242,"offset":4179},"indent":[]}},{"type":"text","value":". But how do we support patterns that appear anywhere within the text?","position":{"start":{"line":84,"column":242,"offset":4179},"end":{"line":84,"column":312,"offset":4249},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":3938},"end":{"line":84,"column":312,"offset":4249},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Matches Starting Anywhere","position":{"start":{"line":86,"column":4,"offset":4254},"end":{"line":86,"column":29,"offset":4279},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":4251},"end":{"line":86,"column":29,"offset":4279},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Currently, the following return ","position":{"start":{"line":88,"column":1,"offset":4281},"end":{"line":88,"column":33,"offset":4313},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":88,"column":33,"offset":4313},"end":{"line":88,"column":39,"offset":4319},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":4281},"end":{"line":88,"column":39,"offset":4319},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"search(\"^abc\", \"abc\")","position":{"start":{"line":90,"column":1,"offset":4321},"end":{"line":90,"column":24,"offset":4344},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":90,"column":24,"offset":4344},"end":{"line":91,"column":1,"offset":4345},"indent":[1]}},{"type":"inlineCode","value":"search(\"^abcd\", \"abcd\")","position":{"start":{"line":91,"column":1,"offset":4345},"end":{"line":91,"column":26,"offset":4370},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":4321},"end":{"line":91,"column":26,"offset":4370},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"But ","position":{"start":{"line":93,"column":1,"offset":4372},"end":{"line":93,"column":5,"offset":4376},"indent":[]}},{"type":"inlineCode","value":"search(\"bc\", \"abcd\")","position":{"start":{"line":93,"column":5,"offset":4376},"end":{"line":93,"column":27,"offset":4398},"indent":[]}},{"type":"text","value":" will just return ","position":{"start":{"line":93,"column":27,"offset":4398},"end":{"line":93,"column":45,"offset":4416},"indent":[]}},{"type":"inlineCode","value":"undefined","position":{"start":{"line":93,"column":45,"offset":4416},"end":{"line":93,"column":56,"offset":4427},"indent":[]}},{"type":"text","value":". We want it to return ","position":{"start":{"line":93,"column":56,"offset":4427},"end":{"line":93,"column":79,"offset":4450},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":93,"column":79,"offset":4450},"end":{"line":93,"column":85,"offset":4456},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":4372},"end":{"line":93,"column":85,"offset":4456},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If the user does not specify that the pattern matches the beginning of the text, then we want to search for that pattern at every possible starting point within the text. We will default to this behavior if the pattern does not begin with ","position":{"start":{"line":95,"column":1,"offset":4458},"end":{"line":95,"column":240,"offset":4697},"indent":[]}},{"type":"inlineCode","value":"^","position":{"start":{"line":95,"column":240,"offset":4697},"end":{"line":95,"column":243,"offset":4700},"indent":[]}},{"type":"html","value":"<sup>","position":{"start":{"line":95,"column":243,"offset":4700},"end":{"line":95,"column":248,"offset":4705},"indent":[]}},{"type":"link","title":null,"url":"#footnote1","children":[{"type":"text","value":"1","position":{"start":{"line":95,"column":249,"offset":4706},"end":{"line":95,"column":250,"offset":4707},"indent":[]}}],"position":{"start":{"line":95,"column":248,"offset":4705},"end":{"line":95,"column":263,"offset":4720},"indent":[]}},{"type":"html","value":"</sup>","position":{"start":{"line":95,"column":263,"offset":4720},"end":{"line":95,"column":269,"offset":4726},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":95,"column":269,"offset":4726},"end":{"line":95,"column":270,"offset":4727},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":4458},"end":{"line":95,"column":270,"offset":4727},"indent":[]}},{"type":"code","lang":"js","value":"function search(pattern, text) {\n  if (pattern[0] === \"^\") {\n    return match(pattern.slice(1), text)\n  } else {\n    // This code will run match(pattern, text.slice(index)) on every index of the text.\n    // This means that we test the pattern against every starting point of the text.\n    return text.split(\"\").some((_, index) => {\n      return match(pattern, text.slice(index))\n    })\n  }\n}","position":{"start":{"line":97,"column":1,"offset":4729},"end":{"line":109,"column":4,"offset":5131},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The ? Character","position":{"start":{"line":111,"column":4,"offset":5136},"end":{"line":111,"column":19,"offset":5151},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":5133},"end":{"line":111,"column":19,"offset":5151},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We want to be able to match 0 to 1 of the character before ","position":{"start":{"line":113,"column":1,"offset":5153},"end":{"line":113,"column":60,"offset":5212},"indent":[]}},{"type":"inlineCode","value":"?","position":{"start":{"line":113,"column":60,"offset":5212},"end":{"line":113,"column":63,"offset":5215},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":113,"column":63,"offset":5215},"end":{"line":113,"column":64,"offset":5216},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":5153},"end":{"line":113,"column":64,"offset":5216},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here are some examples","position":{"start":{"line":115,"column":1,"offset":5218},"end":{"line":115,"column":23,"offset":5240},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":5218},"end":{"line":115,"column":23,"offset":5240},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"search(\"ab?c\", \"ac\")","position":{"start":{"line":117,"column":1,"offset":5242},"end":{"line":117,"column":23,"offset":5264},"indent":[]}},{"type":"text","value":"    -> ","position":{"start":{"line":117,"column":23,"offset":5264},"end":{"line":117,"column":30,"offset":5271},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":117,"column":30,"offset":5271},"end":{"line":117,"column":36,"offset":5277},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":117,"column":36,"offset":5277},"end":{"line":118,"column":1,"offset":5278},"indent":[1]}},{"type":"inlineCode","value":"search(\"ab?c\", \"abc\")","position":{"start":{"line":118,"column":1,"offset":5278},"end":{"line":118,"column":24,"offset":5301},"indent":[]}},{"type":"text","value":"   -> ","position":{"start":{"line":118,"column":24,"offset":5301},"end":{"line":118,"column":30,"offset":5307},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":118,"column":30,"offset":5307},"end":{"line":118,"column":36,"offset":5313},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":118,"column":36,"offset":5313},"end":{"line":119,"column":1,"offset":5314},"indent":[1]}},{"type":"inlineCode","value":"search(\"a?b?c?\", \"abc\")","position":{"start":{"line":119,"column":1,"offset":5314},"end":{"line":119,"column":26,"offset":5339},"indent":[]}},{"type":"text","value":" -> ","position":{"start":{"line":119,"column":26,"offset":5339},"end":{"line":119,"column":30,"offset":5343},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":119,"column":30,"offset":5343},"end":{"line":119,"column":36,"offset":5349},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":119,"column":36,"offset":5349},"end":{"line":120,"column":1,"offset":5350},"indent":[1]}},{"type":"inlineCode","value":"search(\"a?b?c?\", \"\")","position":{"start":{"line":120,"column":1,"offset":5350},"end":{"line":120,"column":23,"offset":5372},"indent":[]}},{"type":"text","value":"    -> ","position":{"start":{"line":120,"column":23,"offset":5372},"end":{"line":120,"column":30,"offset":5379},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":120,"column":30,"offset":5379},"end":{"line":120,"column":36,"offset":5385},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":5242},"end":{"line":120,"column":36,"offset":5385},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The first step is to modify ","position":{"start":{"line":122,"column":1,"offset":5387},"end":{"line":122,"column":29,"offset":5415},"indent":[]}},{"type":"inlineCode","value":"match","position":{"start":{"line":122,"column":29,"offset":5415},"end":{"line":122,"column":36,"offset":5422},"indent":[]}},{"type":"text","value":" to detect when a ","position":{"start":{"line":122,"column":36,"offset":5422},"end":{"line":122,"column":54,"offset":5440},"indent":[]}},{"type":"inlineCode","value":"?","position":{"start":{"line":122,"column":54,"offset":5440},"end":{"line":122,"column":57,"offset":5443},"indent":[]}},{"type":"text","value":" character is present and then delegate to the ","position":{"start":{"line":122,"column":57,"offset":5443},"end":{"line":122,"column":104,"offset":5490},"indent":[]}},{"type":"inlineCode","value":"matchQuestion","position":{"start":{"line":122,"column":104,"offset":5490},"end":{"line":122,"column":119,"offset":5505},"indent":[]}},{"type":"text","value":" function, which we will define shortly.","position":{"start":{"line":122,"column":119,"offset":5505},"end":{"line":122,"column":159,"offset":5545},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":5387},"end":{"line":122,"column":159,"offset":5545},"indent":[]}},{"type":"code","lang":"js","value":"function match(pattern, text) {\n  if (pattern === \"\") {\n    return true\n  } else if (pattern === \"$\" && text === \"\") {\n    return true\n  // Notice that we are looking at pattern[1] instead of pattern[0].\n  // pattern[0] is the character to match 0 or 1 of.\n  } else if (pattern[1] === \"?\") {\n    return matchQuestion(pattern, text)\n  } else {\n    return matchOne(pattern[0], text[0]) && match(pattern.slice(1), text.slice(1))\n  }\n}","position":{"start":{"line":124,"column":1,"offset":5547},"end":{"line":138,"column":4,"offset":5988},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"matchQuestion","position":{"start":{"line":140,"column":1,"offset":5990},"end":{"line":140,"column":16,"offset":6005},"indent":[]}},{"type":"text","value":" needs to handle two cases:","position":{"start":{"line":140,"column":16,"offset":6005},"end":{"line":140,"column":43,"offset":6032},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":5990},"end":{"line":140,"column":43,"offset":6032},"indent":[]}},{"type":"list","ordered":true,"start":1,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Where the character before the ","position":{"start":{"line":141,"column":4,"offset":6036},"end":{"line":141,"column":35,"offset":6067},"indent":[]}},{"type":"inlineCode","value":"?","position":{"start":{"line":141,"column":35,"offset":6067},"end":{"line":141,"column":38,"offset":6070},"indent":[]}},{"type":"text","value":" is not matched but the text matches the remainder of the pattern (everything after the ","position":{"start":{"line":141,"column":38,"offset":6070},"end":{"line":141,"column":126,"offset":6158},"indent":[]}},{"type":"inlineCode","value":"?","position":{"start":{"line":141,"column":126,"offset":6158},"end":{"line":141,"column":129,"offset":6161},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":141,"column":129,"offset":6161},"end":{"line":141,"column":131,"offset":6163},"indent":[]}}],"position":{"start":{"line":141,"column":4,"offset":6036},"end":{"line":141,"column":131,"offset":6163},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":6033},"end":{"line":141,"column":131,"offset":6163},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Where the character before the ","position":{"start":{"line":142,"column":4,"offset":6167},"end":{"line":142,"column":35,"offset":6198},"indent":[]}},{"type":"inlineCode","value":"?","position":{"start":{"line":142,"column":35,"offset":6198},"end":{"line":142,"column":38,"offset":6201},"indent":[]}},{"type":"text","value":" is matched and the rest of the text (minus the 1 matched character) matches the remainder of the pattern.","position":{"start":{"line":142,"column":38,"offset":6201},"end":{"line":142,"column":144,"offset":6307},"indent":[]}}],"position":{"start":{"line":142,"column":4,"offset":6167},"end":{"line":142,"column":144,"offset":6307},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":6164},"end":{"line":142,"column":144,"offset":6307},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":6033},"end":{"line":142,"column":144,"offset":6307},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"If either of these cases is truthy, then ","position":{"start":{"line":144,"column":1,"offset":6309},"end":{"line":144,"column":42,"offset":6350},"indent":[]}},{"type":"inlineCode","value":"matchQuestion","position":{"start":{"line":144,"column":42,"offset":6350},"end":{"line":144,"column":57,"offset":6365},"indent":[]}},{"type":"text","value":" can return ","position":{"start":{"line":144,"column":57,"offset":6365},"end":{"line":144,"column":69,"offset":6377},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":144,"column":69,"offset":6377},"end":{"line":144,"column":75,"offset":6383},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":144,"column":75,"offset":6383},"end":{"line":144,"column":76,"offset":6384},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":6309},"end":{"line":144,"column":76,"offset":6384},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's consider the first case. How do we check if the text matches everything in the pattern except the ","position":{"start":{"line":146,"column":1,"offset":6386},"end":{"line":146,"column":105,"offset":6490},"indent":[]}},{"type":"inlineCode","value":"_?","position":{"start":{"line":146,"column":105,"offset":6490},"end":{"line":146,"column":109,"offset":6494},"indent":[]}},{"type":"text","value":" syntax? In order words, how do we check if the character before the ","position":{"start":{"line":146,"column":109,"offset":6494},"end":{"line":146,"column":178,"offset":6563},"indent":[]}},{"type":"inlineCode","value":"?","position":{"start":{"line":146,"column":178,"offset":6563},"end":{"line":146,"column":181,"offset":6566},"indent":[]}},{"type":"text","value":" appears 0 times? We strip 2 characters off the pattern (the first character is the one before the ","position":{"start":{"line":146,"column":181,"offset":6566},"end":{"line":146,"column":280,"offset":6665},"indent":[]}},{"type":"inlineCode","value":"?","position":{"start":{"line":146,"column":280,"offset":6665},"end":{"line":146,"column":283,"offset":6668},"indent":[]}},{"type":"text","value":" and the second is the ","position":{"start":{"line":146,"column":283,"offset":6668},"end":{"line":146,"column":306,"offset":6691},"indent":[]}},{"type":"inlineCode","value":"?","position":{"start":{"line":146,"column":306,"offset":6691},"end":{"line":146,"column":309,"offset":6694},"indent":[]}},{"type":"text","value":" itself) and invoke the match function.","position":{"start":{"line":146,"column":309,"offset":6694},"end":{"line":146,"column":348,"offset":6733},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":6386},"end":{"line":146,"column":348,"offset":6733},"indent":[]}},{"type":"code","lang":"js","value":"function matchQuestion(pattern, text) {\n  return match(pattern.slice(2), text);\n}","position":{"start":{"line":148,"column":1,"offset":6735},"end":{"line":152,"column":4,"offset":6826},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The second case is a little more challenging, but just like before, it reuses functions we've already written","position":{"start":{"line":154,"column":1,"offset":6828},"end":{"line":154,"column":110,"offset":6937},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":6828},"end":{"line":154,"column":110,"offset":6937},"indent":[]}},{"type":"code","lang":"js","value":"function matchQuestion(pattern, text) {\n  if (matchOne(pattern[0], text[0]) && match(pattern.slice(2), text.slice(1))) {\n    return true;\n  } else {\n    return match(pattern.slice(2), text);\n  }\n}","position":{"start":{"line":156,"column":1,"offset":6939},"end":{"line":164,"column":4,"offset":7145},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If the ","position":{"start":{"line":166,"column":1,"offset":7147},"end":{"line":166,"column":8,"offset":7154},"indent":[]}},{"type":"inlineCode","value":"text[0]","position":{"start":{"line":166,"column":8,"offset":7154},"end":{"line":166,"column":17,"offset":7163},"indent":[]}},{"type":"text","value":" matches ","position":{"start":{"line":166,"column":17,"offset":7163},"end":{"line":166,"column":26,"offset":7172},"indent":[]}},{"type":"inlineCode","value":"pattern[0]","position":{"start":{"line":166,"column":26,"offset":7172},"end":{"line":166,"column":38,"offset":7184},"indent":[]}},{"type":"text","value":", and the rest of the text (minus the part that is matched by ","position":{"start":{"line":166,"column":38,"offset":7184},"end":{"line":166,"column":100,"offset":7246},"indent":[]}},{"type":"inlineCode","value":"matchOne","position":{"start":{"line":166,"column":100,"offset":7246},"end":{"line":166,"column":110,"offset":7256},"indent":[]}},{"type":"text","value":") matches the remainder of the pattern, then we are golden. Note that we could rewrite the code like this:","position":{"start":{"line":166,"column":110,"offset":7256},"end":{"line":166,"column":216,"offset":7362},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":7147},"end":{"line":166,"column":216,"offset":7362},"indent":[]}},{"type":"code","lang":"js","value":"function matchQuestion(pattern, text) {\n  return (matchOne(pattern[0], text[0]) && match(pattern.slice(2), text.slice(1))) || match(pattern.slice(2), text);\n}","position":{"start":{"line":168,"column":1,"offset":7364},"end":{"line":172,"column":4,"offset":7532},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The one thing I like about this latter approach is that the boolean OR makes it explicitly clear that there are two cases, either of which may be true.","position":{"start":{"line":174,"column":1,"offset":7534},"end":{"line":174,"column":152,"offset":7685},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":7534},"end":{"line":174,"column":152,"offset":7685},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The * Character","position":{"start":{"line":176,"column":4,"offset":7690},"end":{"line":176,"column":19,"offset":7705},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":7687},"end":{"line":176,"column":19,"offset":7705},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We want to be able to match the character before the ","position":{"start":{"line":178,"column":1,"offset":7707},"end":{"line":178,"column":54,"offset":7760},"indent":[]}},{"type":"inlineCode","value":"*","position":{"start":{"line":178,"column":54,"offset":7760},"end":{"line":178,"column":57,"offset":7763},"indent":[]}},{"type":"text","value":" 0 or more times.","position":{"start":{"line":178,"column":57,"offset":7763},"end":{"line":178,"column":74,"offset":7780},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":7707},"end":{"line":178,"column":74,"offset":7780},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"All of these should return ","position":{"start":{"line":180,"column":1,"offset":7782},"end":{"line":180,"column":28,"offset":7809},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":180,"column":28,"offset":7809},"end":{"line":180,"column":34,"offset":7815},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":180,"column":34,"offset":7815},"end":{"line":180,"column":35,"offset":7816},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":7782},"end":{"line":180,"column":35,"offset":7816},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"search(\"a*\", \"\")","position":{"start":{"line":182,"column":1,"offset":7818},"end":{"line":182,"column":19,"offset":7836},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":182,"column":19,"offset":7836},"end":{"line":183,"column":1,"offset":7837},"indent":[1]}},{"type":"inlineCode","value":"search(\"a*\", \"aaaaaaa\")","position":{"start":{"line":183,"column":1,"offset":7837},"end":{"line":183,"column":26,"offset":7862},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":183,"column":26,"offset":7862},"end":{"line":184,"column":1,"offset":7863},"indent":[1]}},{"type":"inlineCode","value":"search(\"a*b\", \"aaaaaaab\")","position":{"start":{"line":184,"column":1,"offset":7863},"end":{"line":184,"column":28,"offset":7890},"indent":[]}}],"position":{"start":{"line":182,"column":1,"offset":7818},"end":{"line":184,"column":28,"offset":7890},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Similar to what we did when supporting ","position":{"start":{"line":186,"column":1,"offset":7892},"end":{"line":186,"column":40,"offset":7931},"indent":[]}},{"type":"inlineCode","value":"?","position":{"start":{"line":186,"column":40,"offset":7931},"end":{"line":186,"column":43,"offset":7934},"indent":[]}},{"type":"text","value":", we wan to delegate to a ","position":{"start":{"line":186,"column":43,"offset":7934},"end":{"line":186,"column":69,"offset":7960},"indent":[]}},{"type":"inlineCode","value":"matchStar","position":{"start":{"line":186,"column":69,"offset":7960},"end":{"line":186,"column":80,"offset":7971},"indent":[]}},{"type":"text","value":" function within our ","position":{"start":{"line":186,"column":80,"offset":7971},"end":{"line":186,"column":101,"offset":7992},"indent":[]}},{"type":"inlineCode","value":"match","position":{"start":{"line":186,"column":101,"offset":7992},"end":{"line":186,"column":108,"offset":7999},"indent":[]}},{"type":"text","value":" function","position":{"start":{"line":186,"column":108,"offset":7999},"end":{"line":186,"column":117,"offset":8008},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":7892},"end":{"line":186,"column":117,"offset":8008},"indent":[]}},{"type":"code","lang":"js","value":"function match(pattern, text) {\n  if (pattern === \"\") {\n    return true\n  } else if (pattern === \"$\" && text === \"\") {\n    return true\n  } else if (pattern[1] === \"?\") {\n    return matchQuestion(pattern, text)\n  } else if (pattern[1] === \"*\") {\n    return matchStar(pattern, text)\n  } else {\n    return matchOne(pattern[0], text[0]) && match(pattern.slice(1), text.slice(1))\n  }\n}","position":{"start":{"line":188,"column":1,"offset":8010},"end":{"line":202,"column":4,"offset":8400},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"matchStar","position":{"start":{"line":204,"column":1,"offset":8402},"end":{"line":204,"column":12,"offset":8413},"indent":[]}},{"type":"text","value":", like ","position":{"start":{"line":204,"column":12,"offset":8413},"end":{"line":204,"column":19,"offset":8420},"indent":[]}},{"type":"inlineCode","value":"matchQuestion","position":{"start":{"line":204,"column":19,"offset":8420},"end":{"line":204,"column":34,"offset":8435},"indent":[]}},{"type":"text","value":", also needs to handle two cases:","position":{"start":{"line":204,"column":34,"offset":8435},"end":{"line":204,"column":67,"offset":8468},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":8402},"end":{"line":204,"column":67,"offset":8468},"indent":[]}},{"type":"list","ordered":true,"start":1,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Where the character before the ","position":{"start":{"line":205,"column":4,"offset":8472},"end":{"line":205,"column":35,"offset":8503},"indent":[]}},{"type":"inlineCode","value":"*","position":{"start":{"line":205,"column":35,"offset":8503},"end":{"line":205,"column":38,"offset":8506},"indent":[]}},{"type":"text","value":" is not matched but the text matches the remainder of the pattern (everything after the ","position":{"start":{"line":205,"column":38,"offset":8506},"end":{"line":205,"column":126,"offset":8594},"indent":[]}},{"type":"inlineCode","value":"*","position":{"start":{"line":205,"column":126,"offset":8594},"end":{"line":205,"column":129,"offset":8597},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":205,"column":129,"offset":8597},"end":{"line":205,"column":131,"offset":8599},"indent":[]}}],"position":{"start":{"line":205,"column":4,"offset":8472},"end":{"line":205,"column":131,"offset":8599},"indent":[]}}],"position":{"start":{"line":205,"column":1,"offset":8469},"end":{"line":205,"column":131,"offset":8599},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Where the character before the ","position":{"start":{"line":206,"column":4,"offset":8603},"end":{"line":206,"column":35,"offset":8634},"indent":[]}},{"type":"inlineCode","value":"*","position":{"start":{"line":206,"column":35,"offset":8634},"end":{"line":206,"column":38,"offset":8637},"indent":[]}},{"type":"text","value":" is matched one or more times and the rest of the text matches the remainder of the pattern.","position":{"start":{"line":206,"column":38,"offset":8637},"end":{"line":206,"column":130,"offset":8729},"indent":[]}}],"position":{"start":{"line":206,"column":4,"offset":8603},"end":{"line":206,"column":130,"offset":8729},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":8600},"end":{"line":206,"column":130,"offset":8729},"indent":[]}}],"position":{"start":{"line":205,"column":1,"offset":8469},"end":{"line":206,"column":130,"offset":8729},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Since there are two cases that both result in a match (0 matches OR more matches), we know that ","position":{"start":{"line":208,"column":1,"offset":8731},"end":{"line":208,"column":97,"offset":8827},"indent":[]}},{"type":"inlineCode","value":"matchStar","position":{"start":{"line":208,"column":97,"offset":8827},"end":{"line":208,"column":108,"offset":8838},"indent":[]}},{"type":"text","value":" can be implemented with a boolean OR. Furthermore, case 1 for ","position":{"start":{"line":208,"column":108,"offset":8838},"end":{"line":208,"column":171,"offset":8901},"indent":[]}},{"type":"inlineCode","value":"matchStar","position":{"start":{"line":208,"column":171,"offset":8901},"end":{"line":208,"column":182,"offset":8912},"indent":[]}},{"type":"text","value":" is exactly the same as it was for ","position":{"start":{"line":208,"column":182,"offset":8912},"end":{"line":208,"column":217,"offset":8947},"indent":[]}},{"type":"inlineCode","value":"matchQuestion","position":{"start":{"line":208,"column":217,"offset":8947},"end":{"line":208,"column":232,"offset":8962},"indent":[]}},{"type":"text","value":" and can be implemented identically using ","position":{"start":{"line":208,"column":232,"offset":8962},"end":{"line":208,"column":274,"offset":9004},"indent":[]}},{"type":"inlineCode","value":"match(pattern.slice(2), text)","position":{"start":{"line":208,"column":274,"offset":9004},"end":{"line":208,"column":305,"offset":9035},"indent":[]}},{"type":"text","value":". That means we only need to formulate an expression that satisfies case 2.","position":{"start":{"line":208,"column":305,"offset":9035},"end":{"line":208,"column":380,"offset":9110},"indent":[]}}],"position":{"start":{"line":208,"column":1,"offset":8731},"end":{"line":208,"column":380,"offset":9110},"indent":[]}},{"type":"code","lang":"js","value":"function matchStar(pattern, text) {\n  return (matchOne(pattern[0], text[0]) && match(pattern, text.slice(1))) || match(pattern.slice(2), text);\n}","position":{"start":{"line":210,"column":1,"offset":9112},"end":{"line":214,"column":4,"offset":9267},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Refactoring","position":{"start":{"line":216,"column":4,"offset":9272},"end":{"line":216,"column":15,"offset":9283},"indent":[]}}],"position":{"start":{"line":216,"column":1,"offset":9269},"end":{"line":216,"column":15,"offset":9283},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can now go back and cleverly simplify ","position":{"start":{"line":218,"column":1,"offset":9285},"end":{"line":218,"column":42,"offset":9326},"indent":[]}},{"type":"inlineCode","value":"search","position":{"start":{"line":218,"column":42,"offset":9326},"end":{"line":218,"column":50,"offset":9334},"indent":[]}},{"type":"text","value":" using a trick I learned in Peter Norvig's ","position":{"start":{"line":218,"column":50,"offset":9334},"end":{"line":218,"column":93,"offset":9377},"indent":[]}},{"type":"link","title":null,"url":"https://www.udacity.com/course/design-of-computer-programs--cs212","children":[{"type":"text","value":"class","position":{"start":{"line":218,"column":94,"offset":9378},"end":{"line":218,"column":99,"offset":9383},"indent":[]}}],"position":{"start":{"line":218,"column":93,"offset":9377},"end":{"line":218,"column":167,"offset":9451},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":218,"column":167,"offset":9451},"end":{"line":218,"column":168,"offset":9452},"indent":[]}}],"position":{"start":{"line":218,"column":1,"offset":9285},"end":{"line":218,"column":168,"offset":9452},"indent":[]}},{"type":"code","lang":"js","value":"function search(pattern, text) {\n  if (pattern[0] === \"^\") {\n    return match(pattern.slice(1), text)\n  } else {\n    return match(\".*\" + pattern, text)\n  }\n}","position":{"start":{"line":220,"column":1,"offset":9454},"end":{"line":228,"column":4,"offset":9621},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We use the ","position":{"start":{"line":230,"column":1,"offset":9623},"end":{"line":230,"column":12,"offset":9634},"indent":[]}},{"type":"inlineCode","value":"*","position":{"start":{"line":230,"column":12,"offset":9634},"end":{"line":230,"column":15,"offset":9637},"indent":[]}},{"type":"text","value":" character itself to allow for the pattern to appear anywhere in the string. The prepended ","position":{"start":{"line":230,"column":15,"offset":9637},"end":{"line":230,"column":106,"offset":9728},"indent":[]}},{"type":"inlineCode","value":".*","position":{"start":{"line":230,"column":106,"offset":9728},"end":{"line":230,"column":110,"offset":9732},"indent":[]}},{"type":"text","value":" says that any number of any character can appear before the pattern we wish to match.","position":{"start":{"line":230,"column":110,"offset":9732},"end":{"line":230,"column":196,"offset":9818},"indent":[]}}],"position":{"start":{"line":230,"column":1,"offset":9623},"end":{"line":230,"column":196,"offset":9818},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":232,"column":4,"offset":9823},"end":{"line":232,"column":14,"offset":9833},"indent":[]}}],"position":{"start":{"line":232,"column":1,"offset":9820},"end":{"line":232,"column":14,"offset":9833},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It's remarkable how simple and elegant the code for such a sophisticated and generalized program can be. The full source is available in this ","position":{"start":{"line":234,"column":1,"offset":9835},"end":{"line":234,"column":143,"offset":9977},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/nadrane/build-your-own-regex","children":[{"type":"text","value":"GitHub repository","position":{"start":{"line":234,"column":144,"offset":9978},"end":{"line":234,"column":161,"offset":9995},"indent":[]}}],"position":{"start":{"line":234,"column":143,"offset":9977},"end":{"line":234,"column":211,"offset":10045},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":9835},"end":{"line":234,"column":211,"offset":10045},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is a ","position":{"start":{"line":236,"column":1,"offset":10047},"end":{"line":236,"column":11,"offset":10057},"indent":[]}},{"type":"link","title":null,"url":"https://nickdrane.com/regex-and-automated-test-fuzzing/","children":[{"type":"text","value":"follow up article","position":{"start":{"line":236,"column":12,"offset":10058},"end":{"line":236,"column":29,"offset":10075},"indent":[]}}],"position":{"start":{"line":236,"column":11,"offset":10057},"end":{"line":236,"column":87,"offset":10133},"indent":[]}},{"type":"text","value":" where I fuzz test the regex engine.","position":{"start":{"line":236,"column":87,"offset":10133},"end":{"line":236,"column":123,"offset":10169},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":10047},"end":{"line":236,"column":123,"offset":10169},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Footnotes","position":{"start":{"line":239,"column":6,"offset":10177},"end":{"line":239,"column":15,"offset":10186},"indent":[]}}],"position":{"start":{"line":239,"column":1,"offset":10172},"end":{"line":239,"column":15,"offset":10186},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<a name=\"footnote1\">","position":{"start":{"line":240,"column":1,"offset":10187},"end":{"line":240,"column":21,"offset":10207},"indent":[]}},{"type":"text","value":"1","position":{"start":{"line":240,"column":21,"offset":10207},"end":{"line":240,"column":22,"offset":10208},"indent":[]}},{"type":"html","value":"</a>","position":{"start":{"line":240,"column":22,"offset":10208},"end":{"line":240,"column":26,"offset":10212},"indent":[]}},{"type":"text","value":": There is a small bug in this code that I'm choosing to ignore. We don't account for the case that text is an empty string. Currently when ","position":{"start":{"line":240,"column":26,"offset":10212},"end":{"line":240,"column":166,"offset":10352},"indent":[]}},{"type":"inlineCode","value":"text === ''","position":{"start":{"line":240,"column":166,"offset":10352},"end":{"line":240,"column":179,"offset":10365},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":240,"column":179,"offset":10365},"end":{"line":240,"column":181,"offset":10367},"indent":[]}},{"type":"inlineCode","value":"text.split(\"\")","position":{"start":{"line":240,"column":181,"offset":10367},"end":{"line":240,"column":197,"offset":10383},"indent":[]}},{"type":"text","value":" will return ","position":{"start":{"line":240,"column":197,"offset":10383},"end":{"line":240,"column":210,"offset":10396},"indent":[]}},{"type":"inlineCode","value":"[]","position":{"start":{"line":240,"column":210,"offset":10396},"end":{"line":240,"column":214,"offset":10400},"indent":[]}},{"type":"text","value":" and will not appropriately call ","position":{"start":{"line":240,"column":214,"offset":10400},"end":{"line":240,"column":247,"offset":10433},"indent":[]}},{"type":"inlineCode","value":"match","position":{"start":{"line":240,"column":247,"offset":10433},"end":{"line":240,"column":254,"offset":10440},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":240,"column":254,"offset":10440},"end":{"line":240,"column":255,"offset":10441},"indent":[]}}],"position":{"start":{"line":240,"column":1,"offset":10187},"end":{"line":240,"column":255,"offset":10441},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":240,"column":255,"offset":10441}}}}