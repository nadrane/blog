{"version":3,"sources":["webpack:///./src/templates/category.js","webpack:///./src/components/articleList/index.jsx"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_articleList__WEBPACK_IMPORTED_MODULE_2__","Category","_ref","data","errors","length","console","log","articles","allMarkdownRemark","edges","a","createElement","ArticleList","forEach","_ref2","message","react__WEBPACK_IMPORTED_MODULE_3___default","sortedArticles","sort","edge1","edge2","dateA","Date","node","frontmatter","date","dateB","map","_ref3","html","slug","_node$frontmatter","title","excerpt","split","_article__WEBPACK_IMPORTED_MODULE_4__","key","content"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAaeU,UARE,SAAAC,GAAsB,IAAnBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,OACpBA,GAAUA,EAAOC,QACnBC,QAAQC,IAAI,2BAA4BH,GAE1C,IAAMI,EAAWL,EAAKM,kBAAkBC,MACxC,OAAOb,EAAAc,EAAAC,cAACb,EAAA,EAAD,KAASF,EAAAc,EAAAC,cAACZ,EAAA,EAAD,CAAaQ,SAAUA,EAAUJ,OAAQA,MAKpD,IAAMT,EAAK,+FCcHkB,IA1BK,SAAAX,GAA0B,IAAvBM,EAAuBN,EAAvBM,SAAUJ,EAAaF,EAAbE,OAC/B,GAAIA,GAAUA,EAAOC,OAInB,OAHAD,EAAOU,QAAQ,SAAAC,GAAiB,IAAdC,EAAcD,EAAdC,QAChBV,QAAQC,IAAI,uBAAwBS,KAE/BC,EAAAN,EAAAC,cAAA,yDAGT,IAAMM,EAAiBV,EAASW,KAAK,SAACC,EAAOC,GAC3C,IAAMC,EAAQ,IAAIC,KAAKH,EAAMI,KAAKC,YAAYC,MACxCC,EAAQ,IAAIJ,KAAKF,EAAMG,KAAKC,YAAYC,MAC9C,OAAOJ,EAAQK,GAAS,EAAIL,EAAQK,EAAQ,EAAI,IAGlD,OACEV,EAAAN,EAAAC,cAAA,WACGM,EAAeU,IAAI,SAAAC,GAAc,IAAXL,EAAWK,EAAXL,KACbM,EAAeN,EAAfM,KAAMC,EAASP,EAATO,KADkBC,EAERR,EAAKC,YAArBQ,EAFwBD,EAExBC,MAAOP,EAFiBM,EAEjBN,KACTQ,EAAUJ,EAAKK,MAAM,uBAAiB,GAC5C,OAAOlB,EAAAN,EAAAC,cAACwB,EAAA,EAAD,CAASC,IAAKJ,EAAOP,KAAMA,EAAMO,MAAOA,EAAOF,KAAMA,EAAMO,QAASJ","file":"component---src-templates-category-js-102d5a211359f5fd076b.js","sourcesContent":["import React from 'react';\nimport Layout from '../components/layout';\nimport ArticleList from '../components/articleList';\nimport { graphql } from 'gatsby';\n\nconst Category = ({ data, errors }) => {\n  if (errors && errors.length) {\n    console.log('errors rendering article', errors);\n  }\n  const articles = data.allMarkdownRemark.edges;\n  return <Layout>{<ArticleList articles={articles} errors={errors} />}</Layout>;\n};\n\nexport default Category;\n\nexport const query = graphql`\n  query RenderCategoriesQuery($category: String) {\n    allMarkdownRemark(filter: { frontmatter: { categories: { in: [$category] } } }) {\n      edges {\n        node {\n          html\n          slug\n          frontmatter {\n            title\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport Article from '../article';\n\nconst ArticleList = ({ articles, errors }) => {\n  if (errors && errors.length) {\n    errors.forEach(({ message }) => {\n      console.log('error in articleList', message);\n    });\n    return <h1>Errors found: Check the console for details</h1>;\n  }\n\n  const sortedArticles = articles.sort((edge1, edge2) => {\n    const dateA = new Date(edge1.node.frontmatter.date);\n    const dateB = new Date(edge2.node.frontmatter.date);\n    return dateA > dateB ? -1 : dateA < dateB ? 1 : 0;\n  });\n\n  return (\n    <div>\n      {sortedArticles.map(({ node }) => {\n        const { html, slug } = node;\n        const { title, date } = node.frontmatter;\n        const excerpt = html.split('<!-- more -->')[0];\n        return <Article key={title} date={date} title={title} slug={slug} content={excerpt} />;\n      })}\n    </div>\n  );\n};\n\nexport default ArticleList;\n"],"sourceRoot":""}