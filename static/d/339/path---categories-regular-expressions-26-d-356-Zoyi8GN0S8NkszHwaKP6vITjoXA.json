{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>I stumbled upon an <a href=\"https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html\">article</a> the other day where Rob Pike implements a rudimentary regular expression engine in c. I converted his code to Javascript and added test specs so that someone can self-guide themselves through the creation of the regex engine. The specs and solution can be found in this <a href=\"https://github.com/nadrane/build-your-own-regex\">GitHub repository</a>. This blog post walks through my solution.</p>\n<!-- more -->\n<h2>The Problem</h2>\n<p>Our regex engine will support the following syntax:</p>\n<table>\n<thead>\n<tr>\n<th>Syntax</th>\n<th>Meaning</th>\n<th>Example</th>\n<th>matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>Matches the specified character literal</td>\n<td>q</td>\n<td>q</td>\n</tr>\n<tr>\n<td>*</td>\n<td>Matches 0 or more of the previous character</td>\n<td>a*</td>\n<td>\"\", a, aa, aaa</td>\n</tr>\n<tr>\n<td>?</td>\n<td>Matches 0 or 1 of the previous character</td>\n<td>a?</td>\n<td>\"\", a</td>\n</tr>\n<tr>\n<td>.</td>\n<td>Matches any character literal</td>\n<td>.</td>\n<td>a, b, c, d, e ...</td>\n</tr>\n<tr>\n<td>^</td>\n<td>Matches the start of a string</td>\n<td>^c</td>\n<td>c, ca, caa, cbb ...</td>\n</tr>\n<tr>\n<td>$</td>\n<td>Matches the end of a string</td>\n<td>a$</td>\n<td>ba, baaa, qwerta ...</td>\n</tr>\n</tbody>\n</table>\n<p>The goal is to provide a syntax robust enough to match a large portion of regex use cases with minimal code.</p>\n<h2>Matching One Character</h2>\n<p>The first step is to write a function that takes in a one character pattern and a one character text string and returns a boolean indicating if they match. A pattern of <code>.</code> is considered a wildcard and matches against any character literal.</p>\n<p>Here are some examples</p>\n<p><code>matchOne('a', 'a')</code> -> <code>true</code>\n<code>matchOne('.', 'z')</code> -> <code>true</code>\n<code>matchOne('', 'h')</code> -> <code>true</code>\n<code>matchOne('a', 'b')</code> -> <code>false</code>\n<code>matchOne('p', '')</code> -> <code>false</code></p>\n<pre><code class=\"language-js\">function matchOne(pattern, text) {\n  if (!pattern) return true; // Any text matches an empty pattern\n  if (!text) return false; // If the pattern is defined but the text is empty, there cannot be a match\n  if (pattern === '.') return true; // Any inputted text matches the wildcard\n  return pattern === text;\n}\n</code></pre>\n<h2>Matching Same Length Strings</h2>\n<p>Now we want to add support for patterns and text strings of greater length. For now, let's only consider a pattern/text pair of the same length. I happen to know that the solution lends itself very naturally to recursion, so we will use it here. We are going to want to repeatedly invoke <code>matchOne</code> on successive pairs of characters from the pattern/text combination.</p>\n<pre><code class=\"language-js\">function match(pattern, text) {\n  if (pattern === '') return true;\n  // Our base case - if the pattern is empty, any inputted text is a match\n  else return matchOne(pattern[0], text[0]) &#x26;&#x26; match(pattern.slice(1), text.slice(1));\n}\n</code></pre>\n<p>The above code advances character by character across the the pattern/text pair. It first compares <code>pattern[0]</code> to <code>text[0]</code> and then <code>pattern[1]</code> to <code>text[1]</code> and continues comparing <code>pattern[i]</code> to <code>text[i]</code> until <code>i === pattern.length - 1</code>. If they ever don't match, then we know that the pattern cannot match the text.</p>\n<p>Let's take an example. Suppose we invoke <code>match('a.c', 'abc')</code>, which returns <code>matchOne('a', 'a') &#x26;&#x26; match('.c', 'bc')</code>.</p>\n<p>If we continue evaluating these functions, we get <code>matchOne('a', 'a') &#x26;&#x26; matchOne('.', 'b') &#x26;&#x26; matchOne('c', 'c') &#x26;&#x26; match(\"\", \"\")</code>, which is just equal to <code>true &#x26;&#x26; true &#x26;&#x26; true &#x26;&#x26; true</code>, So we have a match!</p>\n<h2>The $ Character</h2>\n<p>Let's add support for the special pattern character <code>$</code> that allows us to match the end of a string. The solution simply requires adding an additional base case to the match function.</p>\n<pre><code class=\"language-js\">function match(pattern, text) {\n  if (pattern === '') return true;\n  if (pattern === '$' &#x26;&#x26; text === '') return true;\n  else return matchOne(pattern[0], text[0]) &#x26;&#x26; match(pattern.slice(1), text.slice(1));\n}\n</code></pre>\n<h2>The ^ Character</h2>\n<p>Let's add support for the special pattern character <code>^</code> that allows us to match the beginning of a string. I'm going to introduce a new function called <code>search</code>.</p>\n<pre><code class=\"language-js\">function search(pattern, text) {\n  if (pattern[0] === '^') {\n    return match(pattern.slice(1), text);\n  }\n}\n</code></pre>\n<p>This function will be the new entry point to our code. Up till this point, we were only matching patterns that began at the beginning of the text. We are simply making that more clear now by forcing the user to preface the pattern with a <code>^</code>. But how do we support patterns that appear anywhere within the text?</p>\n<h2>Matches Starting Anywhere</h2>\n<p>Currently, the following return <code>true</code></p>\n<p><code>search(\"^abc\", \"abc\")</code>\n<code>search(\"^abcd\", \"abcd\")</code></p>\n<p>But <code>search(\"bc\", \"abcd\")</code> will just return <code>undefined</code>. We want it to return <code>true</code></p>\n<p>If the user does not specify that the pattern matches the beginning of the text, then we want to search for that pattern at every possible starting point within the text. We will default to this behavior if the pattern does not begin with <code>^</code><sup><a href=\"#footnote1\">1</a></sup>.</p>\n<pre><code class=\"language-js\">function search(pattern, text) {\n  if (pattern[0] === '^') {\n    return match(pattern.slice(1), text);\n  } else {\n    // This code will run match(pattern, text.slice(index)) on every index of the text.\n    // This means that we test the pattern against every starting point of the text.\n    return text.split('').some((_, index) => {\n      return match(pattern, text.slice(index));\n    });\n  }\n}\n</code></pre>\n<h2>The ? Character</h2>\n<p>We want to be able to match 0 to 1 of the character before <code>?</code>.</p>\n<p>Here are some examples</p>\n<p><code>search(\"ab?c\", \"ac\")</code> -> <code>true</code>\n<code>search(\"ab?c\", \"abc\")</code> -> <code>true</code>\n<code>search(\"a?b?c?\", \"abc\")</code> -> <code>true</code>\n<code>search(\"a?b?c?\", \"\")</code> -> <code>true</code></p>\n<p>The first step is to modify <code>match</code> to detect when a <code>?</code> character is present and then delegate to the <code>matchQuestion</code> function, which we will define shortly.</p>\n<pre><code class=\"language-js\">function match(pattern, text) {\n  if (pattern === '') {\n    return true;\n  } else if (pattern === '$' &#x26;&#x26; text === '') {\n    return true;\n    // Notice that we are looking at pattern[1] instead of pattern[0].\n    // pattern[0] is the character to match 0 or 1 of.\n  } else if (pattern[1] === '?') {\n    return matchQuestion(pattern, text);\n  } else {\n    return matchOne(pattern[0], text[0]) &#x26;&#x26; match(pattern.slice(1), text.slice(1));\n  }\n}\n</code></pre>\n<p><code>matchQuestion</code> needs to handle two cases:</p>\n<ol>\n<li>Where the character before the <code>?</code> is not matched but the text matches the remainder of the pattern (everything after the <code>?</code>).</li>\n<li>Where the character before the <code>?</code> is matched and the rest of the text (minus the 1 matched character) matches the remainder of the pattern.</li>\n</ol>\n<p>If either of these cases is truthy, then <code>matchQuestion</code> can return <code>true</code>.</p>\n<p>Let's consider the first case. How do we check if the text matches everything in the pattern except the <code>_?</code> syntax? In order words, how do we check if the character before the <code>?</code> appears 0 times? We strip 2 characters off the pattern (the first character is the one before the <code>?</code> and the second is the <code>?</code> itself) and invoke the match function.</p>\n<pre><code class=\"language-js\">function matchQuestion(pattern, text) {\n  return match(pattern.slice(2), text);\n}\n</code></pre>\n<p>The second case is a little more challenging, but just like before, it reuses functions we've already written</p>\n<pre><code class=\"language-js\">function matchQuestion(pattern, text) {\n  if (matchOne(pattern[0], text[0]) &#x26;&#x26; match(pattern.slice(2), text.slice(1))) {\n    return true;\n  } else {\n    return match(pattern.slice(2), text);\n  }\n}\n</code></pre>\n<p>If the <code>text[0]</code> matches <code>pattern[0]</code>, and the rest of the text (minus the part that is matched by <code>matchOne</code>) matches the remainder of the pattern, then we are golden. Note that we could rewrite the code like this:</p>\n<pre><code class=\"language-js\">function matchQuestion(pattern, text) {\n  return (\n    (matchOne(pattern[0], text[0]) &#x26;&#x26; match(pattern.slice(2), text.slice(1))) ||\n    match(pattern.slice(2), text)\n  );\n}\n</code></pre>\n<p>The one thing I like about this latter approach is that the boolean OR makes it explicitly clear that there are two cases, either of which may be true.</p>\n<h2>The * Character</h2>\n<p>We want to be able to match the character before the <code>*</code> 0 or more times.</p>\n<p>All of these should return <code>true</code>.</p>\n<p><code>search(\"a*\", \"\")</code>\n<code>search(\"a*\", \"aaaaaaa\")</code>\n<code>search(\"a*b\", \"aaaaaaab\")</code></p>\n<p>Similar to what we did when supporting <code>?</code>, we wan to delegate to a <code>matchStar</code> function within our <code>match</code> function</p>\n<pre><code class=\"language-js\">function match(pattern, text) {\n  if (pattern === '') {\n    return true;\n  } else if (pattern === '$' &#x26;&#x26; text === '') {\n    return true;\n  } else if (pattern[1] === '?') {\n    return matchQuestion(pattern, text);\n  } else if (pattern[1] === '*') {\n    return matchStar(pattern, text);\n  } else {\n    return matchOne(pattern[0], text[0]) &#x26;&#x26; match(pattern.slice(1), text.slice(1));\n  }\n}\n</code></pre>\n<p><code>matchStar</code>, like <code>matchQuestion</code>, also needs to handle two cases:</p>\n<ol>\n<li>Where the character before the <code>*</code> is not matched but the text matches the remainder of the pattern (everything after the <code>*</code>).</li>\n<li>Where the character before the <code>*</code> is matched one or more times and the rest of the text matches the remainder of the pattern.</li>\n</ol>\n<p>Since there are two cases that both result in a match (0 matches OR more matches), we know that <code>matchStar</code> can be implemented with a boolean OR. Furthermore, case 1 for <code>matchStar</code> is exactly the same as it was for <code>matchQuestion</code> and can be implemented identically using <code>match(pattern.slice(2), text)</code>. That means we only need to formulate an expression that satisfies case 2.</p>\n<pre><code class=\"language-js\">function matchStar(pattern, text) {\n  return (\n    (matchOne(pattern[0], text[0]) &#x26;&#x26; match(pattern, text.slice(1))) || match(pattern.slice(2), text)\n  );\n}\n</code></pre>\n<h2>Refactoring</h2>\n<p>We can now go back and cleverly simplify <code>search</code> using a trick I learned in Peter Norvig's <a href=\"https://www.udacity.com/course/design-of-computer-programs--cs212\">class</a>.</p>\n<pre><code class=\"language-js\">function search(pattern, text) {\n  if (pattern[0] === '^') {\n    return match(pattern.slice(1), text);\n  } else {\n    return match('.*' + pattern, text);\n  }\n}\n</code></pre>\n<p>We use the <code>*</code> character itself to allow for the pattern to appear anywhere in the string. The prepended <code>.*</code> says that any number of any character can appear before the pattern we wish to match.</p>\n<h2>Conclusion</h2>\n<p>It's remarkable how simple and elegant the code for such a sophisticated and generalized program can be. The full source is available in this <a href=\"https://github.com/nadrane/build-your-own-regex\">GitHub repository</a></p>\n<p>Here is a <a href=\"https://nickdrane.com/regex-and-automated-test-fuzzing/\">follow up article</a> where I fuzz test the regex engine.</p>\n<p><em>If you work at a company using javascript, I do <a href=\"/hire-me\">consulting</a> work and am currently looking for new clients. Please <a href=\"mailto:nick@nickdrane.com\">contact me</a> for more details.</em></p>\n<h4>Footnotes</h4>\n<p><a name=\"footnote1\">1</a>: There is a small bug in this code that I'm choosing to ignore. We don't account for the case that text is an empty string. Currently when <code>text === ''</code>, <code>text.split(\"\")</code> will return <code>[]</code> and will not appropriately call <code>match</code>.</p>","fields":{"slug":"build-your-own-regex"},"frontmatter":{"title":"Build a Regex Engine in Less than 40 Lines of Code","date":"2017-11-28T00:00:00.000Z"}}},{"node":{"html":"<p>I posted my article <a href=\"https://nickdrane.com/build-your-own-regex/\">Build Your Own Regex Engine</a> on Reddit the other day, and one of the commenters claimed that the implementation should be trivial to break. Since I had already tested my program against a customized suite of tests, the remark got me thinking about how I could further increase my confidence in the correctness of my program. One extremely low cost however effective strategy for identifying faults in software is known as fuzzing.</p>\n<!-- more -->\n<h2>What is Fuzzing?</h2>\n<p>Fuzzing is a automated testing technique where a program is provided a series of invalid or randomly generated inputs. If we were testing an HTTP API, we might send randomized combinations of query parameters and ensure that our server always returns a 2xx status code. Since Javascript comes with a regular expression engine, my fuzzer asserts that given the same random input, both engine's return the same output.</p>\n<h2>Specifying the Grammar</h2>\n<p>The first step is to specify the grammar that our regex engine supports.</p>\n<pre><code class=\"language-js\">const lowercase = 'abcdefghijklmnopqrstuvwxyz'.split('');\nconst uppercase = lowercase.map(letter => letter.toUpperCase());\nconst special = ['?', '*', '.'];\nconst regexGrammar = special.concat(lowercase, uppercase);\n</code></pre>\n<p>You might notice we skipped the <code>^</code> and <code>$</code> characters. More on these in a little bit.</p>\n<h2>Generated Valid Regular Expressions</h2>\n<p>We want to write a function <code>generateRegex</code> that will select <code>n</code> random characters from the <code>regexGrammar</code> and concatenate them together into a string. This string will be used to create a test regex.</p>\n<p>Here are three possible returns values of <code>generateRegex</code>:</p>\n<ol>\n<li><code>.AnrQ?QNLQX.syBsOcJlbJZd</code></li>\n<li><code>.LkuZ?Ynj</code></li>\n<li><code>.UN?eiyddhXvyNj</code></li>\n</ol>\n<pre><code class=\"language-js\">function generateRegex(n) {\n  let regexString = new Array(n)\n    .fill(0)\n    .map(chooseOne)\n    .join('');\n\n  return regexString;\n}\n\n// Pick one element randomly from the grammar and return it\nfunction chooseOne() {\n  return regexGrammar[Math.floor(Math.random() * regexGrammar.length)];\n}\n</code></pre>\n<h2>Removing Invalid Regex Strings</h2>\n<p>My regex engine only deals with a very small subset of available regex syntax, and furthermore, it does not contain any error handling. What happens if <code>generateRegex</code> returns the pattern <code>**</code> or <code>^*</code>? My regex engine was never designed to handle these inputs, though they are possible outputs of <code>generateRegex</code>. We need to make a choice about how to handle these expressions. Since the primary goal of my regex engine is accessibility and simplicity of implementation, I'm not about to begin supporting these edge cases. That means my fuzzer should not generate them either.</p>\n<p>One solution to determine if a given regex string is valid is to specify my regex engine's allowable grammar in <a href=\"https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form\">BNF</a>. BNF is a formal notation for specifying the syntax of a language. Given this BNF notation, I could ask another program if the randomly generated regex string can be created using my BNF specification. This sounds like a little more work than I want, however, since the invalid cases can simply be manually enumerated and filtered.</p>\n<pre><code class=\"language-js\">function validRegex(regexString) {\n  return (\n    // None of the following sequences are properly\n    // defined by my regex engine\n    regexString.indexOf('**') === -1 &#x26;&#x26;\n    regexString.indexOf('??') === -1 &#x26;&#x26;\n    regexString.indexOf('*?') === -1 &#x26;&#x26;\n    regexString.indexOf('?*') === -1 &#x26;&#x26;\n    regexString.indexOf('^?') === -1 &#x26;&#x26;\n    regexString.indexOf('^*') === -1 &#x26;&#x26;\n    !regexString.startsWith('*') &#x26;&#x26;\n    !regexString.startsWith('?')\n  );\n}\n\nfunction generateRegex(n) {\n  let regexString = new Array(n)\n    .fill(0)\n    .map(chooseOne)\n    .join('');\n\n  // If the generated string is valid, return it\n  if (validRegex(regexString)) {\n    return regexString;\n    // Otherwise generate a new string and return that\n  } else {\n    return generateRegexString(n);\n  }\n}\n</code></pre>\n<p>One more modification to <code>generateRegex</code> is necessary to support <code>^</code> and <code>$</code>, and then we are basically done.</p>\n<pre><code class=\"language-js\">function generateRegex(n) {\n  ...\n  // We need to ensure that '^' and '$' only go at the beginning\n  // and the end of the string, respectively.\n  // Give each a 10% probability of appearing in a string\n  if (Math.random() &#x3C; 0.1) regexString = \"^\" + regexString;\n  if (Math.random() &#x3C; 0.1) regexString = regexString + \"$\";\n  ...\n}\n</code></pre>\n<h2>Comparing Regex Implementations</h2>\n<p>All that is required now is to repeatedly invoke <code>generateRegex</code> a fixed number of times and then compare the output of the native JS implementation with the output of my implementation.</p>\n<pre><code class=\"language-js\">// The corpus is the string of text we are matching the pattern against.\n// I used a segment of Gulliver's Travels from Project Gutenberg.\nfunction fuzzer(totalTests, corpus) {\n  const maxRegexLength = 50; // max will actually be 50 - 1\n  let testsRun = 0;\n  while (testsRun &#x3C; totalTests) {\n    const regexLength = getRandomInt(1, maxRegexLength);\n    const regexString = generateRegexString(regexLength);\n    const testRegex = new RegExp(regexString);\n    try {\n      assert.equal(testRegex.test(corpus), myRegexEngine(regexString, corpus));\n    } catch (err) {\n      console.log(testRegex);\n    }\n    testsRun++;\n  }\n}\n\n// Thank you Mozzila :)\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n</code></pre>\n<h2>Results</h2>\n<p>I ran my fuzzer for a couple million randomly generated cases and ended up learning two things about my regex engine.</p>\n<ol>\n<li>\n<p>My implementation fails extraordinarily with longer texts. I knew recursion would be a problem for any practical regex implementation (at least without <a href=\"https://en.wikipedia.org/wiki/Tail_call\">tail calls</a>) and would cause stack overflows, but I didn't expect it to fail with texts that were only a couple thousand words. I think this is because I make liberal use of backtracking algorithms in <code>matchQuestion</code> and <code>matchStar</code>. Since I was forced to test with a relatively short input text, it makes sense to use multiple text inputs to increase the probability of discovering an error.</p>\n</li>\n<li>\n<p>My implementation treats the <code>.</code> character differently than the native implementation. In the RegExp implementation, <code>.</code> will not match various line terminators (<code>\\n</code>, <code>\\r</code>, <code>\\u2028</code> or <code>\\u2029</code>). My implementation does.</p>\n</li>\n</ol>\n<h2>Conclusion</h2>\n<p>The biggest takeaway is that fuzzing is an simple and inexpensive way to enumerate enormous sets of inputs and identify bugs in your software. This fuzzer took less than an hour to write.</p>\n<p>But remember, this fuzzer's blessing of a couple million input combinations <strong>does not</strong> verify the correctness of my program. Not even close. A fuzzer is a tool to identify potential errors. Unless you enumerate all possible inputs (completely impossible in this case where they are infinite), you are not guaranteed your program is error free.</p>","fields":{"slug":"regex-and-automated-test-fuzzing"},"frontmatter":{"title":"Regex And Automated Test Fuzzing","date":"2017-12-06T00:00:00.000Z"}}}]}},"pageContext":{"category":"Regular Expressions"}}