{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>I stumbled upon an <a href=\"https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html\">article</a> the other day where Rob Pike implements a rudimentary regular expression engine in c. I converted his code to Javascript and added test specs so that someone can self-guide themselves through the creation of the regex engine. The specs and solution can be found in this <a href=\"https://github.com/nadrane/build-your-own-regex\">GitHub repository</a>. This blog post walks through my solution.</p>\n<!-- more -->\n<h2>The Problem</h2>\n<p>Our regex engine will support the following syntax:</p>\n<table>\n<thead>\n<tr>\n<th>Syntax</th>\n<th>Meaning</th>\n<th>Example</th>\n<th>matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>Matches the specified character literal</td>\n<td>q</td>\n<td>q</td>\n</tr>\n<tr>\n<td>*</td>\n<td>Matches 0 or more of the previous character</td>\n<td>a*</td>\n<td>\"\", a, aa, aaa</td>\n</tr>\n<tr>\n<td>?</td>\n<td>Matches 0 or 1 of the previous character</td>\n<td>a?</td>\n<td>\"\", a</td>\n</tr>\n<tr>\n<td>.</td>\n<td>Matches any character literal</td>\n<td>.</td>\n<td>a, b, c, d, e ...</td>\n</tr>\n<tr>\n<td>^</td>\n<td>Matches the start of a string</td>\n<td>^c</td>\n<td>c, ca, caa, cbb ...</td>\n</tr>\n<tr>\n<td>$</td>\n<td>Matches the end of a string</td>\n<td>a$</td>\n<td>ba, baaa, qwerta ...</td>\n</tr>\n</tbody>\n</table>\n<p>The goal is to provide a syntax robust enough to match a large portion of regex use cases with minimal code.</p>\n<h2>Matching One Character</h2>\n<p>The first step is to write a function that takes in a one character pattern and a one character text string and returns a boolean indicating if they match. A pattern of <code>.</code> is considered a wildcard and matches against any character literal.</p>\n<p>Here are some examples</p>\n<p><code>matchOne('a', 'a')</code> -> <code>true</code>\n<code>matchOne('.', 'z')</code> -> <code>true</code>\n<code>matchOne('', 'h')</code> -> <code>true</code>\n<code>matchOne('a', 'b')</code> -> <code>false</code>\n<code>matchOne('p', '')</code> -> <code>false</code></p>\n<pre><code class=\"language-js\">function matchOne(pattern, text) {\n  if (!pattern) return true; // Any text matches an empty pattern\n  if (!text) return false; // If the pattern is defined but the text is empty, there cannot be a match\n  if (pattern === '.') return true; // Any inputted text matches the wildcard\n  return pattern === text;\n}\n</code></pre>\n<h2>Matching Same Length Strings</h2>\n<p>Now we want to add support for patterns and text strings of greater length. For now, let's only consider a pattern/text pair of the same length. I happen to know that the solution lends itself very naturally to recursion, so we will use it here. We are going to want to repeatedly invoke <code>matchOne</code> on successive pairs of characters from the pattern/text combination.</p>\n<pre><code class=\"language-js\">function match(pattern, text) {\n  if (pattern === '') return true;\n  // Our base case - if the pattern is empty, any inputted text is a match\n  else return matchOne(pattern[0], text[0]) &#x26;&#x26; match(pattern.slice(1), text.slice(1));\n}\n</code></pre>\n<p>The above code advances character by character across the the pattern/text pair. It first compares <code>pattern[0]</code> to <code>text[0]</code> and then <code>pattern[1]</code> to <code>text[1]</code> and continues comparing <code>pattern[i]</code> to <code>text[i]</code> until <code>i === pattern.length - 1</code>. If they ever don't match, then we know that the pattern cannot match the text.</p>\n<p>Let's take an example. Suppose we invoke <code>match('a.c', 'abc')</code>, which returns <code>matchOne('a', 'a') &#x26;&#x26; match('.c', 'bc')</code>.</p>\n<p>If we continue evaluating these functions, we get <code>matchOne('a', 'a') &#x26;&#x26; matchOne('.', 'b') &#x26;&#x26; matchOne('c', 'c') &#x26;&#x26; match(\"\", \"\")</code>, which is just equal to <code>true &#x26;&#x26; true &#x26;&#x26; true &#x26;&#x26; true</code>, So we have a match!</p>\n<h2>The $ Character</h2>\n<p>Let's add support for the special pattern character <code>$</code> that allows us to match the end of a string. The solution simply requires adding an additional base case to the match function.</p>\n<pre><code class=\"language-js\">function match(pattern, text) {\n  if (pattern === '') return true;\n  if (pattern === '$' &#x26;&#x26; text === '') return true;\n  else return matchOne(pattern[0], text[0]) &#x26;&#x26; match(pattern.slice(1), text.slice(1));\n}\n</code></pre>\n<h2>The ^ Character</h2>\n<p>Let's add support for the special pattern character <code>^</code> that allows us to match the beginning of a string. I'm going to introduce a new function called <code>search</code>.</p>\n<pre><code class=\"language-js\">function search(pattern, text) {\n  if (pattern[0] === '^') {\n    return match(pattern.slice(1), text);\n  }\n}\n</code></pre>\n<p>This function will be the new entry point to our code. Up till this point, we were only matching patterns that began at the beginning of the text. We are simply making that more clear now by forcing the user to preface the pattern with a <code>^</code>. But how do we support patterns that appear anywhere within the text?</p>\n<h2>Matches Starting Anywhere</h2>\n<p>Currently, the following return <code>true</code></p>\n<p><code>search(\"^abc\", \"abc\")</code>\n<code>search(\"^abcd\", \"abcd\")</code></p>\n<p>But <code>search(\"bc\", \"abcd\")</code> will just return <code>undefined</code>. We want it to return <code>true</code></p>\n<p>If the user does not specify that the pattern matches the beginning of the text, then we want to search for that pattern at every possible starting point within the text. We will default to this behavior if the pattern does not begin with <code>^</code><sup><a href=\"#footnote1\">1</a></sup>.</p>\n<pre><code class=\"language-js\">function search(pattern, text) {\n  if (pattern[0] === '^') {\n    return match(pattern.slice(1), text);\n  } else {\n    // This code will run match(pattern, text.slice(index)) on every index of the text.\n    // This means that we test the pattern against every starting point of the text.\n    return text.split('').some((_, index) => {\n      return match(pattern, text.slice(index));\n    });\n  }\n}\n</code></pre>\n<h2>The ? Character</h2>\n<p>We want to be able to match 0 to 1 of the character before <code>?</code>.</p>\n<p>Here are some examples</p>\n<p><code>search(\"ab?c\", \"ac\")</code> -> <code>true</code>\n<code>search(\"ab?c\", \"abc\")</code> -> <code>true</code>\n<code>search(\"a?b?c?\", \"abc\")</code> -> <code>true</code>\n<code>search(\"a?b?c?\", \"\")</code> -> <code>true</code></p>\n<p>The first step is to modify <code>match</code> to detect when a <code>?</code> character is present and then delegate to the <code>matchQuestion</code> function, which we will define shortly.</p>\n<pre><code class=\"language-js\">function match(pattern, text) {\n  if (pattern === '') {\n    return true;\n  } else if (pattern === '$' &#x26;&#x26; text === '') {\n    return true;\n    // Notice that we are looking at pattern[1] instead of pattern[0].\n    // pattern[0] is the character to match 0 or 1 of.\n  } else if (pattern[1] === '?') {\n    return matchQuestion(pattern, text);\n  } else {\n    return matchOne(pattern[0], text[0]) &#x26;&#x26; match(pattern.slice(1), text.slice(1));\n  }\n}\n</code></pre>\n<p><code>matchQuestion</code> needs to handle two cases:</p>\n<ol>\n<li>Where the character before the <code>?</code> is not matched but the text matches the remainder of the pattern (everything after the <code>?</code>).</li>\n<li>Where the character before the <code>?</code> is matched and the rest of the text (minus the 1 matched character) matches the remainder of the pattern.</li>\n</ol>\n<p>If either of these cases is truthy, then <code>matchQuestion</code> can return <code>true</code>.</p>\n<p>Let's consider the first case. How do we check if the text matches everything in the pattern except the <code>_?</code> syntax? In order words, how do we check if the character before the <code>?</code> appears 0 times? We strip 2 characters off the pattern (the first character is the one before the <code>?</code> and the second is the <code>?</code> itself) and invoke the match function.</p>\n<pre><code class=\"language-js\">function matchQuestion(pattern, text) {\n  return match(pattern.slice(2), text);\n}\n</code></pre>\n<p>The second case is a little more challenging, but just like before, it reuses functions we've already written</p>\n<pre><code class=\"language-js\">function matchQuestion(pattern, text) {\n  if (matchOne(pattern[0], text[0]) &#x26;&#x26; match(pattern.slice(2), text.slice(1))) {\n    return true;\n  } else {\n    return match(pattern.slice(2), text);\n  }\n}\n</code></pre>\n<p>If the <code>text[0]</code> matches <code>pattern[0]</code>, and the rest of the text (minus the part that is matched by <code>matchOne</code>) matches the remainder of the pattern, then we are golden. Note that we could rewrite the code like this:</p>\n<pre><code class=\"language-js\">function matchQuestion(pattern, text) {\n  return (\n    (matchOne(pattern[0], text[0]) &#x26;&#x26; match(pattern.slice(2), text.slice(1))) ||\n    match(pattern.slice(2), text)\n  );\n}\n</code></pre>\n<p>The one thing I like about this latter approach is that the boolean OR makes it explicitly clear that there are two cases, either of which may be true.</p>\n<h2>The * Character</h2>\n<p>We want to be able to match the character before the <code>*</code> 0 or more times.</p>\n<p>All of these should return <code>true</code>.</p>\n<p><code>search(\"a*\", \"\")</code>\n<code>search(\"a*\", \"aaaaaaa\")</code>\n<code>search(\"a*b\", \"aaaaaaab\")</code></p>\n<p>Similar to what we did when supporting <code>?</code>, we wan to delegate to a <code>matchStar</code> function within our <code>match</code> function</p>\n<pre><code class=\"language-js\">function match(pattern, text) {\n  if (pattern === '') {\n    return true;\n  } else if (pattern === '$' &#x26;&#x26; text === '') {\n    return true;\n  } else if (pattern[1] === '?') {\n    return matchQuestion(pattern, text);\n  } else if (pattern[1] === '*') {\n    return matchStar(pattern, text);\n  } else {\n    return matchOne(pattern[0], text[0]) &#x26;&#x26; match(pattern.slice(1), text.slice(1));\n  }\n}\n</code></pre>\n<p><code>matchStar</code>, like <code>matchQuestion</code>, also needs to handle two cases:</p>\n<ol>\n<li>Where the character before the <code>*</code> is not matched but the text matches the remainder of the pattern (everything after the <code>*</code>).</li>\n<li>Where the character before the <code>*</code> is matched one or more times and the rest of the text matches the remainder of the pattern.</li>\n</ol>\n<p>Since there are two cases that both result in a match (0 matches OR more matches), we know that <code>matchStar</code> can be implemented with a boolean OR. Furthermore, case 1 for <code>matchStar</code> is exactly the same as it was for <code>matchQuestion</code> and can be implemented identically using <code>match(pattern.slice(2), text)</code>. That means we only need to formulate an expression that satisfies case 2.</p>\n<pre><code class=\"language-js\">function matchStar(pattern, text) {\n  return (\n    (matchOne(pattern[0], text[0]) &#x26;&#x26; match(pattern, text.slice(1))) || match(pattern.slice(2), text)\n  );\n}\n</code></pre>\n<h2>Refactoring</h2>\n<p>We can now go back and cleverly simplify <code>search</code> using a trick I learned in Peter Norvig's <a href=\"https://www.udacity.com/course/design-of-computer-programs--cs212\">class</a>.</p>\n<pre><code class=\"language-js\">function search(pattern, text) {\n  if (pattern[0] === '^') {\n    return match(pattern.slice(1), text);\n  } else {\n    return match('.*' + pattern, text);\n  }\n}\n</code></pre>\n<p>We use the <code>*</code> character itself to allow for the pattern to appear anywhere in the string. The prepended <code>.*</code> says that any number of any character can appear before the pattern we wish to match.</p>\n<h2>Conclusion</h2>\n<p>It's remarkable how simple and elegant the code for such a sophisticated and generalized program can be. The full source is available in this <a href=\"https://github.com/nadrane/build-your-own-regex\">GitHub repository</a></p>\n<p>Here is a <a href=\"https://nickdrane.com/regex-and-automated-test-fuzzing/\">follow up article</a> where I fuzz test the regex engine.</p>\n<p><em>If you work at a company using javascript, I do <a href=\"/hire-me\">consulting</a> work and am currently looking for new clients. Please <a href=\"mailto:nick@nickdrane.com\">contact me</a> for more details.</em></p>\n<h4>Footnotes</h4>\n<p><a name=\"footnote1\">1</a>: There is a small bug in this code that I'm choosing to ignore. We don't account for the case that text is an empty string. Currently when <code>text === ''</code>, <code>text.split(\"\")</code> will return <code>[]</code> and will not appropriately call <code>match</code>.</p>","fields":{"slug":"build-your-own-regex"},"frontmatter":{"title":"Build a Regex Engine in Less than 40 Lines of Code","date":"2017-11-28T00:00:00.000Z"}}},{"node":{"html":"<p>The other day at work, one of my colleagues was frated that he was unable to encode nested objects in a query string and still maintain a readable URL. I went home that night and coded up a simple solution to this problem, and I thought I'd share it here today. This <a href=\"https://github.com/nadrane/querystring-encoder\">Github repo</a> contains specs and the solution code.</p>\n<!-- more -->\n<h2>Motivation</h2>\n<p>Today, in the Node.js ecosystem, numerous modules exist to encode query strings, but they generally have one of two flaws:</p>\n<ol>\n<li>\n<p>They do not permit the encoding of nested objects.</p>\n</li>\n<li>\n<p>They can encode nested objects, but they delimit nesting using unsafe URL characters, yielding an operation and a result that look like this <sup><a href=\"#footnote1\">1</a></sup>:</p>\n</li>\n</ol>\n<pre><code class=\"language-js\">encode({\n  a: { b: 'c' }\n});\n>>>`a%5Bb%5D=c`\n</code></pre>\n<h2>The Problem in Detail</h2>\n<p>Node.js provides a <a href=\"https://nodejs.org/api/querystring.html\"><code>querystring</code></a> module to encode objects to query strings. The only problem is that conforms to an official specification that doesn't allow nested objects. Unfortunately, this specification does not allow for enough flexibility when creating a RESTful API.</p>\n<p>For example, suppose the client wants to filter a collection of cars by make and model. The route might look like this:</p>\n<p><code>/api/cars?make=honda&#x26;model=civic</code></p>\n<p>This URI makes it reasonably clear that we want to filter cars by their make and model.</p>\n<p>What if we wanted to do something more complicated. What if we wanted to filter cars and order them by price?</p>\n<p><code>/api/cars?order=price&#x26;make=honda&#x26;model=civic</code></p>\n<p>It's no longer clear which query parameters describe the ordering and which describe the filter. Ideally, we want the url to look like this:</p>\n<p><code>/api/cars?order=price&#x26;filter.make=honda&#x26;filter.model=civic</code></p>\n<p>If we were to represent the query string of the above URI as a Javascript object, it would probably look like this:</p>\n<pre><code class=\"language-js\">{\n    order: \"price\",\n    filter: {\n        make: \"honda\",\n        model: \"civic\"\n    }\n}\n</code></pre>\n<p>And then we quickly run into our problem. We need to encode the object above into</p>\n<p><code>order=price&#x26;filter.make=honda&#x26;filter.model=civic</code></p>\n<p>but Node.js's <a href=\"https://nodejs.org/api/querystring.html\"><code>querystring</code></a> can't encode nested objects.</p>\n<h2>Existing Modules Supporting Nested Querystrings</h2>\n<p>By default, the <a href=\"https://www.npmjs.com/package/qs\">qs</a> module creates ugly urls when it encodes nested query strings. If we encode our object above, we get</p>\n<p><code>order=price&#x26;filter[make]=honda&#x26;filter[model]=civic</code></p>\n<p>The <code>[</code> and <code>]</code> characters are both considered unsafe in a URL and are required to be escaped. The URL becomes unreadable after this percent encoding operation.</p>\n<p><code>order=price&#x26;filter%5Bmake%5D=honda&#x26;filter%5Bmodel%5D=civic</code></p>\n<p>Fortunately, the <code>.</code> is not considered unsafe and does not need to be escaped, making it the perfect character to express object nesting.</p>\n<h2>The Solution</h2>\n<p>The solution is broken down into two parts. The first is <em>encoding</em> a nested object into a query string. The second part is <em>decoding</em> a query string back into a nested object.</p>\n<h3>Encoding Nested Objects <sup><a href=\"#footnote2\">2</a></sup></h3>\n<p>Let's write some code to encode</p>\n<pre><code class=\"language-js\">{\n  filter: {\n    make: 'honda';\n    model: 'civic';\n  }\n}\n</code></pre>\n<p>into the query string <code>filter.make=honda&#x26;filter.model=civic</code></p>\n<pre><code class=\"language-js\">const { escape } = require('querystring');\n\nfunction encode(queryObj, nesting = '') {\n  let queryString = '';\n\n  const pairs = Object.entries(queryObj).map(([key, val]) => {\n    // Handle the nested, recursive case, where the value to encode is an object itself\n    if (typeof val === 'object') {\n      return encode(val, nesting + `${key}.`);\n    } else {\n      // Handle base case, where the value to encode is simply a string.\n      return [nesting + key, val].map(escape).join('=');\n    }\n  });\n  return pairs.join('&#x26;');\n}\n</code></pre>\n<p>Notice that we use the <a href=\"https://nodejs.org/api/querystring.html#querystring_querystring_escape_str\">escape</a> function provided in Node.js core to percent encode specific characters.</p>\n<h3>Encoding Arrays as Values</h3>\n<p>If we want to add support to encode an object with array values, like the following:</p>\n<pre><code class=\"language-js\">{\n    name: \"nick\",\n    hobbies: [\"cooking\", \"coding\"]\n}\n</code></pre>\n<p>then we only need to add another base case to our function</p>\n<pre><code class=\"language-js\">function encode(queryObj, nesting = '') {\n  let queryString = '';\n\n  const pairs = Object.entries(queryObj).map(([key, val]) => {\n    // Handle a second base case where the value to encode is an array\n    if (Array.isArray(val)) {\n      return val.map(subVal => [nesting + key, subVal].map(escape).join('=')).join('&#x26;');\n    } else if (typeof val === 'object') {\n      return encode(val, nesting + `${key}.`);\n    } else {\n      return [nesting + key, val].map(escape).join('=');\n    }\n  });\n  return pairs.join('&#x26;');\n}\n</code></pre>\n<p>An encoding function is not very useful unless you can decode the encoded string back to it's original form.</p>\n<h3>Decoding Nested Objects</h3>\n<p>We want to write a function that will decode <code>filter.make=honda&#x26;filter.model=civic</code> back into a nested object</p>\n<pre><code class=\"language-js\">{\n  filter: {\n    make: 'honda';\n    model: 'civic';\n  }\n}\n</code></pre>\n<p>The code to do this is fairly straightforward if we use a <a href=\"https://lodash.com/docs\">Lodash</a> utility called <a href=\"https://lodash.com/docs/4.17.5#set\">set</a> that allows us to set an arbitrarily nested key in an object.</p>\n<pre><code class=\"language-js\">const set = require('lodash.set');\n\nfunction decode(queryString) {\n  const queryStringPieces = queryString.split('&#x26;');\n  const decodedQueryString = {};\n\n  for (const piece of queryStringPieces) {\n    let [key, value] = piece.split('=');\n    value = value || ''; // If a value is not defined, it should be decoded as an empty string\n    set(decodedQueryString, key, value);\n  }\n  return decodedQueryString;\n}\n</code></pre>\n<h3>Decoding Arrays as Values</h3>\n<p>If we want to add support to decode arrays like we did above, then we need to do a little additional work. Fortunately, two additional <a href=\"https://lodash.com/docs\">Lodash</a> utilities, <a href=\"https://lodash.com/docs/4.17.5#has\">has</a> and <a href=\"https://lodash.com/docs/4.17.5#get\">get</a>, allow us to check for the existence of a nested key and to get the value associated with a nested key, respectively, greatly simplifying our problem.</p>\n<pre><code class=\"language-js\">const set = require('lodash.set');\nconst has = require('lodash.has');\nconst get = require('lodash.get');\n\nfunction decode(queryString) {\n  const queryStringPieces = queryString.split('&#x26;');\n  const decodedQueryString = {};\n\n  for (const piece of queryStringPieces) {\n    let [key, value] = piece.split('=');\n    value = value || '';\n    if (has(decodedQueryString, key)) {\n      const currentValueForKey = get(decodedQueryString, key);\n      if (!Array.isArray(currentValueForKey)) {\n        set(decodedQueryString, key, [currentValueForKey, value]);\n      } else {\n        currentValueForKey.push(value);\n      }\n    } else {\n      set(decodedQueryString, key, value);\n    }\n  }\n  return decodedQueryString;\n}\n</code></pre>\n<h2>Conclusion</h2>\n<p>And that's it! The whole thing, encoding and decoding, only takes ~40 lines of code. Perhaps next time you encounter something that feels a little too fundamental to code yourself, you won't hesitate to write some code if you can't find a sufficient open source package.</p>\n<p><em>If you've run into challenges with your web applications, I do <a href=\"/hire-me\">consulting</a> work and am currently looking for new clients. Please <a href=\"mailto:nick@nickdrane.com\">contact me</a> for more details.</em></p>\n<h4>Footnotes</h4>\n<p><a name=\"footnote1\">1</a>: This example is straight from the <a href=\"https://www.npmjs.com/package/qs\">qs</a> documentation. Incidentally, qs provides an option to encode using a url safe character, which would result in readable urls, but this is not the default.</p>\n<p><a name=\"footnote2\">2</a>: It's worth noting that you might not want to use this code in production. I've written the code in a functional style for clarity and conciseness. If you have a high read volume, given that this code might potentially run on a significant portion of GET requests, it should probably be written in an imperative style that doesn't disregard performance. Even more importantly, this code does not protect against potential attackers who might try to create an arbitrarily deeply nested object or might include an unwieldy number of query parameters.</p>","fields":{"slug":"build-your-own-nested-query-string-encoder"},"frontmatter":{"title":"Build Your Own Nested Query String Encoder/Decoder","date":"2018-04-13T15:17:00.000Z"}}},{"node":{"html":"<p><em>My inspiration for this blog post came from <a href=\"https://www.youtube.com/watch?v=VJ38wSFbM3A\">this video</a> where Dan Abramov walks through the source code to react-redux</em></p>\n<p>As frontend web developers, it's not uncommon that we follow well-specified patterns - often blindly. The frontend landscape is changing rapidly, and sometimes there isn't time to investigate why we use a specific pattern; we just know we should.</p>\n<p>One widely used pattern in <a href=\"https://github.com/reactjs/react-redux\">react-redux</a> applications looks like this</p>\n<pre><code class=\"language-js\">connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MyComponent);\n</code></pre>\n<p>I'll assume you know how to implement this pattern, but why do we use it and how does it work under the hood?</p>\n<!-- more -->\n<h2>Why Do we Need React-Redux?</h2>\n<p>React and Redux are two completely independent tools that have nothing to do with each other. React is a tool for creating user interfaces in the browser. Redux is a tool for managing state. Either tool can be used without the other. We often use them together because they both solve separate but very important and closely related problems. The purpose of react-redux is to get these two tools to talk.</p>\n<p>But first, what would we do without react-redux? How would React and Redux talk?</p>\n<h2>How to Integrate React and Redux Without react-redux</h2>\n<p>More precisely, how do we ensure that a React component re-renders when the Redux store changes? The answer lies in Redux's <a href=\"http://redux.js.org/docs/api/Store.html#subscribe\">subscribe</a> API.</p>\n<pre><code class=\"language-js\">import store from './store';\nimport { Component } from 'react';\n\nclass MyComponent extends Component {\n  constructor() {\n    super();\n    // One solution is to make each component\n    // store the entirety of the redux state.\n    this.state = { storeState: store.getState() };\n  }\n\n  componentDidMount() {\n    // Callbacks passed to store.subscribe will be\n    // invoked every time the store's state changes.\n    // Our callback can get the state of the\n    // store and add it to the component's local state.\n    this.unsubscribe = store.subscribe(() => {\n      this.setState({ storeState: store.getState() });\n    });\n  }\n\n  // We need to make sure that we don't accidentally\n  // subscribe to the store multiple times in the case\n  // where a component mounts, unmounts, and then mounts a second time.\n  // Fortunately, Redux makes this easy by returning\n  // an unsubscribe function when store.subscribe is invoked.\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n}\n</code></pre>\n<p>If we insert the above boilerplate into every one of our React component's, then every component could have access to the store and would be informed through a subscription the moment the store's state changes. This configuration has three flaws.</p>\n<ol>\n<li>The boilerplate of subscribing and unsubscribing to the store is highly error prone and unnecessarily verbose.</li>\n<li>All of our React component's are dependent upon knowledge of the Redux store. This is a complete failure of <a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\">separation of concerns</a>.</li>\n<li>Every component is dependent upon the entirety of the store's state tree. This means that whenever an action is dispatched, <code>setState</code> is called on every mounted component, causing each one to re-render, regardless of whether its render function depends on the store state that changed. Woah! Let that sink in for a moment.</li>\n</ol>\n<p>Let's write a rudimentary implementation of connect that resolves the first problem.</p>\n<h2>Understanding The Syntax of Connect</h2>\n<p>Typically, we invoke <code>connect</code> like this:</p>\n<pre><code class=\"language-js\">connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WrappedComponent);\n</code></pre>\n<p><code>connect</code> takes in two functions as arguments and returns a function. Yes, you heard me, <code>connect</code> returns a function, not a component. Suppose I invoke <code>connect</code> and neglect to pass in a component.</p>\n<pre><code class=\"language-js\">const connectFunc = connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\nconst connctedComponent = connectFunc(WrappedComponent);\n</code></pre>\n<p><code>connect</code> will return to me a function. It's that function that takes in my component (<code>connect</code> is implemented this way as opposed to simply taking in 3 arguments to support decorator syntax. The Dan Abramov video I linked above explains this.)</p>\n<p>Thus, the very first few lines of <code>connect</code> must look like this:</p>\n<pre><code class=\"language-js\">function connect(mapStateToProps, mapDispatchToProps) {\n  return function(WrappedComponent) {};\n}\n</code></pre>\n<h2>Higher Order Components</h2>\n<p>And what does the function we returned above do? This function is implemented as a <a href=\"https://reactjs.org/docs/higher-order-components.html\">higher order component</a> (HOC). A HOC is a function that takes in a component as a parameter and returns a new component. The new component is generally a modified or augmented version of the original component.</p>\n<pre><code class=\"language-js\">function connect(mapStateToProps, mapDispatchToProps) {\n  return function(WrappedComponent) {\n    // We are returning a brand new component.\n    // Note that this new component does\n    // not inherit from WrappedComponent.\n    return class WrapperComponent extends Component {\n      // All we are doing is returning a new component\n      // that renders our original component.\n      render() {\n        // Notice that we need to pass WrappedComponent\n        // WrapperComponent's props.\n        // If we didn't do this, then WrappedComponent\n        // would never have access to any props.\n        return &#x3C;WrappedComponent {...this.props} />;\n      }\n    };\n  };\n}\n</code></pre>\n<p>If we were to run the above <code>connect</code> function on a component, the connected component would behave identically to original component. Furthermore, we could nest <code>connect</code> as many times as we want</p>\n<pre><code class=\"language-js\">connect(\n  null,\n  null\n)(\n  connect(\n    null,\n    null\n  )(App)\n);\n</code></pre>\n<p>and still never distort the behavior of the original component. Our current implementation is effectively <a href=\"https://stackoverflow.com/questions/1077412/what-is-an-idempotent-operation\">idempotent</a>.</p>\n<h2>Eliminating Boilerplate</h2>\n<p>Our next step is to eliminate some of the boilerplate code. We don't want to have to subscribe to the store every time we create a new component, so let's have our new <code>connect</code> function do it instead.</p>\n<pre><code class=\"language-js\">function connect(mapStateToProps, mapDispatchToProps) {\n  return function(WrappedComponent) {\n    return class WrapperComponent extends Component {\n      constructor() {\n        super();\n        this.state = { storeState: store.getState() };\n      }\n\n      componentDidMount() {\n        this.unsubscribe = store.subscribe(() => {\n          this.setState({ storeState: store.getState() });\n        });\n      }\n\n      componentWillUnmount() {\n        this.unsubscribe();\n      }\n\n      render() {\n        // Since the whole point of this HOC is to get WrappedComponent\n        // access to the store, we need to pass that state down as props.\n        const storeState = this.state.storeState;\n        return &#x3C;WrappedComponent {...this.props} {...storeState} />;\n      }\n    };\n  };\n}\n</code></pre>\n<p>We just made huge progress! Now, whenever we invoke</p>\n<pre><code class=\"language-js\">connect(\n  null,\n  null\n)(MyComponent);\n</code></pre>\n<p>we get a component that is subscribed to state changes on the store, and this state will be passed down to our component as props.</p>\n<h2>Implementing Support for mapStateToProps</h2>\n<p>Our connected components still all depend on the entirety of the store's state tree. Look up above, the entire state is passed down as props to every connected component. To reiterate, this means that if any piece of the store's state is updated, our component will re-render.</p>\n<p>This is where <code>mapStateToProps</code> comes to the rescue. <code>mapStateToProps</code> takes as its argument the store's state, and it allows us to return the particular pieces of the store's state that a component depends on. It then passes that state as props to our component instead.</p>\n<pre><code class=\"language-js\">function connect(mapStateToProps, mapDispatchToProps) {\n  return function(WrappedComponent) {\n    return class WrapperComponent extends Component {\n      constructor() {\n        super();\n        this.state = { storeState: store.getState() };\n      }\n\n      componentDidMount() {\n        this.unsubscribe = store.subscribe(() => {\n          this.setState({ storeState: store.getState() });\n        });\n      }\n\n      componentWillUnmount() {\n        this.unsubscribe();\n      }\n\n      render() {\n        // Now, instead of passing down all of the store state,\n        // we only pass down the subset of state return from\n        // mapStateToProps\n        const storeProps = mapStateToProps(this.state.storeState);\n        return &#x3C;WrappedComponent {...this.props} {...storeProps} />;\n      }\n    };\n  };\n}\n</code></pre>\n<p>All we did was insert a call to <code>mapStateToProps</code>, allowing us to make each connected component dependent upon only the state it cares about, as defined by the return value of <code>mapStateToProps</code>. <code>mapStateToProps</code> is a wonderful form of explicit documentation, clearly stating the slices of the state tree each component depends on. Unfortunately, our change does not fix the efficiency problems noted above. More on that below.</p>\n<h2>mapStateToProps and ownProps</h2>\n<p>An astute reader might note that <code>mapStateToProps</code> actually takes two arguments: the first is a copy of the store's state, and the second are the props that are originally passed down to <code>WrapperComponent</code>. <code>react-redux</code> does not pass these down to the wrapped component by default as we do in the example immediately above. Let's modify our implementation to mirror <code>react-redux</code>.</p>\n<pre><code class=\"language-js\">function connect(mapStateToProps, mapDispatchToProps) {\n  return function(WrappedComponent) {\n    return class WrapperComponent extends Component {\n      constructor() {\n        super();\n        this.state = { storeState: store.getState() };\n      }\n\n      componentDidMount() {\n        this.unsubscribe = store.subscribe(() => {\n          this.setState({ storeState: store.getState() });\n        });\n      }\n\n      componentWillUnmount() {\n        this.unsubscribe();\n      }\n\n      render() {\n        const newProps = mapStateToProps(this.state.storeState, this.props);\n        return &#x3C;WrappedComponent {...newProps} />;\n      }\n    };\n  };\n}\n</code></pre>\n<p>Now the implementer of <code>mapStateToProps</code> can choose which of <code>WrapperComponent</code>'s props it would like to keep and which it would like to disregard.</p>\n<h2>What's the Point of mapDispatchToProps?</h2>\n<p><code>mapDispatchToProps</code> is designed to eliminate React's dependency upon Redux. If we were to use the above implementation of <code>connect</code>, every component that dispatch's an action must import <code>store.dispatch</code>, and the implementation would look like this:</p>\n<pre><code class=\"language-js\">import store from './store';\nimport { Component } from 'react';\nimport { updateThing } from './store/actions';\n\nclass ExampleComponent extends Component {\n  handleChange(e) {\n    store.dispatch(updateThing(e.target));\n  }\n}\n</code></pre>\n<p>The above component 'knows' that it is part of a Redux application because it is explicitly referencing the store to dispatch actions. But we should always try to minimize the interaction of different pieces of architecture, esspecially when they have no need to interact. Ultimately, React components should not been intertwined with Redux code!</p>\n<h2>Implementing Support for mapDispatchToProps</h2>\n<p><code>connect</code> resolves this problem for us by injecting the <code>store.dispatch</code> dependency into <code>mapDispatchToProps</code>, allowing us to explicitly define functions that dispatch actions without requiring that our <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">presentation components</a> have a dependency on the store. Just as the return value of <code>mapStateToProps</code> is passed down to <code>WrappedComponent</code>, the return value of <code>mapDispatchToProps</code> will be passed down as well.</p>\n<pre><code class=\"language-js\">function connect(mapStateToProps, mapDispatchToProps) {\n  return function(WrappedComponent) {\n    return class WrapperComponent extends Component {\n      constructor() {\n        super();\n        this.state = { storeState: store.getState() };\n      }\n\n      componentDidMount() {\n        this.unsubscribe = store.subscribe(() => {\n          this.setState({ storeState: store.getState() });\n        });\n      }\n\n      componentWillUnmount() {\n        this.unsubscribe();\n      }\n\n      render() {\n        // Now we merge the results from mapStateToProps\n        // and mapDispatchToProps and pass everything down\n        const newProps = Object.assign(\n          {},\n          mapStateToProps(this.state.storeState, this.props),\n          // If you aren't intimately familiar with the this keyword,\n          // it's okay if you don't understand why we use bind here\n          mapDispatchToProps(store.dispatch.bind(this))\n        );\n        return &#x3C;WrappedComponent {...newProps} />;\n      }\n    };\n  };\n}\n</code></pre>\n<h2>More Efficiency Issues - Hello shouldComponentUpdate</h2>\n<p>We never actually fixed any of the performance issues noted above. The crux of the problem is that every time the store updates, <code>WrapperComponent</code> re-renders (because of its Redux store subscription that calls <code>setState</code>) and that means <code>WrappedComponent</code> re-renders. This <a href=\"/leveraging-immutability-in-react\">re-rendering</a> happens despite the fact that <code>WrappedComponent</code>'s props might be unchanged between two invocations of <code>setState</code>. In fact, this scenario is highly probable and will occur whenever a piece of state in the store changes that your component does not depend on (aka, a piece of store state not returned from from <code>mapStateToProps</code>).</p>\n<p>React has a handy lifecycle method called <a href=\"https://reactjs.org/docs/react-component.html#shouldcomponentupdate\"><code>shouldComponentUpdate</code></a> that allows us to return a boolean that indicates whether a component should re-render. In essence, if we implement this method on <code>WrapperComponent</code> and it returns <code>false</code>, then React will not re-render <code>WrapperComponent</code>. And it follows that <code>WrappedComponent</code> won't re-render either.</p>\n<p>So, in the above scenario, when <code>WrapperComponent</code> calls <code>setState</code>, React first calls the <code>shouldComponentUpdate</code> method to see if a re-render should actually happen. Let's implement it below.</p>\n<pre><code class=\"language-js\">// Just a simple shallow equality function\nimport shallowEqual from 'shallow-equal/objects';\n\nfunction connect(mapStateToProps, mapDispatchToProps) {\n  return function(WrappedComponent) {\n    return class WrapperComponent extends Component {\n      constructor() {\n        super();\n        this.state = { storeState: store.getState() };\n      }\n\n      shouldComponentUpdate() {\n        // If the props to WrapperComponent do not change\n        // between setState calls, then we don't need to re-render.\n        // On the previous re-render, we cached the results of\n        // mapStateToProps. That's what this.oldProps is.\n        const newProps = mapStateToProps(this.state.storeState, this.props);\n        return !shallowEqual(newProps, this.oldProps);\n      }\n\n      componentDidMount() {\n        this.unsubscribe = store.subscribe(() => {\n          this.setState({ storeState: store.getState() });\n        });\n      }\n\n      componentWillUnmount() {\n        this.unsubscribe();\n      }\n\n      render() {\n        // We need to hang onto the previous result of\n        // mapStateToProps to use the next time\n        // shouldComponentUpdate runs\n        this.oldProps = mapStateToProps(this.state.storeState, this.props);\n        const newProps = Object.assign({}, this.oldProps, mapDispatchToProps(store.dispatch.bind(this)));\n        return &#x3C;WrappedComponent {...newProps} />;\n      }\n    };\n  };\n}\n</code></pre>\n<p>I've created a demo <a href=\"https://codesandbox.io/s/o43p70k66\">here</a>. Open the console and prove to yourself that <code>shouldComponentUpdate</code> is doing its job.</p>\n<p><em>I should note that this is not exactly what react-redux does because of edge cases, but the concept is still the same.</em></p>\n<p>Now our wrapper and wrapped components will only re-render when the props returned from <code>mapStateToProps</code> change! This is a huge performance gain. This implementation of <code>connect</code> explains why adherence to <a href=\"http://redux.js.org/docs/faq/ReactRedux.html#react-not-rerendering\">immutability is so important</a> in redux's reducers. If you fail to respect immutability, the shallow comparison in the <code>shouldComponentUpdate</code> in <code>WrapperComponent</code> will likely return <code>false</code>, causing your connected component to not re-render when it should.</p>\n<h2>Wrapping up</h2>\n<p>React-redux's <code>connect</code> method is remarkably simple and only performs a handful of operations.</p>\n<ol>\n<li>It manages our component's subscription to the store so that our component can update when the store updates.</li>\n<li>It allows us to explicitly define the slice of state our component is dependent upon using <code>mapStateToProps</code>.</li>\n<li>It gives our component access to <code>store.dispatch</code> without requiring a direct dependency on the store.</li>\n<li>It defines <code>shouldComponentUpdate</code>, ensuring that our components only re-render when the store state they depend on changes.</li>\n</ol>\n<p>I hope you found this article helpful. Please feel free to email me and reach out if you have questions. I put a <a href=\"https://gist.github.com/nadrane/5221c64c421efe421bda9fdaab167dc2\">gist</a> online containing the same code as the demo.</p>\n<p><em>If you use the React/Redux stack and need help, I do <a href=\"/hire-me\">consulting</a> work and am currently looking for new clients. Please <a href=\"mailto:nick@nickdrane.com\">contact me</a> for more details.</em></p>","fields":{"slug":"write-your-own-redux-connect"},"frontmatter":{"title":"Write Your Own React-Redux Connect","date":"2017-09-29T13:14:18.000Z"}}}]}},"pageContext":{"category":"Build Your Own"}}