{"componentChunkName":"component---src-templates-article-js","path":"/optimizing-gatsby-build-times-for-large-websites-using-pagecontext/","webpackCompilationHash":"17aab0c6c8bb8bde0f93","result":{"data":{"markdownRemark":{"html":"<p>TL;DR Check out the <a href=\"#fragment1\">Bulk Requests and pageContext</a> section below to learn how pageContext works.</p>\n<p><a href=\"https://www.gatsbyjs.org/\">Gatsby</a> has become the de facto JavaScript static site generator because of its dedication to performance, near-infinite flexibility, and its embrace of React and GraphQL. Like any great tool, however, Gatsby is not without flaws.</p>\n<p>Gatsby allows you to build your static website by querying a GraphQL API at build time. If you choose this approach, as your site grows, your Gatsby build times will likely increase with every added page. Slow build times hinder developer workflows and make deployments cumbersome. In my <a href=\"/a-performance-guide-to-gatsbyjs\">previous article</a>, I discussed optimizing GraphQL queries in Gatsby to decrease page load times. This article will focus on how GraphQL queries can be optimized to shorten ten minute or even hour-long build times to seconds.</p>\n<!-- more -->\n<h2>Gatsby Templates</h2>\n<p>The typical Gatsby site has a template for each page type. For example, you might have a page for each product your site sells and a single template to generate these pages.</p>\n<p>Each template has two pieces:</p>\n<ol>\n<li>A React Component</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Product</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Name: </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      Price: </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      Description: </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The HTML outputted by this React component determines the contents of each product page on your site.</p>\n<ol start=\"2\">\n<li>A GraphQL Query</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query Product($productId: String!) {\n    GetProduct(id: $productId) {\n      name\n      price\n      description\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This GraphQL query will run at build time, and the results will be accessible in the <code class=\"language-text\">data</code> prop of the above component.</p>\n<p>Together, these two pieces comprise your template file and will likely be located at <code class=\"language-text\">src/templates/product.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/templates/product.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Product</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Name: </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      Price: </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      Description: </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query Product($productId: String!) {\n    GetProduct(id: $productId) {\n      name\n      price\n      description\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You be wondering where the query gets run, where the component is used, and how the <code class=\"language-text\">$productId</code> query parameter is defined. Let's dive into the <code class=\"language-text\">gatsby-node.js</code> file.</p>\n<h2>The gatsby-node.js File</h2>\n<p>Every Gatsby project has a <code class=\"language-text\">gatsby-node.js</code> file at its root. This file gives you access to a wide range of <a href=\"https://www.gatsbyjs.org/docs/node-apis/\">hooks</a> and <a href=\"https://www.gatsbyjs.org/docs/actions/\">APIs</a> (called actions) that let you customize the bones of your application. In fact, this is the exact same API that Gatsby plugins use under the hood.</p>\n<p>We're interested in a hook called <code class=\"language-text\">createPages</code>. This hook will run during Gatsby's build and will allow us to specify which pages we want to create with the above template. Let's explore this through an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// gatsby-node.js</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Gatsby gives us access to a GraphQL client that we can</span>\n  <span class=\"token comment\">// use to query any GraphQL API.</span>\n  <span class=\"token comment\">// Make a query to our server to get all the product ids</span>\n  <span class=\"token comment\">// in our database</span>\n  <span class=\"token keyword\">const</span> queryResults <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    query AllProducts {\n      AllProducts {\n        nodes {\n          id\n        }\n      }\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> productTemplate <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">src/templates/product.js</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Create a page for every single product ID</span>\n  queryResults<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allProducts<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/products/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>node<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// The URL where this particular page will live</span>\n      component<span class=\"token punctuation\">:</span> productTemplate<span class=\"token punctuation\">,</span> <span class=\"token comment\">// The template whose component and query define this page's HTML</span>\n      context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Query parameters passed to productTemplate's GraphQL query</span>\n        productId<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>id\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The above code will run every time you build your website. It performs a handful of steps:</p>\n<ol>\n<li>Query your server to find all the product IDs</li>\n<li>Retrieve the product template defined above</li>\n<li>Create a page for every product</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>Each page will have a url like <code class=\"language-text\">/product/55</code>, where 55 is the id of the product.</li>\n<li>We pass in the <code class=\"language-text\">productId</code> as <code class=\"language-text\">context</code>. You can think of <code class=\"language-text\">context</code> as the set of arguments passed to the GraphQL query associated with this template.</li>\n</ul>\n<p>Behind the scenes, <code class=\"language-text\">createPage</code> will execute the template's GraphQL query once per product. If you have a lot of products, this behavior can lead to performance problems.</p>\n<h2>Performance Issues</h2>\n<p>This strategy shows its warts in two scenarios:</p>\n<ol>\n<li>If your GraphQL query is expensive and you have a lot of pages, you will repeat this query once for every page for potentially thousands of pages.</li>\n<li>If two different templates make expensive queries for the same data</li>\n</ol>\n<p>Both of these scenarios can severely affect build times. Fortunately, there is a workaround.</p>\n<p><a name=\"fragment1\"></a></p>\n<h2>Bulk Requests and pageContext</h2>\n<p>The crux of our problem is that we are repeating similar queries many times. One strategy to solve this issue is to request the data in bulk. Suppose we adjusted the <code class=\"language-text\">gatsby-node</code> file's query:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// gatsby-node.js</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Query for all the data needed by every product page</span>\n  <span class=\"token comment\">// in a single HTTP request.</span>\n  <span class=\"token keyword\">const</span> queryResults <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    query AllProducts {\n      AllProducts {\n        nodes {\n          id\n          name\n          price\n          description\n        }\n      }\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We are now requesting all of the data we need in a single query (this requires server-side support to fetch many products in a single database query). As long as we can pass this data down to our template's component, there is no need for the template to make a GraphQL query at all.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// gatsby-node.js</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> queryResults <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    query AllProducts {\n      allProducts {\n        nodes {\n          id\n          name\n          price\n          description\n        }\n      }\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> productTemplate <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">src/templates/product.js</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  queryResults<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allProducts<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/products/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>node<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      component<span class=\"token punctuation\">:</span> productTemplate<span class=\"token punctuation\">,</span>\n      context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// This time we pass down the entire product as context</span>\n        product\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It turns out that <code class=\"language-text\">context</code> serves more than one purpose. Above we saw how it defines a template's query arguments; this data is also passed <strong>directly</strong> to the template component as a prop called <code class=\"language-text\">pageContext</code>.</p>\n<p>Our component can be adjusted to use this prop:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/templates/product.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Product</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> pageContext <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Name: </span><span class=\"token punctuation\">{</span>pageContext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      Price: </span><span class=\"token punctuation\">{</span>pageContext<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      Description: </span><span class=\"token punctuation\">{</span>pageContext<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Tradeoffs</h2>\n<p>This alternative approach can drastically improve performance, but it also has downsides. In fact, for the average application, the Gatsby maintainers recommend against this approach.</p>\n<p>The moment we start using <code class=\"language-text\">pageContext</code> is the moment we stop colocating our template components along with their associated GraphQL queries. You will notice that our <code class=\"language-text\">src/templates/product.js</code> file doesn't have a GraphQL query anymore (it could, if we wanted to query additional data from a more performant endpoint). This has two downsides:</p>\n<ol>\n<li>\n<p>It's not immediately obvious anymore what the props of the <code class=\"language-text\">Product</code> component are. In our simple example, this is less of a problem, but in large production applications, it has a huge effect on readability and maintainability</p>\n<ul>\n<li>This issue can be somewhat mitigated with <a href=\"https://www.typescriptlang.org/docs/handbook/interfaces.html\">TypeScript interfaces</a> or <a href=\"https://www.npmjs.com/package/prop-types\">React PropTypes</a>, but there is still an opportunity for these definitions to drift from the data actually passed in.</li>\n</ul>\n</li>\n<li>Components are usually hot reloaded when their associated GraphQL queries change. Now, when we change our query (located in the <code class=\"language-text\">gatsby-node</code> file), our website needs to be rebuilt.</li>\n</ol>\n<h2>Conclusion</h2>\n<p>Only resort to <code class=\"language-text\">pageContext</code> only when absolutely necessary. Do not use this performance optimization prematurely (before you experience a performance problem) because it only will impair the readability of your code. When your builds get slow, however, this technique can mean the difference between unacceptable build times and a smooth experience.</p>","frontmatter":{"title":"Optimizing Gatsby Build Times for Large Websites Using pageContext","date":"2019-08-26T00:00:00.000Z","url":"optimizing-gatsby-build-times-for-large-websites-using-pagecontext"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"title":"Optimizing Gatsby Build Times for Large Websites Using pageContext"}}}