{"componentChunkName":"component---src-templates-blog-index-js","path":"/drafts/","webpackCompilationHash":"daa01b31d2a7f53c7d68","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"","fileAbsolutePath":"/Users/nickdrane/coding/blog/content/_drafts/2019-10-02-parsing-structured-logs-in-sumo-logic.md","frontmatter":{"title":"","date":null,"url":null}},{"excerpt":"<p>At Fraight, we have an <a href=\"https://www.elastic.co/\">Elasticsearch</a> backed search interface that allows users to type a freetext query and get a list of database records sorted by relevancy. At it's core, this is a simple problem: if the user types in <code class=\"language-text\">Joe</code>, return all people whose name contains the word <code class=\"language-text\">Joe</code>. And indeed, returning all the <code class=\"language-text\">Joe&#39;s</code> in the system is trivial; the problem is that we work with hundreds of <code class=\"language-text\">Joes</code>. We needed a way to return the particular <code class=\"language-text\">Joe</code> that the user cares about.</p>\n","fileAbsolutePath":"/Users/nickdrane/coding/blog/content/_drafts/2019-08-31-optimizing-elasticsearch-score-with-custom-score-queries.md","frontmatter":{"title":"Optimizing Elasticsearch Score: How to Rank and Differentiate Similar Records","date":"2019-08-31T00:00:00.000Z","url":"optimizing-elasticsearch-score-with-custom-score-queries"}},{"excerpt":"<p>I recently wanted to add an id to every header tag in an HTML string. This sounds like an easy task right? A little jQuery and the problem is solved: <code class=\"language-text\">$(&quot;:header&quot;).attr(&quot;id&quot;, &quot;1&quot;)</code> is a rough solution.</p>\n<p>The catch is that this was in Node, not the browser. In most situations I would reach for <a href=\"https://cheerio.js.org/\">Cheerio</a>, which replicates the <a href=\"https://jquery.com/\">jQuery</a> API inside node, but I needed something lighter weight.</p>\n<p>This is a story of parsing, recursing, and modifying raw HTML without comfortable, declarative APIs. It's surprisingly approachable with the help of the <a href=\"https://en.wikipedia.org/wiki/Visitor_pattern\">Visitor pattern</a>!</p>\n","fileAbsolutePath":"/Users/nickdrane/coding/blog/content/_drafts/2019-09-02-manipulating-raw-html-in-node-with-node-hmtl-parser/2019-09-02-manipulating-raw-html-in-node-with-the-visitor-pattern.md","frontmatter":{"title":"Manipulating Raw HTML in Node with the Visitor Pattern","date":"2019-09-02T00:00:00.000Z","url":"manipulating-raw-html-in-node-with-the-visitor-pattern"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}