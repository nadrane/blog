{"componentChunkName":"component---src-templates-blog-index-js","path":"/drafts/","webpackCompilationHash":"","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"<p>At Fraight, we have an <a href=\"https://www.elastic.co/\">Elasticsearch</a> backed search interface that allows users to type a freetext query and get a list of database records sorted by relevancy. At it's core, this is a simple problem: if the user types in <code class=\"language-text\">Joe</code>, return all people whose name contains the word <code class=\"language-text\">Joe</code>. And indeed, returning all the <code class=\"language-text\">Joe&#39;s</code> in the system is trivial; the problem is that we work with hundreds of <code class=\"language-text\">Joes</code>. We needed a way to return the particular <code class=\"language-text\">Joe</code> that the user cares about.</p>\n","fileAbsolutePath":"/Users/nickdrane/coding/blog/content/_drafts/2019-08-31-optimizing-elasticsearch-score-with-custom-score-queries.md","frontmatter":{"title":"Optimizing Elasticsearch Score: How to Rank and Differentiate Similar Records","date":"2019-08-31T00:00:00.000Z","url":"optimizing-elasticsearch-score-with-custom-score-queries"}},{"excerpt":"<p>TL;DR Check out the <a href=\"#fragment1\">Bulk Requests and pageContext</a> section below to learn how pageContext works.</p>\n<p><a href=\"https://www.gatsbyjs.org/\">Gatsby</a> has become the de facto JavaScript static site generator because of its dedication to performance, near-infinite flexibility, and its embrace of React and GraphQL. Like any great tool, however, Gatsby is not without flaws.</p>\n<p>Gatsby allows you to build your static website by querying a GraphQL API at build time. If you choose this approach, as your site grows, your Gatsby build times will likely increase with every added page. Slow build times hinder developer workflows and make deployments cumbersome. In my <a href=\"/a-performance-guide-to-gatsbyjs\">previous article</a>, I discussed optimizing GraphQL queries in Gatsby to decrease page load times. This article will focus on how GraphQL queries can be optimized to shorten ten minute or even hour-long build times to seconds.</p>\n","fileAbsolutePath":"/Users/nickdrane/coding/blog/content/_drafts/2019-08-22-using-pageContext-to-optimize-gatsby-performance.md","frontmatter":{"title":"Optimizing Gatsby Build Times for Large Websites Using pageContext","date":"2019-08-26T00:00:00.000Z","url":"optimizing-gatsby-build-times-for-large-websites-using-pagecontext"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}