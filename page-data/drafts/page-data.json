{"componentChunkName":"component---src-templates-blog-index-js","path":"/drafts/","webpackCompilationHash":"efb0bb0915c91dac7b0a","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"","fileAbsolutePath":"/Users/nickdrane/coding/blog/content/_drafts/2019-10-02-parsing-structured-logs-in-sumo-logic.md","frontmatter":{"title":"","date":null,"url":null}},{"excerpt":"<p>At Fraight, we have an <a href=\"https://www.elastic.co/\">Elasticsearch</a> backed search interface that allows users to type a freetext query and get a list of database records sorted by relevancy. At it's core, this is a simple problem: if the user types in <code class=\"language-text\">Joe</code>, return all people whose name contains the word <code class=\"language-text\">Joe</code>. And indeed, returning all the <code class=\"language-text\">Joe&#39;s</code> in the system is trivial; the problem is that we work with hundreds of <code class=\"language-text\">Joes</code>. We needed a way to return the particular <code class=\"language-text\">Joe</code> that the user cares about.</p>\n","fileAbsolutePath":"/Users/nickdrane/coding/blog/content/_drafts/2019-08-31-optimizing-elasticsearch-score-with-custom-score-queries.md","frontmatter":{"title":"Optimizing Elasticsearch Score: How to Rank and Differentiate Similar Records","date":"2019-08-31T00:00:00.000Z","url":"optimizing-elasticsearch-score-with-custom-score-queries"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}